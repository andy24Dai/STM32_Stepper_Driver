
Stepper_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e044  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800e158  0800e158  0000f158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e694  0800e694  00010360  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e694  0800e694  0000f694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e69c  0800e69c  00010360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e69c  0800e69c  0000f69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e6a0  0800e6a0  0000f6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000360  20000000  0800e6a4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001544  20000360  0800ea04  00010360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018a4  0800ea04  000108a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f0b  00000000  00000000  00010389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f5  00000000  00000000  00022294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00025590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd7  00000000  00000000  00026690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b05c  00000000  00000000  00027367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149cf  00000000  00000000  000423c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8f6  00000000  00000000  00056d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6688  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c80  00000000  00000000  000e66cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ec34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000360 	.word	0x20000360
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e13c 	.word	0x0800e13c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000364 	.word	0x20000364
 800014c:	0800e13c 	.word	0x0800e13c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	2200      	movs	r2, #0
 800118c:	2300      	movs	r3, #0
 800118e:	4604      	mov	r4, r0
 8001190:	460d      	mov	r5, r1
 8001192:	f7ff fc13 	bl	80009bc <__aeabi_dcmplt>
 8001196:	b928      	cbnz	r0, 80011a4 <__aeabi_d2lz+0x1c>
 8001198:	4620      	mov	r0, r4
 800119a:	4629      	mov	r1, r5
 800119c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a0:	f000 b80a 	b.w	80011b8 <__aeabi_d2ulz>
 80011a4:	4620      	mov	r0, r4
 80011a6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011aa:	f000 f805 	bl	80011b8 <__aeabi_d2ulz>
 80011ae:	4240      	negs	r0, r0
 80011b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b4:	bd38      	pop	{r3, r4, r5, pc}
 80011b6:	bf00      	nop

080011b8 <__aeabi_d2ulz>:
 80011b8:	b5d0      	push	{r4, r6, r7, lr}
 80011ba:	2200      	movs	r2, #0
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <__aeabi_d2ulz+0x34>)
 80011be:	4606      	mov	r6, r0
 80011c0:	460f      	mov	r7, r1
 80011c2:	f7ff f989 	bl	80004d8 <__aeabi_dmul>
 80011c6:	f7ff fc5f 	bl	8000a88 <__aeabi_d2uiz>
 80011ca:	4604      	mov	r4, r0
 80011cc:	f7ff f90a 	bl	80003e4 <__aeabi_ui2d>
 80011d0:	2200      	movs	r2, #0
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <__aeabi_d2ulz+0x38>)
 80011d4:	f7ff f980 	bl	80004d8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4630      	mov	r0, r6
 80011de:	4639      	mov	r1, r7
 80011e0:	f7fe ffc2 	bl	8000168 <__aeabi_dsub>
 80011e4:	f7ff fc50 	bl	8000a88 <__aeabi_d2uiz>
 80011e8:	4621      	mov	r1, r4
 80011ea:	bdd0      	pop	{r4, r6, r7, pc}
 80011ec:	3df00000 	.word	0x3df00000
 80011f0:	41f00000 	.word	0x41f00000

080011f4 <USB_RX_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void USB_RX_Callback(uint8_t* Buf, uint32_t *Len){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	memcpy(usb_rx_buffer, Buf, *Len);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	481a      	ldr	r0, [pc, #104]	@ (8001270 <USB_RX_Callback+0x7c>)
 8001208:	f00a faa3 	bl	800b752 <memcpy>
	usb_rx_buf_len = *Len;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <USB_RX_Callback+0x80>)
 8001214:	801a      	strh	r2, [r3, #0]
	rx_flag = 1;
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <USB_RX_Callback+0x84>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]

	usb_rx_buffer[*Len] = '\0';
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <USB_RX_Callback+0x7c>)
 8001222:	2100      	movs	r1, #0
 8001224:	54d1      	strb	r1, [r2, r3]


	char* token = strtok((char*) usb_rx_buffer, " ");
 8001226:	4915      	ldr	r1, [pc, #84]	@ (800127c <USB_RX_Callback+0x88>)
 8001228:	4811      	ldr	r0, [pc, #68]	@ (8001270 <USB_RX_Callback+0x7c>)
 800122a:	f00a f9b1 	bl	800b590 <strtok>
 800122e:	60f8      	str	r0, [r7, #12]
	target_setpoints[0] = atoff(token);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f008 fda7 	bl	8009d84 <atoff>
 8001236:	4603      	mov	r3, r0
 8001238:	4a11      	ldr	r2, [pc, #68]	@ (8001280 <USB_RX_Callback+0x8c>)
 800123a:	6013      	str	r3, [r2, #0]

	token = strtok(NULL, " ");
 800123c:	490f      	ldr	r1, [pc, #60]	@ (800127c <USB_RX_Callback+0x88>)
 800123e:	2000      	movs	r0, #0
 8001240:	f00a f9a6 	bl	800b590 <strtok>
 8001244:	60f8      	str	r0, [r7, #12]
	target_setpoints[1] = atoff(token);
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f008 fd9c 	bl	8009d84 <atoff>
 800124c:	4603      	mov	r3, r0
 800124e:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <USB_RX_Callback+0x8c>)
 8001250:	6053      	str	r3, [r2, #4]

	token = strtok(NULL, " ");
 8001252:	490a      	ldr	r1, [pc, #40]	@ (800127c <USB_RX_Callback+0x88>)
 8001254:	2000      	movs	r0, #0
 8001256:	f00a f99b 	bl	800b590 <strtok>
 800125a:	60f8      	str	r0, [r7, #12]
	target_setpoints[2] = atoff(token);
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f008 fd91 	bl	8009d84 <atoff>
 8001262:	4603      	mov	r3, r0
 8001264:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <USB_RX_Callback+0x8c>)
 8001266:	6093      	str	r3, [r2, #8]

}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000448 	.word	0x20000448
 8001274:	200004c8 	.word	0x200004c8
 8001278:	200004ca 	.word	0x200004ca
 800127c:	0800e158 	.word	0x0800e158
 8001280:	200004cc 	.word	0x200004cc

08001284 <CreateTrapProfileDefault>:
	int steps_total;
	int steps_accel;
	int steps_decel;
} TrapProfile ;

TrapProfile CreateTrapProfileDefault(){
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	return (TrapProfile){MOTOR_MAX_ACCEL, 0, 0, 0, 0, 0};
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <CreateTrapProfileDefault+0x3c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
}
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	3724      	adds	r7, #36	@ 0x24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <CreateMotorDefault>:
	int position_target;
	TrapProfile* profile;
} StepperMotor;

StepperMotor CreateMotorDefault(GPIO_TypeDef* step_port, GPIO_TypeDef* dir_port,
		uint16_t step_pin, uint16_t dir_pin, TrapProfile* profile){
 80012c4:	b480      	push	{r7}
 80012c6:	b08f      	sub	sp, #60	@ 0x3c
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	807b      	strh	r3, [r7, #2]
	return (StepperMotor){step_port, dir_port, step_pin, dir_pin, 0, 0, 0, 0, 0, profile};
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	887a      	ldrh	r2, [r7, #2]
 80012e2:	811a      	strh	r2, [r3, #8]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80012ea:	815a      	strh	r2, [r3, #10]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001312:	621a      	str	r2, [r3, #32]
}
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	373c      	adds	r7, #60	@ 0x3c
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
	...

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001324:	b0ab      	sub	sp, #172	@ 0xac
 8001326:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 fffe 	bl	8002328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f9c4 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f000 fa68 	bl	8001804 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001334:	f000 fa1a 	bl	800176c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001338:	f008 f834 	bl	80093a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800133c:	48a2      	ldr	r0, [pc, #648]	@ (80015c8 <main+0x2a8>)
 800133e:	f003 fd8d 	bl	8004e5c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8001342:	48a1      	ldr	r0, [pc, #644]	@ (80015c8 <main+0x2a8>)
 8001344:	f003 fd40 	bl	8004dc8 <HAL_TIM_Base_Start>

  profile1 = CreateTrapProfileDefault();
 8001348:	4ca0      	ldr	r4, [pc, #640]	@ (80015cc <main+0x2ac>)
 800134a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff98 	bl	8001284 <CreateTrapProfileDefault>
 8001354:	4625      	mov	r5, r4
 8001356:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800135a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800135e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001362:	e885 0003 	stmia.w	r5, {r0, r1}
  profile2 = CreateTrapProfileDefault();
 8001366:	4c9a      	ldr	r4, [pc, #616]	@ (80015d0 <main+0x2b0>)
 8001368:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff89 	bl	8001284 <CreateTrapProfileDefault>
 8001372:	4625      	mov	r5, r4
 8001374:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001380:	e885 0003 	stmia.w	r5, {r0, r1}
  profile3 = CreateTrapProfileDefault();
 8001384:	4c93      	ldr	r4, [pc, #588]	@ (80015d4 <main+0x2b4>)
 8001386:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff7a 	bl	8001284 <CreateTrapProfileDefault>
 8001390:	4625      	mov	r5, r4
 8001392:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800139e:	e885 0003 	stmia.w	r5, {r0, r1}

//  motor1 = CreateMotorDefault(GPIOA, GPIOA, GPIO_PIN_9, GPIO_PIN_10, &profile1);
//  motor2 = CreateMotorDefault(GPIOA, GPIOB, GPIO_PIN_15, GPIO_PIN_3, &profile2);
//  motor3 = CreateMotorDefault(GPIOB, GPIOB, GPIO_PIN_4, GPIO_PIN_5, &profile3);

  motor1 = CreateMotorDefault(GPIOA, GPIOA, 9, 10, &profile1);
 80013a2:	4c8d      	ldr	r4, [pc, #564]	@ (80015d8 <main+0x2b8>)
 80013a4:	f107 0018 	add.w	r0, r7, #24
 80013a8:	4b88      	ldr	r3, [pc, #544]	@ (80015cc <main+0x2ac>)
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	230a      	movs	r3, #10
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2309      	movs	r3, #9
 80013b2:	4a8a      	ldr	r2, [pc, #552]	@ (80015dc <main+0x2bc>)
 80013b4:	4989      	ldr	r1, [pc, #548]	@ (80015dc <main+0x2bc>)
 80013b6:	f7ff ff85 	bl	80012c4 <CreateMotorDefault>
 80013ba:	4625      	mov	r5, r4
 80013bc:	f107 0418 	add.w	r4, r7, #24
 80013c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	602b      	str	r3, [r5, #0]
  motor2 = CreateMotorDefault(GPIOA, GPIOB, 15, 3, &profile2);
 80013cc:	4c84      	ldr	r4, [pc, #528]	@ (80015e0 <main+0x2c0>)
 80013ce:	f107 0018 	add.w	r0, r7, #24
 80013d2:	4b7f      	ldr	r3, [pc, #508]	@ (80015d0 <main+0x2b0>)
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2303      	movs	r3, #3
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	230f      	movs	r3, #15
 80013dc:	4a81      	ldr	r2, [pc, #516]	@ (80015e4 <main+0x2c4>)
 80013de:	497f      	ldr	r1, [pc, #508]	@ (80015dc <main+0x2bc>)
 80013e0:	f7ff ff70 	bl	80012c4 <CreateMotorDefault>
 80013e4:	4625      	mov	r5, r4
 80013e6:	f107 0418 	add.w	r4, r7, #24
 80013ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	602b      	str	r3, [r5, #0]
  motor3 = CreateMotorDefault(GPIOB, GPIOB, 4, 5, &profile3);
 80013f6:	4c7c      	ldr	r4, [pc, #496]	@ (80015e8 <main+0x2c8>)
 80013f8:	f107 0018 	add.w	r0, r7, #24
 80013fc:	4b75      	ldr	r3, [pc, #468]	@ (80015d4 <main+0x2b4>)
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2305      	movs	r3, #5
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2304      	movs	r3, #4
 8001406:	4a77      	ldr	r2, [pc, #476]	@ (80015e4 <main+0x2c4>)
 8001408:	4976      	ldr	r1, [pc, #472]	@ (80015e4 <main+0x2c4>)
 800140a:	f7ff ff5b 	bl	80012c4 <CreateMotorDefault>
 800140e:	4625      	mov	r5, r4
 8001410:	f107 0418 	add.w	r4, r7, #24
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	602b      	str	r3, [r5, #0]

  uint32_t currTime = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t prevTimeStepUpdate = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	65bb      	str	r3, [r7, #88]	@ 0x58
  uint32_t prevTimeProfileFollow = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t prevTimeTransmit = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	663b      	str	r3, [r7, #96]	@ 0x60

  motor1.position_current = Degrees_to_Steps(-34);
 8001430:	486e      	ldr	r0, [pc, #440]	@ (80015ec <main+0x2cc>)
 8001432:	f000 fda7 	bl	8001f84 <Degrees_to_Steps>
 8001436:	4603      	mov	r3, r0
 8001438:	4a67      	ldr	r2, [pc, #412]	@ (80015d8 <main+0x2b8>)
 800143a:	6193      	str	r3, [r2, #24]
  motor2.position_current = Degrees_to_Steps(-34);
 800143c:	486b      	ldr	r0, [pc, #428]	@ (80015ec <main+0x2cc>)
 800143e:	f000 fda1 	bl	8001f84 <Degrees_to_Steps>
 8001442:	4603      	mov	r3, r0
 8001444:	4a66      	ldr	r2, [pc, #408]	@ (80015e0 <main+0x2c0>)
 8001446:	6193      	str	r3, [r2, #24]
  motor3.position_current = Degrees_to_Steps(-34);
 8001448:	4868      	ldr	r0, [pc, #416]	@ (80015ec <main+0x2cc>)
 800144a:	f000 fd9b 	bl	8001f84 <Degrees_to_Steps>
 800144e:	4603      	mov	r3, r0
 8001450:	4a65      	ldr	r2, [pc, #404]	@ (80015e8 <main+0x2c8>)
 8001452:	6193      	str	r3, [r2, #24]

  motor1.position_target = Degrees_to_Steps(-34);
 8001454:	4865      	ldr	r0, [pc, #404]	@ (80015ec <main+0x2cc>)
 8001456:	f000 fd95 	bl	8001f84 <Degrees_to_Steps>
 800145a:	4603      	mov	r3, r0
 800145c:	4a5e      	ldr	r2, [pc, #376]	@ (80015d8 <main+0x2b8>)
 800145e:	61d3      	str	r3, [r2, #28]
  motor2.position_target = Degrees_to_Steps(-34);
 8001460:	4862      	ldr	r0, [pc, #392]	@ (80015ec <main+0x2cc>)
 8001462:	f000 fd8f 	bl	8001f84 <Degrees_to_Steps>
 8001466:	4603      	mov	r3, r0
 8001468:	4a5d      	ldr	r2, [pc, #372]	@ (80015e0 <main+0x2c0>)
 800146a:	61d3      	str	r3, [r2, #28]
  motor3.position_target = Degrees_to_Steps(-34);
 800146c:	485f      	ldr	r0, [pc, #380]	@ (80015ec <main+0x2cc>)
 800146e:	f000 fd89 	bl	8001f84 <Degrees_to_Steps>
 8001472:	4603      	mov	r3, r0
 8001474:	4a5c      	ldr	r2, [pc, #368]	@ (80015e8 <main+0x2c8>)
 8001476:	61d3      	str	r3, [r2, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	currTime = HAL_GetTick();
 8001478:	f000 ffae 	bl	80023d8 <HAL_GetTick>
 800147c:	65f8      	str	r0, [r7, #92]	@ 0x5c
//
//	else if (currTime - prevTimeStepUpdate > 1000){
//		Update_Positions(180,180,180);
//	}

	if(currTime - prevTimeProfileFollow > UPDATE_PROFILE_PERIOD){
 800147e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d90a      	bls.n	800149e <main+0x17e>
		
		Update_Stepper_Speed(&motor1);
 8001488:	4853      	ldr	r0, [pc, #332]	@ (80015d8 <main+0x2b8>)
 800148a:	f000 fadf 	bl	8001a4c <Update_Stepper_Speed>
		Update_Stepper_Speed(&motor2);
 800148e:	4854      	ldr	r0, [pc, #336]	@ (80015e0 <main+0x2c0>)
 8001490:	f000 fadc 	bl	8001a4c <Update_Stepper_Speed>
		Update_Stepper_Speed(&motor3);
 8001494:	4854      	ldr	r0, [pc, #336]	@ (80015e8 <main+0x2c8>)
 8001496:	f000 fad9 	bl	8001a4c <Update_Stepper_Speed>
		
		prevTimeProfileFollow = currTime;
 800149a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800149c:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	if(currTime - prevTimeTransmit > 17){
 800149e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80014a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b11      	cmp	r3, #17
 80014a6:	f240 80b5 	bls.w	8001614 <main+0x2f4>
		if(motor1.position_current != motor1.position_target){
 80014aa:	4b4b      	ldr	r3, [pc, #300]	@ (80015d8 <main+0x2b8>)
 80014ac:	699a      	ldr	r2, [r3, #24]
 80014ae:	4b4a      	ldr	r3, [pc, #296]	@ (80015d8 <main+0x2b8>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	f000 80ac 	beq.w	8001610 <main+0x2f0>
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
				"vi %f a %f ad %f vc %f pc %f pt %f %d %d %d %d \r\n",
				motor1.velocity_current,
 80014b8:	4b47      	ldr	r3, [pc, #284]	@ (80015d8 <main+0x2b8>)
 80014ba:	691b      	ldr	r3, [r3, #16]
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffb3 	bl	8000428 <__aeabi_f2d>
 80014c2:	4680      	mov	r8, r0
 80014c4:	4689      	mov	r9, r1
				motor1.profile->accel,
 80014c6:	4b44      	ldr	r3, [pc, #272]	@ (80015d8 <main+0x2b8>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	681b      	ldr	r3, [r3, #0]
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ffab 	bl	8000428 <__aeabi_f2d>
 80014d2:	4682      	mov	sl, r0
 80014d4:	468b      	mov	fp, r1
				(motor1.velocity_current*motor1.velocity_current)/
 80014d6:	4b40      	ldr	r3, [pc, #256]	@ (80015d8 <main+0x2b8>)
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	4a3f      	ldr	r2, [pc, #252]	@ (80015d8 <main+0x2b8>)
 80014dc:	6912      	ldr	r2, [r2, #16]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fc4f 	bl	8000d84 <__aeabi_fmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461c      	mov	r4, r3
				(2.0f*((float)(motor1.profile->steps_total - motor1.profile->steps_curr)))/
 80014ea:	4b3b      	ldr	r3, [pc, #236]	@ (80015d8 <main+0x2b8>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <main+0x2b8>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fbef 	bl	8000cdc <__aeabi_i2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4619      	mov	r1, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fb36 	bl	8000b74 <__addsf3>
 8001508:	4603      	mov	r3, r0
				(motor1.velocity_current*motor1.velocity_current)/
 800150a:	4619      	mov	r1, r3
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff fced 	bl	8000eec <__aeabi_fdiv>
 8001512:	4603      	mov	r3, r0
 8001514:	461c      	mov	r4, r3
				(1000.f*TICK_PERIOD),
 8001516:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <main+0x2d0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4936      	ldr	r1, [pc, #216]	@ (80015f4 <main+0x2d4>)
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc31 	bl	8000d84 <__aeabi_fmul>
 8001522:	4603      	mov	r3, r0
				(2.0f*((float)(motor1.profile->steps_total - motor1.profile->steps_curr)))/
 8001524:	4619      	mov	r1, r3
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff fce0 	bl	8000eec <__aeabi_fdiv>
 800152c:	4603      	mov	r3, r0
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe ff7a 	bl	8000428 <__aeabi_f2d>
 8001534:	4604      	mov	r4, r0
 8001536:	460d      	mov	r5, r1
				motor1.profile->velocity_cruise,
 8001538:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <main+0x2b8>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	685b      	ldr	r3, [r3, #4]
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ff72 	bl	8000428 <__aeabi_f2d>
 8001544:	e9c7 0104 	strd	r0, r1, [r7, #16]
				Steps_to_Degrees(motor1.position_current),
 8001548:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <main+0x2b8>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fd3d 	bl	8001fcc <Steps_to_Degrees>
 8001552:	4603      	mov	r3, r0
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ff67 	bl	8000428 <__aeabi_f2d>
 800155a:	e9c7 0102 	strd	r0, r1, [r7, #8]
				Steps_to_Degrees(motor1.position_target),
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <main+0x2b8>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fd32 	bl	8001fcc <Steps_to_Degrees>
 8001568:	4603      	mov	r3, r0
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ff5c 	bl	8000428 <__aeabi_f2d>
				motor1.profile->steps_accel,
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <main+0x2b8>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	607b      	str	r3, [r7, #4]
				motor1.profile->steps_decel,
 8001578:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <main+0x2b8>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
 800157c:	695e      	ldr	r6, [r3, #20]
				motor1.profile->steps_curr,
 800157e:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <main+0x2b8>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
 8001582:	689a      	ldr	r2, [r3, #8]
				motor1.profile->steps_total);
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <main+0x2b8>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN,
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800158c:	920e      	str	r2, [sp, #56]	@ 0x38
 800158e:	960d      	str	r6, [sp, #52]	@ 0x34
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	930c      	str	r3, [sp, #48]	@ 0x30
 8001594:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8001598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800159c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80015a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80015a8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80015ac:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80015b0:	e9cd 8900 	strd	r8, r9, [sp]
 80015b4:	4a10      	ldr	r2, [pc, #64]	@ (80015f8 <main+0x2d8>)
 80015b6:	2180      	movs	r1, #128	@ 0x80
 80015b8:	4810      	ldr	r0, [pc, #64]	@ (80015fc <main+0x2dc>)
 80015ba:	f009 ff55 	bl	800b468 <sniprintf>
 80015be:	4603      	mov	r3, r0
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <main+0x2e0>)
 80015c4:	801a      	strh	r2, [r3, #0]
 80015c6:	e01d      	b.n	8001604 <main+0x2e4>
 80015c8:	2000037c 	.word	0x2000037c
 80015cc:	200004d8 	.word	0x200004d8
 80015d0:	200004f0 	.word	0x200004f0
 80015d4:	20000508 	.word	0x20000508
 80015d8:	20000520 	.word	0x20000520
 80015dc:	40010800 	.word	0x40010800
 80015e0:	20000544 	.word	0x20000544
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	20000568 	.word	0x20000568
 80015ec:	c2080000 	.word	0xc2080000
 80015f0:	20000000 	.word	0x20000000
 80015f4:	447a0000 	.word	0x447a0000
 80015f8:	0800e15c 	.word	0x0800e15c
 80015fc:	200003c4 	.word	0x200003c4
 8001600:	20000444 	.word	0x20000444
		CDC_Transmit_FS(usb_tx_buffer, usb_tx_buf_len);
 8001604:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <main+0x380>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	4826      	ldr	r0, [pc, #152]	@ (80016a4 <main+0x384>)
 800160c:	f007 ffdc 	bl	80095c8 <CDC_Transmit_FS>

		}
		prevTimeTransmit = currTime;
 8001610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001612:	663b      	str	r3, [r7, #96]	@ 0x60
	}

	if(rx_flag && usb_rx_buf_len){
 8001614:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <main+0x388>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f43f af2d 	beq.w	8001478 <main+0x158>
 800161e:	4b23      	ldr	r3, [pc, #140]	@ (80016ac <main+0x38c>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f43f af28 	beq.w	8001478 <main+0x158>

		usb_tx_buf_len = snprintf((char*) usb_tx_buffer, USB_BUF_LEN, "%0.2f %0.2f %0.2f\r\n", target_setpoints[0] ,target_setpoints[1], target_setpoints[2]);
 8001628:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <main+0x390>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fefb 	bl	8000428 <__aeabi_f2d>
 8001632:	4604      	mov	r4, r0
 8001634:	460d      	mov	r5, r1
 8001636:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <main+0x390>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fef4 	bl	8000428 <__aeabi_f2d>
 8001640:	4680      	mov	r8, r0
 8001642:	4689      	mov	r9, r1
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <main+0x390>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe feed 	bl	8000428 <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001656:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800165a:	e9cd 4500 	strd	r4, r5, [sp]
 800165e:	4a15      	ldr	r2, [pc, #84]	@ (80016b4 <main+0x394>)
 8001660:	2180      	movs	r1, #128	@ 0x80
 8001662:	4810      	ldr	r0, [pc, #64]	@ (80016a4 <main+0x384>)
 8001664:	f009 ff00 	bl	800b468 <sniprintf>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <main+0x380>)
 800166e:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(usb_tx_buffer, usb_tx_buf_len);
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <main+0x380>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	480b      	ldr	r0, [pc, #44]	@ (80016a4 <main+0x384>)
 8001678:	f007 ffa6 	bl	80095c8 <CDC_Transmit_FS>

		Update_Positions(target_setpoints[0], target_setpoints[1], target_setpoints[2]);
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <main+0x390>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <main+0x390>)
 8001682:	6851      	ldr	r1, [r2, #4]
 8001684:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <main+0x390>)
 8001686:	6892      	ldr	r2, [r2, #8]
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fabf 	bl	8001c0c <Update_Positions>

		rx_flag = 0;
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <main+0x388>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
		usb_rx_buf_len = 0;
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <main+0x38c>)
 8001696:	2200      	movs	r2, #0
 8001698:	801a      	strh	r2, [r3, #0]

		prevTimeTransmit = currTime;
 800169a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800169c:	663b      	str	r3, [r7, #96]	@ 0x60
	currTime = HAL_GetTick();
 800169e:	e6eb      	b.n	8001478 <main+0x158>
 80016a0:	20000444 	.word	0x20000444
 80016a4:	200003c4 	.word	0x200003c4
 80016a8:	200004ca 	.word	0x200004ca
 80016ac:	200004c8 	.word	0x200004c8
 80016b0:	200004cc 	.word	0x200004cc
 80016b4:	0800e190 	.word	0x0800e190

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b094      	sub	sp, #80	@ 0x50
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c2:	2228      	movs	r2, #40	@ 0x28
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f009 ff47 	bl	800b55a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f6:	2301      	movs	r3, #1
 80016f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	2302      	movs	r3, #2
 80016fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001704:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001708:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fe76 	bl	8004400 <HAL_RCC_OscConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800171a:	f000 fc7b 	bl	8002014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171e:	230f      	movs	r3, #15
 8001720:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800172e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2102      	movs	r1, #2
 800173a:	4618      	mov	r0, r3
 800173c:	f003 f8e2 	bl	8004904 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001746:	f000 fc65 	bl	8002014 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800174a:	2310      	movs	r3, #16
 800174c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fa31 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001760:	f000 fc58 	bl	8002014 <Error_Handler>
  }
}
 8001764:	bf00      	nop
 8001766:	3750      	adds	r7, #80	@ 0x50
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	463b      	mov	r3, r7
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001788:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <MX_TIM2_Init+0x94>)
 800178a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800178e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <MX_TIM2_Init+0x94>)
 8001792:	2202      	movs	r2, #2
 8001794:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <MX_TIM2_Init+0x94>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 374;
 800179c:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <MX_TIM2_Init+0x94>)
 800179e:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 80017a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <MX_TIM2_Init+0x94>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <MX_TIM2_Init+0x94>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017b0:	4813      	ldr	r0, [pc, #76]	@ (8001800 <MX_TIM2_Init+0x94>)
 80017b2:	f003 fab9 	bl	8004d28 <HAL_TIM_Base_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017bc:	f000 fc2a 	bl	8002014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <MX_TIM2_Init+0x94>)
 80017ce:	f003 fc87 	bl	80050e0 <HAL_TIM_ConfigClockSource>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017d8:	f000 fc1c 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_TIM2_Init+0x94>)
 80017ea:	f003 fe69 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017f4:	f000 fc0e 	bl	8002014 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000037c 	.word	0x2000037c

08001804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <MX_GPIO_Init+0xb4>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a26      	ldr	r2, [pc, #152]	@ (80018b8 <MX_GPIO_Init+0xb4>)
 800181e:	f043 0320 	orr.w	r3, r3, #32
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <MX_GPIO_Init+0xb4>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <MX_GPIO_Init+0xb4>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a20      	ldr	r2, [pc, #128]	@ (80018b8 <MX_GPIO_Init+0xb4>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <MX_GPIO_Init+0xb4>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <MX_GPIO_Init+0xb4>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a1a      	ldr	r2, [pc, #104]	@ (80018b8 <MX_GPIO_Init+0xb4>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <MX_GPIO_Init+0xb4>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8001866:	4815      	ldr	r0, [pc, #84]	@ (80018bc <MX_GPIO_Init+0xb8>)
 8001868:	f001 f852 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2138      	movs	r1, #56	@ 0x38
 8001870:	4813      	ldr	r0, [pc, #76]	@ (80018c0 <MX_GPIO_Init+0xbc>)
 8001872:	f001 f84d 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8001876:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 800187a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2302      	movs	r3, #2
 8001886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4619      	mov	r1, r3
 800188e:	480b      	ldr	r0, [pc, #44]	@ (80018bc <MX_GPIO_Init+0xb8>)
 8001890:	f000 feba 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001894:	2338      	movs	r3, #56	@ 0x38
 8001896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <MX_GPIO_Init+0xbc>)
 80018ac:	f000 feac 	bl	8002608 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010800 	.word	0x40010800
 80018c0:	40010c00 	.word	0x40010c00

080018c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

	static uint8_t step_flag_1;
	static uint8_t step_flag_2;
	static uint8_t step_flag_3;

	Step_Motor(&motor1, &step_flag_1);
 80018cc:	4907      	ldr	r1, [pc, #28]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018ce:	4808      	ldr	r0, [pc, #32]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80018d0:	f000 f818 	bl	8001904 <Step_Motor>
	Step_Motor(&motor2, &step_flag_2);
 80018d4:	4907      	ldr	r1, [pc, #28]	@ (80018f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018d6:	4808      	ldr	r0, [pc, #32]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018d8:	f000 f814 	bl	8001904 <Step_Motor>
	Step_Motor(&motor3, &step_flag_3);
 80018dc:	4907      	ldr	r1, [pc, #28]	@ (80018fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80018de:	4808      	ldr	r0, [pc, #32]	@ (8001900 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80018e0:	f000 f810 	bl	8001904 <Step_Motor>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000058c 	.word	0x2000058c
 80018f0:	20000520 	.word	0x20000520
 80018f4:	2000058d 	.word	0x2000058d
 80018f8:	20000544 	.word	0x20000544
 80018fc:	2000058e 	.word	0x2000058e
 8001900:	20000568 	.word	0x20000568

08001904 <Step_Motor>:

void Step_Motor(StepperMotor* motor, uint8_t* flag){
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]

	if(motor->position_current != motor->position_target){
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699a      	ldr	r2, [r3, #24]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	429a      	cmp	r2, r3
 8001918:	f000 8086 	beq.w	8001a28 <Step_Motor+0x124>

		motor->step_accum += fabsf(motor->velocity_current);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001928:	4619      	mov	r1, r3
 800192a:	4610      	mov	r0, r2
 800192c:	f7ff f922 	bl	8000b74 <__addsf3>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60da      	str	r2, [r3, #12]

		if(motor->velocity_current > 0){
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fbdb 	bl	80010fc <__aeabi_fcmpgt>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00c      	beq.n	8001966 <Step_Motor+0x62>
			motor->dir_port->BSRR = (1 << motor->dir_pin);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	895b      	ldrh	r3, [r3, #10]
 8001950:	461a      	mov	r2, r3
 8001952:	2301      	movs	r3, #1
 8001954:	fa03 f202 	lsl.w	r2, r3, r2
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	611a      	str	r2, [r3, #16]
			motor->direction = 1;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	e00a      	b.n	800197c <Step_Motor+0x78>
		}
		else{
			motor->dir_port->BSRR = (1 << (motor->dir_pin+16));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	895b      	ldrh	r3, [r3, #10]
 800196a:	3310      	adds	r3, #16
 800196c:	2201      	movs	r2, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	611a      	str	r2, [r3, #16]
			motor->direction = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
		}

		if(motor->step_accum < 1.0f){
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fb9b 	bl	80010c0 <__aeabi_fcmplt>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00f      	beq.n	80019b0 <Step_Motor+0xac>
			if(*flag){
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d047      	beq.n	8001a28 <Step_Motor+0x124>
				motor->step_port->BSRR = (1 << (motor->step_pin+16));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	891b      	ldrh	r3, [r3, #8]
 800199c:	3310      	adds	r3, #16
 800199e:	2201      	movs	r2, #1
 80019a0:	409a      	lsls	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	611a      	str	r2, [r3, #16]
				*flag = 0;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
				 *flag = 0;
			}
		}
	}

}
 80019ae:	e03b      	b.n	8001a28 <Step_Motor+0x124>
			motor->step_accum -= 1.0f;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f8d9 	bl	8000b70 <__aeabi_fsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60da      	str	r2, [r3, #12]
			*flag = 1;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
			motor->step_port->BSRR = (1 << (motor->step_pin));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	891b      	ldrh	r3, [r3, #8]
 80019d0:	461a      	mov	r2, r3
 80019d2:	2301      	movs	r3, #1
 80019d4:	fa03 f202 	lsl.w	r2, r3, r2
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	611a      	str	r2, [r3, #16]
			if(motor->direction){
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <Step_Motor+0xee>
				motor->position_current++;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
 80019f0:	e004      	b.n	80019fc <Step_Motor+0xf8>
				motor->position_current--;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	1e5a      	subs	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
			motor->profile->steps_curr++;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	3201      	adds	r2, #1
 8001a04:	609a      	str	r2, [r3, #8]
			if(motor->position_current == motor->position_target){
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699a      	ldr	r2, [r3, #24]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d10a      	bne.n	8001a28 <Step_Motor+0x124>
				 motor->step_port->BSRR = (1 << (motor->step_pin+16));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	891b      	ldrh	r3, [r3, #8]
 8001a16:	3310      	adds	r3, #16
 8001a18:	2201      	movs	r2, #1
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	611a      	str	r2, [r3, #16]
				 *flag = 0;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <Update_Stepper>:

void Update_Stepper(StepperMotor* motor, int new_target){
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
	motor->position_target = new_target;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	61da      	str	r2, [r3, #28]

}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
	...

08001a4c <Update_Stepper_Speed>:
	int new_step_target = Degrees_to_Steps(new_target);
	Update_Stepper(motor, new_step_target);

}

void Update_Stepper_Speed(StepperMotor* motor){
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

	if (motor->position_current == motor->position_target) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699a      	ldr	r2, [r3, #24]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d104      	bne.n	8001a6a <Update_Stepper_Speed+0x1e>
		motor->velocity_current = 0;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
		return;
 8001a68:	e0c6      	b.n	8001bf8 <Update_Stepper_Speed+0x1ac>
	}

	float accelDir = ((motor->profile->velocity_cruise - motor->velocity_current) > 0) ? 1. : -1.;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f7ff f87a 	bl	8000b70 <__aeabi_fsub>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fb3a 	bl	80010fc <__aeabi_fcmpgt>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <Update_Stepper_Speed+0x48>
 8001a8e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a92:	e000      	b.n	8001a96 <Update_Stepper_Speed+0x4a>
 8001a94:	4b5a      	ldr	r3, [pc, #360]	@ (8001c00 <Update_Stepper_Speed+0x1b4>)
 8001a96:	61bb      	str	r3, [r7, #24]

	if(motor->profile->steps_curr > motor->profile->steps_total){
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dd08      	ble.n	8001aba <Update_Stepper_Speed+0x6e>
		motor->velocity_current = 0;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
		motor->position_target = motor->position_current;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699a      	ldr	r2, [r3, #24]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	61da      	str	r2, [r3, #28]
 8001ab8:	e09e      	b.n	8001bf8 <Update_Stepper_Speed+0x1ac>
	}

	// if motor is accelerating
	else if(motor->profile->steps_curr <= motor->profile->steps_accel){
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dc0d      	bgt.n	8001ae6 <Update_Stepper_Speed+0x9a>
		motor->velocity_current += motor->profile->accel * (float) UPDATE_PROFILE_PERIOD;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f7ff f84c 	bl	8000b74 <__addsf3>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	e088      	b.n	8001bf8 <Update_Stepper_Speed+0x1ac>
	}

	// if motor is decelerating
	else if(motor->profile->steps_curr >= motor->profile->steps_total - motor->profile->steps_decel){
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	68d9      	ldr	r1, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	1acb      	subs	r3, r1, r3
 8001afa:	429a      	cmp	r2, r3
 8001afc:	db77      	blt.n	8001bee <Update_Stepper_Speed+0x1a2>
		float dir = (motor->velocity_current > 0) ? 1.f : -1.f;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff faf8 	bl	80010fc <__aeabi_fcmpgt>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <Update_Stepper_Speed+0xcc>
 8001b12:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001b16:	e000      	b.n	8001b1a <Update_Stepper_Speed+0xce>
 8001b18:	4b39      	ldr	r3, [pc, #228]	@ (8001c00 <Update_Stepper_Speed+0x1b4>)
 8001b1a:	617b      	str	r3, [r7, #20]
		float steps_extra = (fabsf(motor->velocity_current)*(float)UPDATE_PROFILE_PERIOD)/(1000.f*TICK_PERIOD);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8001b24:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <Update_Stepper_Speed+0x1b8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4937      	ldr	r1, [pc, #220]	@ (8001c08 <Update_Stepper_Speed+0x1bc>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f92a 	bl	8000d84 <__aeabi_fmul>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4619      	mov	r1, r3
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7ff f9d9 	bl	8000eec <__aeabi_fdiv>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	613b      	str	r3, [r7, #16]
		float steps_remaining = (float)(motor->profile->steps_total - motor->profile->steps_curr - (int)steps_extra) ;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	1ad4      	subs	r4, r2, r3
 8001b4c:	6938      	ldr	r0, [r7, #16]
 8001b4e:	f7ff faf5 	bl	800113c <__aeabi_f2iz>
 8001b52:	4603      	mov	r3, r0
 8001b54:	1ae3      	subs	r3, r4, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f8c0 	bl	8000cdc <__aeabi_i2f>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60fb      	str	r3, [r7, #12]
		float new_accel = (motor->velocity_current*motor->velocity_current)/(2.0f*steps_remaining);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f7ff f90a 	bl	8000d84 <__aeabi_fmul>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461c      	mov	r4, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4619      	mov	r1, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fffb 	bl	8000b74 <__addsf3>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4620      	mov	r0, r4
 8001b84:	f7ff f9b2 	bl	8000eec <__aeabi_fdiv>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60bb      	str	r3, [r7, #8]
		new_accel = new_accel/(1000.f*TICK_PERIOD); //convert to steps/tick/ms
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <Update_Stepper_Speed+0x1b8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	491d      	ldr	r1, [pc, #116]	@ (8001c08 <Update_Stepper_Speed+0x1bc>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f8f6 	bl	8000d84 <__aeabi_fmul>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	68b8      	ldr	r0, [r7, #8]
 8001b9e:	f7ff f9a5 	bl	8000eec <__aeabi_fdiv>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60bb      	str	r3, [r7, #8]

		float new_velocity = motor->velocity_current - dir * new_accel * (float) UPDATE_PROFILE_PERIOD;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691c      	ldr	r4, [r3, #16]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	6978      	ldr	r0, [r7, #20]
 8001bae:	f7ff f8e9 	bl	8000d84 <__aeabi_fmul>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f7fe ffda 	bl	8000b70 <__aeabi_fsub>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	61fb      	str	r3, [r7, #28]
		if((new_velocity * motor->profile->velocity_cruise) < 0.0f){
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	69f9      	ldr	r1, [r7, #28]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f8db 	bl	8000d84 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fa73 	bl	80010c0 <__aeabi_fcmplt>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <Update_Stepper_Speed+0x19a>
			new_velocity = 0.0f;
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
		}
		motor->velocity_current = new_velocity;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	e004      	b.n	8001bf8 <Update_Stepper_Speed+0x1ac>
	}

	// motor is cruising
	else{
		motor->velocity_current = motor->profile->velocity_cruise;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	611a      	str	r2, [r3, #16]
	}
}
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	bf800000 	.word	0xbf800000
 8001c04:	20000000 	.word	0x20000000
 8001c08:	447a0000 	.word	0x447a0000

08001c0c <Update_Positions>:



void Update_Positions(float ang1, float ang2, float ang3){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]

	float ang1Lim = ang1;//fmaxf(fminf(ang1, MOTOR_MAX_ANGLE), MOTOR_MIN_ANGLE);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
	float ang2Lim = ang2;//fmaxf(fminf(ang2, MOTOR_MAX_ANGLE), MOTOR_MIN_ANGLE);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	623b      	str	r3, [r7, #32]
	float ang3Lim = ang3;//fmaxf(fminf(ang3, MOTOR_MAX_ANGLE), MOTOR_MIN_ANGLE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	61fb      	str	r3, [r7, #28]

	int steps1 = Degrees_to_Steps(ang1Lim);
 8001c24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c26:	f000 f9ad 	bl	8001f84 <Degrees_to_Steps>
 8001c2a:	61b8      	str	r0, [r7, #24]
	int steps2 = Degrees_to_Steps(ang2Lim);
 8001c2c:	6a38      	ldr	r0, [r7, #32]
 8001c2e:	f000 f9a9 	bl	8001f84 <Degrees_to_Steps>
 8001c32:	6178      	str	r0, [r7, #20]
	int steps3 = Degrees_to_Steps(ang3Lim);
 8001c34:	69f8      	ldr	r0, [r7, #28]
 8001c36:	f000 f9a5 	bl	8001f84 <Degrees_to_Steps>
 8001c3a:	6138      	str	r0, [r7, #16]

	Update_Profiles(steps1, steps2, steps3);
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	6979      	ldr	r1, [r7, #20]
 8001c40:	69b8      	ldr	r0, [r7, #24]
 8001c42:	f000 f819 	bl	8001c78 <Update_Profiles>

	Update_Stepper(&motor1, steps1);
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	4807      	ldr	r0, [pc, #28]	@ (8001c68 <Update_Positions+0x5c>)
 8001c4a:	f7ff fef1 	bl	8001a30 <Update_Stepper>
	Update_Stepper(&motor2, steps2);
 8001c4e:	6979      	ldr	r1, [r7, #20]
 8001c50:	4806      	ldr	r0, [pc, #24]	@ (8001c6c <Update_Positions+0x60>)
 8001c52:	f7ff feed 	bl	8001a30 <Update_Stepper>
	Update_Stepper(&motor3, steps3);
 8001c56:	6939      	ldr	r1, [r7, #16]
 8001c58:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <Update_Positions+0x64>)
 8001c5a:	f7ff fee9 	bl	8001a30 <Update_Stepper>

}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	@ 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000520 	.word	0x20000520
 8001c6c:	20000544 	.word	0x20000544
 8001c70:	20000568 	.word	0x20000568
 8001c74:	00000000 	.word	0x00000000

08001c78 <Update_Profiles>:

void Update_Profiles(int steps1, int steps2, int steps3){
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b08b      	sub	sp, #44	@ 0x2c
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]

	float err1 = (float) (steps1 - motor1.position_current);
 8001c84:	4b62      	ldr	r3, [pc, #392]	@ (8001e10 <Update_Profiles+0x198>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f825 	bl	8000cdc <__aeabi_i2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
	float err2 = (float) (steps2 - motor2.position_current);
 8001c96:	4b5f      	ldr	r3, [pc, #380]	@ (8001e14 <Update_Profiles+0x19c>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f81c 	bl	8000cdc <__aeabi_i2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	623b      	str	r3, [r7, #32]
	float err3 = (float) (steps3 - motor3.position_current);
 8001ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e18 <Update_Profiles+0x1a0>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f813 	bl	8000cdc <__aeabi_i2f>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	61fb      	str	r3, [r7, #28]

	float maxErr = fmaxf(fmaxf(fabsf(err1), fabsf(err2)), fabsf(err3));
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f00c f9f3 	bl	800e0b4 <fmaxf>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4610      	mov	r0, r2
 8001cda:	f00c f9eb 	bl	800e0b4 <fmaxf>
 8001cde:	61b8      	str	r0, [r7, #24]
	float maxSpeed = fminf((MOTOR_MAX_SPEED/(MOTOR_MAX_ANGLE - MOTOR_MIN_ANGLE)) * maxErr, MOTOR_MAX_SPEED) + 0.01;
 8001ce0:	4b4e      	ldr	r3, [pc, #312]	@ (8001e1c <Update_Profiles+0x1a4>)
 8001ce2:	681c      	ldr	r4, [r3, #0]
 8001ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8001e20 <Update_Profiles+0x1a8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a4e      	ldr	r2, [pc, #312]	@ (8001e24 <Update_Profiles+0x1ac>)
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe ff3e 	bl	8000b70 <__aeabi_fsub>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f7ff f8f7 	bl	8000eec <__aeabi_fdiv>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	69b9      	ldr	r1, [r7, #24]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f83e 	bl	8000d84 <__aeabi_fmul>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b43      	ldr	r3, [pc, #268]	@ (8001e1c <Update_Profiles+0x1a4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f00c f9e3 	bl	800e0de <fminf>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fb84 	bl	8000428 <__aeabi_f2d>
 8001d20:	a339      	add	r3, pc, #228	@ (adr r3, 8001e08 <Update_Profiles+0x190>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fa21 	bl	800016c <__adddf3>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe fec9 	bl	8000ac8 <__aeabi_d2f>
 8001d36:	4603      	mov	r3, r0
 8001d38:	617b      	str	r3, [r7, #20]

	if(maxErr > 0){
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	69b8      	ldr	r0, [r7, #24]
 8001d40:	f7ff f9dc 	bl	80010fc <__aeabi_fcmpgt>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d100      	bne.n	8001d4c <Update_Profiles+0xd4>
		Generate_Profile(&motor1, err1, maxSpeed*(err1/maxErr), MOTOR_MAX_ACCEL*(err1/maxErr));
		Generate_Profile(&motor2, err2, maxSpeed*(err2/maxErr), MOTOR_MAX_ACCEL*(err2/maxErr));
		Generate_Profile(&motor3, err3, maxSpeed*(err3/maxErr), MOTOR_MAX_ACCEL*(err3/maxErr));
	}

}
 8001d4a:	e056      	b.n	8001dfa <Update_Profiles+0x182>
		Generate_Profile(&motor1, err1, maxSpeed*(err1/maxErr), MOTOR_MAX_ACCEL*(err1/maxErr));
 8001d4c:	69b9      	ldr	r1, [r7, #24]
 8001d4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d50:	f7ff f8cc 	bl	8000eec <__aeabi_fdiv>
 8001d54:	4603      	mov	r3, r0
 8001d56:	6979      	ldr	r1, [r7, #20]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f813 	bl	8000d84 <__aeabi_fmul>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461c      	mov	r4, r3
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d66:	f7ff f8c1 	bl	8000eec <__aeabi_fdiv>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <Update_Profiles+0x1b0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f7ff f805 	bl	8000d84 <__aeabi_fmul>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4622      	mov	r2, r4
 8001d7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d80:	4823      	ldr	r0, [pc, #140]	@ (8001e10 <Update_Profiles+0x198>)
 8001d82:	f000 f853 	bl	8001e2c <Generate_Profile>
		Generate_Profile(&motor2, err2, maxSpeed*(err2/maxErr), MOTOR_MAX_ACCEL*(err2/maxErr));
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	6a38      	ldr	r0, [r7, #32]
 8001d8a:	f7ff f8af 	bl	8000eec <__aeabi_fdiv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6979      	ldr	r1, [r7, #20]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fff6 	bl	8000d84 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461c      	mov	r4, r3
 8001d9c:	69b9      	ldr	r1, [r7, #24]
 8001d9e:	6a38      	ldr	r0, [r7, #32]
 8001da0:	f7ff f8a4 	bl	8000eec <__aeabi_fdiv>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <Update_Profiles+0x1b0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f7fe ffe8 	bl	8000d84 <__aeabi_fmul>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4622      	mov	r2, r4
 8001db8:	6a39      	ldr	r1, [r7, #32]
 8001dba:	4816      	ldr	r0, [pc, #88]	@ (8001e14 <Update_Profiles+0x19c>)
 8001dbc:	f000 f836 	bl	8001e2c <Generate_Profile>
		Generate_Profile(&motor3, err3, maxSpeed*(err3/maxErr), MOTOR_MAX_ACCEL*(err3/maxErr));
 8001dc0:	69b9      	ldr	r1, [r7, #24]
 8001dc2:	69f8      	ldr	r0, [r7, #28]
 8001dc4:	f7ff f892 	bl	8000eec <__aeabi_fdiv>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	6979      	ldr	r1, [r7, #20]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ffd9 	bl	8000d84 <__aeabi_fmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461c      	mov	r4, r3
 8001dd6:	69b9      	ldr	r1, [r7, #24]
 8001dd8:	69f8      	ldr	r0, [r7, #28]
 8001dda:	f7ff f887 	bl	8000eec <__aeabi_fdiv>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <Update_Profiles+0x1b0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7fe ffcb 	bl	8000d84 <__aeabi_fmul>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4622      	mov	r2, r4
 8001df2:	69f9      	ldr	r1, [r7, #28]
 8001df4:	4808      	ldr	r0, [pc, #32]	@ (8001e18 <Update_Profiles+0x1a0>)
 8001df6:	f000 f819 	bl	8001e2c <Generate_Profile>
}
 8001dfa:	bf00      	nop
 8001dfc:	372c      	adds	r7, #44	@ 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	f3af 8000 	nop.w
 8001e08:	47ae147b 	.word	0x47ae147b
 8001e0c:	3f847ae1 	.word	0x3f847ae1
 8001e10:	20000520 	.word	0x20000520
 8001e14:	20000544 	.word	0x20000544
 8001e18:	20000568 	.word	0x20000568
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	20000010 	.word	0x20000010
 8001e28:	20000008 	.word	0x20000008

08001e2c <Generate_Profile>:

void Generate_Profile(StepperMotor* motor, float error, float cruise_velocity, float new_accel){
 8001e2c:	b5b0      	push	{r4, r5, r7, lr}
 8001e2e:	b08a      	sub	sp, #40	@ 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
	motor->profile->accel = new_accel/1000.f; // steps/tick/ms
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a1c      	ldr	r4, [r3, #32]
 8001e3e:	494f      	ldr	r1, [pc, #316]	@ (8001f7c <Generate_Profile+0x150>)
 8001e40:	6838      	ldr	r0, [r7, #0]
 8001e42:	f7ff f853 	bl	8000eec <__aeabi_fdiv>
 8001e46:	4603      	mov	r3, r0
 8001e48:	6023      	str	r3, [r4, #0]
	motor->profile->velocity_cruise = cruise_velocity;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	605a      	str	r2, [r3, #4]
	motor->profile->steps_curr = 0;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]

	float curr_velocity = motor->velocity_current;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	61fb      	str	r3, [r7, #28]
	float accel_ticks = fabsf(new_accel*TICK_PERIOD); //steps/tick^2
 8001e60:	4b47      	ldr	r3, [pc, #284]	@ (8001f80 <Generate_Profile+0x154>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6839      	ldr	r1, [r7, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe ff8c 	bl	8000d84 <__aeabi_fmul>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e72:	61bb      	str	r3, [r7, #24]

	int errorInt = abs((int) error);
 8001e74:	68b8      	ldr	r0, [r7, #8]
 8001e76:	f7ff f961 	bl	800113c <__aeabi_f2iz>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bfb8      	it	lt
 8001e80:	425b      	neglt	r3, r3
 8001e82:	617b      	str	r3, [r7, #20]
	int steps_deccel;


	//TODO add extra steps based on direction
	if(1){//(curr_velocity*cruise_velocity) > 0){ // if velocities in same direction
		motor->profile->steps_total = errorInt;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	60da      	str	r2, [r3, #12]
		steps_accel = (int)((cruise_velocity*cruise_velocity - curr_velocity*curr_velocity)/(2.f*accel_ticks));
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe ff78 	bl	8000d84 <__aeabi_fmul>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461c      	mov	r4, r3
 8001e98:	69f9      	ldr	r1, [r7, #28]
 8001e9a:	69f8      	ldr	r0, [r7, #28]
 8001e9c:	f7fe ff72 	bl	8000d84 <__aeabi_fmul>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f7fe fe63 	bl	8000b70 <__aeabi_fsub>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461c      	mov	r4, r3
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fe5e 	bl	8000b74 <__addsf3>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f7ff f815 	bl	8000eec <__aeabi_fdiv>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f939 	bl	800113c <__aeabi_f2iz>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
		steps_deccel = (int)((cruise_velocity*cruise_velocity)/(2.f*accel_ticks));
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7fe ff57 	bl	8000d84 <__aeabi_fmul>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461c      	mov	r4, r3
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4619      	mov	r1, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fe48 	bl	8000b74 <__addsf3>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7fe ffff 	bl	8000eec <__aeabi_fdiv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f923 	bl	800113c <__aeabi_f2iz>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	623b      	str	r3, [r7, #32]

		if(steps_accel + steps_deccel > errorInt){
 8001efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	4413      	add	r3, r2
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	da28      	bge.n	8001f58 <Generate_Profile+0x12c>
			steps_accel = (int)((fabsf(error)/2.f) - ((curr_velocity*curr_velocity)/(4.f*accel_ticks)));
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f0c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe ffeb 	bl	8000eec <__aeabi_fdiv>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461c      	mov	r4, r3
 8001f1a:	69f9      	ldr	r1, [r7, #28]
 8001f1c:	69f8      	ldr	r0, [r7, #28]
 8001f1e:	f7fe ff31 	bl	8000d84 <__aeabi_fmul>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461d      	mov	r5, r3
 8001f26:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001f2a:	69b8      	ldr	r0, [r7, #24]
 8001f2c:	f7fe ff2a 	bl	8000d84 <__aeabi_fmul>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4619      	mov	r1, r3
 8001f34:	4628      	mov	r0, r5
 8001f36:	f7fe ffd9 	bl	8000eec <__aeabi_fdiv>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7fe fe16 	bl	8000b70 <__aeabi_fsub>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f8f8 	bl	800113c <__aeabi_f2iz>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
			steps_deccel = errorInt - steps_accel;
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	623b      	str	r3, [r7, #32]
//
//		motor->profile->steps_total = errorInt + steps_zero;

	}

	motor->profile->steps_accel = abs(steps_accel);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	bfb8      	it	lt
 8001f62:	4252      	neglt	r2, r2
 8001f64:	611a      	str	r2, [r3, #16]
	motor->profile->steps_decel = abs(steps_deccel);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	6a3a      	ldr	r2, [r7, #32]
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	bfb8      	it	lt
 8001f70:	4252      	neglt	r2, r2
 8001f72:	615a      	str	r2, [r3, #20]
}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	@ 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f7c:	447a0000 	.word	0x447a0000
 8001f80:	20000000 	.word	0x20000000

08001f84 <Degrees_to_Steps>:

int Degrees_to_Steps(float angle){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	return (int)((angle/360.)*3200.);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7fe fa4b 	bl	8000428 <__aeabi_f2d>
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <Degrees_to_Steps+0x40>)
 8001f98:	f7fe fbc8 	bl	800072c <__aeabi_ddiv>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <Degrees_to_Steps+0x44>)
 8001faa:	f7fe fa95 	bl	80004d8 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fd3f 	bl	8000a38 <__aeabi_d2iz>
 8001fba:	4603      	mov	r3, r0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40768000 	.word	0x40768000
 8001fc8:	40a90000 	.word	0x40a90000

08001fcc <Steps_to_Degrees>:

float Steps_to_Degrees(int steps){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	return (steps/3200.) * 360;
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7fe fa15 	bl	8000404 <__aeabi_i2d>
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <Steps_to_Degrees+0x40>)
 8001fe0:	f7fe fba4 	bl	800072c <__aeabi_ddiv>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <Steps_to_Degrees+0x44>)
 8001ff2:	f7fe fa71 	bl	80004d8 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fd63 	bl	8000ac8 <__aeabi_d2f>
 8002002:	4603      	mov	r3, r0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40a90000 	.word	0x40a90000
 8002010:	40768000 	.word	0x40768000

08002014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <Error_Handler+0x8>

08002020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002026:	4b15      	ldr	r3, [pc, #84]	@ (800207c <HAL_MspInit+0x5c>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	4a14      	ldr	r2, [pc, #80]	@ (800207c <HAL_MspInit+0x5c>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6193      	str	r3, [r2, #24]
 8002032:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_MspInit+0x5c>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <HAL_MspInit+0x5c>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a0e      	ldr	r2, [pc, #56]	@ (800207c <HAL_MspInit+0x5c>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <HAL_MspInit+0x5c>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_MspInit+0x60>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <HAL_MspInit+0x60>)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	40021000 	.word	0x40021000
 8002080:	40010000 	.word	0x40010000

08002084 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002094:	d113      	bne.n	80020be <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <HAL_TIM_Base_MspInit+0x44>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a0b      	ldr	r2, [pc, #44]	@ (80020c8 <HAL_TIM_Base_MspInit+0x44>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_TIM_Base_MspInit+0x44>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	201c      	movs	r0, #28
 80020b4:	f000 fa71 	bl	800259a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020b8:	201c      	movs	r0, #28
 80020ba:	f000 fa8a 	bl	80025d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <NMI_Handler+0x4>

080020d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <HardFault_Handler+0x4>

080020dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <MemManage_Handler+0x4>

080020e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <BusFault_Handler+0x4>

080020ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <UsageFault_Handler+0x4>

080020f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211c:	f000 f94a 	bl	80023b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800212a:	f000 fd25 	bl	8002b78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20001260 	.word	0x20001260

08002138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <TIM2_IRQHandler+0x10>)
 800213e:	f002 fedf 	bl	8004f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000037c 	.word	0x2000037c

0800214c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <_kill>:

int _kill(int pid, int sig)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002164:	f009 faba 	bl	800b6dc <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	2216      	movs	r2, #22
 800216c:	601a      	str	r2, [r3, #0]
  return -1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <_exit>:

void _exit (int status)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002182:	f04f 31ff 	mov.w	r1, #4294967295
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ffe7 	bl	800215a <_kill>
  while (1) {}    /* Make sure we hang here */
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <_exit+0x12>

08002190 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e00a      	b.n	80021b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a2:	f3af 8000 	nop.w
 80021a6:	4601      	mov	r1, r0
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	60ba      	str	r2, [r7, #8]
 80021ae:	b2ca      	uxtb	r2, r1
 80021b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3301      	adds	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	dbf0      	blt.n	80021a2 <_read+0x12>
  }

  return len;
 80021c0:	687b      	ldr	r3, [r7, #4]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	e009      	b.n	80021f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	60ba      	str	r2, [r7, #8]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3301      	adds	r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	dbf1      	blt.n	80021dc <_write+0x12>
  }
  return len;
 80021f8:	687b      	ldr	r3, [r7, #4]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_close>:

int _close(int file)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002228:	605a      	str	r2, [r3, #4]
  return 0;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <_isatty>:

int _isatty(int file)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
	...

08002264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800226c:	4a14      	ldr	r2, [pc, #80]	@ (80022c0 <_sbrk+0x5c>)
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <_sbrk+0x60>)
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002278:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <_sbrk+0x64>)
 8002282:	4a12      	ldr	r2, [pc, #72]	@ (80022cc <_sbrk+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <_sbrk+0x64>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	429a      	cmp	r2, r3
 8002292:	d207      	bcs.n	80022a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002294:	f009 fa22 	bl	800b6dc <__errno>
 8002298:	4603      	mov	r3, r0
 800229a:	220c      	movs	r2, #12
 800229c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	e009      	b.n	80022b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <_sbrk+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022aa:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <_sbrk+0x64>)
 80022b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20005000 	.word	0x20005000
 80022c4:	00000400 	.word	0x00000400
 80022c8:	20000590 	.word	0x20000590
 80022cc:	200018a8 	.word	0x200018a8

080022d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022dc:	f7ff fff8 	bl	80022d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e0:	480b      	ldr	r0, [pc, #44]	@ (8002310 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022e2:	490c      	ldr	r1, [pc, #48]	@ (8002314 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002318 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e8:	e002      	b.n	80022f0 <LoopCopyDataInit>

080022ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ee:	3304      	adds	r3, #4

080022f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f4:	d3f9      	bcc.n	80022ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f6:	4a09      	ldr	r2, [pc, #36]	@ (800231c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022f8:	4c09      	ldr	r4, [pc, #36]	@ (8002320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022fc:	e001      	b.n	8002302 <LoopFillZerobss>

080022fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002300:	3204      	adds	r2, #4

08002302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002304:	d3fb      	bcc.n	80022fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002306:	f009 f9ef 	bl	800b6e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800230a:	f7ff f809 	bl	8001320 <main>
  bx lr
 800230e:	4770      	bx	lr
  ldr r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002314:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8002318:	0800e6a4 	.word	0x0800e6a4
  ldr r2, =_sbss
 800231c:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8002320:	200018a4 	.word	0x200018a4

08002324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC1_2_IRQHandler>
	...

08002328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800232c:	4b08      	ldr	r3, [pc, #32]	@ (8002350 <HAL_Init+0x28>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a07      	ldr	r2, [pc, #28]	@ (8002350 <HAL_Init+0x28>)
 8002332:	f043 0310 	orr.w	r3, r3, #16
 8002336:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002338:	2003      	movs	r0, #3
 800233a:	f000 f923 	bl	8002584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233e:	200f      	movs	r0, #15
 8002340:	f000 f808 	bl	8002354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002344:	f7ff fe6c 	bl	8002020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800235c:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_InitTick+0x54>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_InitTick+0x58>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800236a:	fbb3 f3f1 	udiv	r3, r3, r1
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f93b 	bl	80025ee <HAL_SYSTICK_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e00e      	b.n	80023a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b0f      	cmp	r3, #15
 8002386:	d80a      	bhi.n	800239e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002388:	2200      	movs	r2, #0
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f000 f903 	bl	800259a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002394:	4a06      	ldr	r2, [pc, #24]	@ (80023b0 <HAL_InitTick+0x5c>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000014 	.word	0x20000014
 80023ac:	2000001c 	.word	0x2000001c
 80023b0:	20000018 	.word	0x20000018

080023b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b8:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_IncTick+0x1c>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <HAL_IncTick+0x20>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	4a03      	ldr	r2, [pc, #12]	@ (80023d4 <HAL_IncTick+0x20>)
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	2000001c 	.word	0x2000001c
 80023d4:	20000594 	.word	0x20000594

080023d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b02      	ldr	r3, [pc, #8]	@ (80023e8 <HAL_GetTick+0x10>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000594 	.word	0x20000594

080023ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	@ (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002438:	4b04      	ldr	r3, [pc, #16]	@ (800244c <__NVIC_GetPriorityGrouping+0x18>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 0307 	and.w	r3, r3, #7
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db0b      	blt.n	800247a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4906      	ldr	r1, [pc, #24]	@ (8002484 <__NVIC_EnableIRQ+0x34>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	@ (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	@ (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	@ 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	@ 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002550:	d301      	bcc.n	8002556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002552:	2301      	movs	r3, #1
 8002554:	e00f      	b.n	8002576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002556:	4a0a      	ldr	r2, [pc, #40]	@ (8002580 <SysTick_Config+0x40>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255e:	210f      	movs	r1, #15
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	f7ff ff90 	bl	8002488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002568:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <SysTick_Config+0x40>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256e:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <SysTick_Config+0x40>)
 8002570:	2207      	movs	r2, #7
 8002572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	e000e010 	.word	0xe000e010

08002584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff2d 	bl	80023ec <__NVIC_SetPriorityGrouping>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ac:	f7ff ff42 	bl	8002434 <__NVIC_GetPriorityGrouping>
 80025b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	6978      	ldr	r0, [r7, #20]
 80025b8:	f7ff ff90 	bl	80024dc <NVIC_EncodePriority>
 80025bc:	4602      	mov	r2, r0
 80025be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff5f 	bl	8002488 <__NVIC_SetPriority>
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff35 	bl	8002450 <__NVIC_EnableIRQ>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ffa2 	bl	8002540 <SysTick_Config>
 80025fc:	4603      	mov	r3, r0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b480      	push	{r7}
 800260a:	b08b      	sub	sp, #44	@ 0x2c
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261a:	e169      	b.n	80028f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800261c:	2201      	movs	r2, #1
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 8158 	bne.w	80028ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a9a      	ldr	r2, [pc, #616]	@ (80028a8 <HAL_GPIO_Init+0x2a0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d05e      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
 8002644:	4a98      	ldr	r2, [pc, #608]	@ (80028a8 <HAL_GPIO_Init+0x2a0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d875      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 800264a:	4a98      	ldr	r2, [pc, #608]	@ (80028ac <HAL_GPIO_Init+0x2a4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d058      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
 8002650:	4a96      	ldr	r2, [pc, #600]	@ (80028ac <HAL_GPIO_Init+0x2a4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d86f      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 8002656:	4a96      	ldr	r2, [pc, #600]	@ (80028b0 <HAL_GPIO_Init+0x2a8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d052      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
 800265c:	4a94      	ldr	r2, [pc, #592]	@ (80028b0 <HAL_GPIO_Init+0x2a8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d869      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 8002662:	4a94      	ldr	r2, [pc, #592]	@ (80028b4 <HAL_GPIO_Init+0x2ac>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d04c      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
 8002668:	4a92      	ldr	r2, [pc, #584]	@ (80028b4 <HAL_GPIO_Init+0x2ac>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d863      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 800266e:	4a92      	ldr	r2, [pc, #584]	@ (80028b8 <HAL_GPIO_Init+0x2b0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d046      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
 8002674:	4a90      	ldr	r2, [pc, #576]	@ (80028b8 <HAL_GPIO_Init+0x2b0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d85d      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 800267a:	2b12      	cmp	r3, #18
 800267c:	d82a      	bhi.n	80026d4 <HAL_GPIO_Init+0xcc>
 800267e:	2b12      	cmp	r3, #18
 8002680:	d859      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 8002682:	a201      	add	r2, pc, #4	@ (adr r2, 8002688 <HAL_GPIO_Init+0x80>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	08002703 	.word	0x08002703
 800268c:	080026dd 	.word	0x080026dd
 8002690:	080026ef 	.word	0x080026ef
 8002694:	08002731 	.word	0x08002731
 8002698:	08002737 	.word	0x08002737
 800269c:	08002737 	.word	0x08002737
 80026a0:	08002737 	.word	0x08002737
 80026a4:	08002737 	.word	0x08002737
 80026a8:	08002737 	.word	0x08002737
 80026ac:	08002737 	.word	0x08002737
 80026b0:	08002737 	.word	0x08002737
 80026b4:	08002737 	.word	0x08002737
 80026b8:	08002737 	.word	0x08002737
 80026bc:	08002737 	.word	0x08002737
 80026c0:	08002737 	.word	0x08002737
 80026c4:	08002737 	.word	0x08002737
 80026c8:	08002737 	.word	0x08002737
 80026cc:	080026e5 	.word	0x080026e5
 80026d0:	080026f9 	.word	0x080026f9
 80026d4:	4a79      	ldr	r2, [pc, #484]	@ (80028bc <HAL_GPIO_Init+0x2b4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026da:	e02c      	b.n	8002736 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	623b      	str	r3, [r7, #32]
          break;
 80026e2:	e029      	b.n	8002738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	3304      	adds	r3, #4
 80026ea:	623b      	str	r3, [r7, #32]
          break;
 80026ec:	e024      	b.n	8002738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	3308      	adds	r3, #8
 80026f4:	623b      	str	r3, [r7, #32]
          break;
 80026f6:	e01f      	b.n	8002738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	330c      	adds	r3, #12
 80026fe:	623b      	str	r3, [r7, #32]
          break;
 8002700:	e01a      	b.n	8002738 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800270a:	2304      	movs	r3, #4
 800270c:	623b      	str	r3, [r7, #32]
          break;
 800270e:	e013      	b.n	8002738 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002718:	2308      	movs	r3, #8
 800271a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	611a      	str	r2, [r3, #16]
          break;
 8002722:	e009      	b.n	8002738 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002724:	2308      	movs	r3, #8
 8002726:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	615a      	str	r2, [r3, #20]
          break;
 800272e:	e003      	b.n	8002738 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
          break;
 8002734:	e000      	b.n	8002738 <HAL_GPIO_Init+0x130>
          break;
 8002736:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2bff      	cmp	r3, #255	@ 0xff
 800273c:	d801      	bhi.n	8002742 <HAL_GPIO_Init+0x13a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	e001      	b.n	8002746 <HAL_GPIO_Init+0x13e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2bff      	cmp	r3, #255	@ 0xff
 800274c:	d802      	bhi.n	8002754 <HAL_GPIO_Init+0x14c>
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	e002      	b.n	800275a <HAL_GPIO_Init+0x152>
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	3b08      	subs	r3, #8
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	210f      	movs	r1, #15
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	401a      	ands	r2, r3
 800276c:	6a39      	ldr	r1, [r7, #32]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	431a      	orrs	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80b1 	beq.w	80028ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002788:	4b4d      	ldr	r3, [pc, #308]	@ (80028c0 <HAL_GPIO_Init+0x2b8>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a4c      	ldr	r2, [pc, #304]	@ (80028c0 <HAL_GPIO_Init+0x2b8>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b4a      	ldr	r3, [pc, #296]	@ (80028c0 <HAL_GPIO_Init+0x2b8>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027a0:	4a48      	ldr	r2, [pc, #288]	@ (80028c4 <HAL_GPIO_Init+0x2bc>)
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a40      	ldr	r2, [pc, #256]	@ (80028c8 <HAL_GPIO_Init+0x2c0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <HAL_GPIO_Init+0x1ec>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3f      	ldr	r2, [pc, #252]	@ (80028cc <HAL_GPIO_Init+0x2c4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00d      	beq.n	80027f0 <HAL_GPIO_Init+0x1e8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3e      	ldr	r2, [pc, #248]	@ (80028d0 <HAL_GPIO_Init+0x2c8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <HAL_GPIO_Init+0x1e4>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3d      	ldr	r2, [pc, #244]	@ (80028d4 <HAL_GPIO_Init+0x2cc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_GPIO_Init+0x1e0>
 80027e4:	2303      	movs	r3, #3
 80027e6:	e006      	b.n	80027f6 <HAL_GPIO_Init+0x1ee>
 80027e8:	2304      	movs	r3, #4
 80027ea:	e004      	b.n	80027f6 <HAL_GPIO_Init+0x1ee>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e002      	b.n	80027f6 <HAL_GPIO_Init+0x1ee>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_GPIO_Init+0x1ee>
 80027f4:	2300      	movs	r3, #0
 80027f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f8:	f002 0203 	and.w	r2, r2, #3
 80027fc:	0092      	lsls	r2, r2, #2
 80027fe:	4093      	lsls	r3, r2
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002806:	492f      	ldr	r1, [pc, #188]	@ (80028c4 <HAL_GPIO_Init+0x2bc>)
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002820:	4b2d      	ldr	r3, [pc, #180]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	492c      	ldr	r1, [pc, #176]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]
 800282c:	e006      	b.n	800283c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800282e:	4b2a      	ldr	r3, [pc, #168]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	43db      	mvns	r3, r3
 8002836:	4928      	ldr	r1, [pc, #160]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 8002838:	4013      	ands	r3, r2
 800283a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d006      	beq.n	8002856 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002848:	4b23      	ldr	r3, [pc, #140]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	4922      	ldr	r1, [pc, #136]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	60cb      	str	r3, [r1, #12]
 8002854:	e006      	b.n	8002864 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002856:	4b20      	ldr	r3, [pc, #128]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	43db      	mvns	r3, r3
 800285e:	491e      	ldr	r1, [pc, #120]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 8002860:	4013      	ands	r3, r2
 8002862:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002870:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	4918      	ldr	r1, [pc, #96]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800287e:	4b16      	ldr	r3, [pc, #88]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	43db      	mvns	r3, r3
 8002886:	4914      	ldr	r1, [pc, #80]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 8002888:	4013      	ands	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d021      	beq.n	80028dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002898:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	490e      	ldr	r1, [pc, #56]	@ (80028d8 <HAL_GPIO_Init+0x2d0>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]
 80028a4:	e021      	b.n	80028ea <HAL_GPIO_Init+0x2e2>
 80028a6:	bf00      	nop
 80028a8:	10320000 	.word	0x10320000
 80028ac:	10310000 	.word	0x10310000
 80028b0:	10220000 	.word	0x10220000
 80028b4:	10210000 	.word	0x10210000
 80028b8:	10120000 	.word	0x10120000
 80028bc:	10110000 	.word	0x10110000
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40010000 	.word	0x40010000
 80028c8:	40010800 	.word	0x40010800
 80028cc:	40010c00 	.word	0x40010c00
 80028d0:	40011000 	.word	0x40011000
 80028d4:	40011400 	.word	0x40011400
 80028d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_GPIO_Init+0x304>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	4909      	ldr	r1, [pc, #36]	@ (800290c <HAL_GPIO_Init+0x304>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	3301      	adds	r3, #1
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	fa22 f303 	lsr.w	r3, r2, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f47f ae8e 	bne.w	800261c <HAL_GPIO_Init+0x14>
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	372c      	adds	r7, #44	@ 0x2c
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40010400 	.word	0x40010400

08002910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800292c:	e003      	b.n	8002936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	041a      	lsls	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	611a      	str	r2, [r3, #16]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0e8      	b.n	8002b24 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f006 ff62 	bl	8009830 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2203      	movs	r2, #3
 8002970:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fe31 	bl	80055e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800298e:	f002 fe07 	bl	80055a0 <USB_CoreInit>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0bf      	b.n	8002b24 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f002 fe35 	bl	800561a <USB_SetCurrentMode>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0b0      	b.n	8002b24 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e03e      	b.n	8002a46 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	3311      	adds	r3, #17
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	3310      	adds	r3, #16
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	3313      	adds	r3, #19
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	3320      	adds	r3, #32
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	3324      	adds	r3, #36	@ 0x24
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	3301      	adds	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	791b      	ldrb	r3, [r3, #4]
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3bb      	bcc.n	80029c8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e044      	b.n	8002ae0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	3301      	adds	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	791b      	ldrb	r3, [r3, #4]
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d3b5      	bcc.n	8002a56 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af4:	f002 fd9d 	bl	8005632 <USB_DevInit>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e00c      	b.n	8002b24 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f005 f81c 	bl	8007b5a <USB_DevDisconnect>

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_PCD_Start+0x16>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e016      	b.n	8002b70 <HAL_PCD_Start+0x44>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 fd33 	bl	80055ba <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b54:	2101      	movs	r1, #1
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f007 f8dd 	bl	8009d16 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f004 fff0 	bl	8007b46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 fff2 	bl	8007b6e <USB_ReadInterrupts>
 8002b8a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fb1a 	bl	80031d0 <PCD_EP_ISR_Handler>

    return;
 8002b9c:	e119      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bba:	b292      	uxth	r2, r2
 8002bbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f006 feb0 	bl	8009926 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f905 	bl	8002dd8 <HAL_PCD_SetAddress>

    return;
 8002bce:	e100      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bec:	b292      	uxth	r2, r2
 8002bee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002bf2:	e0ee      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00c      	beq.n	8002c18 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c10:	b292      	uxth	r2, r2
 8002c12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c16:	e0dc      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d027      	beq.n	8002c72 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0204 	bic.w	r2, r2, #4
 8002c34:	b292      	uxth	r2, r2
 8002c36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0208 	bic.w	r2, r2, #8
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f006 fea0 	bl	8009998 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c70:	e0af      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8083 	beq.w	8002d84 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	77fb      	strb	r3, [r7, #31]
 8002c82:	e010      	b.n	8002ca6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	7ffb      	ldrb	r3, [r7, #31]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	441a      	add	r2, r3
 8002c90:	7ffb      	ldrb	r3, [r7, #31]
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	b292      	uxth	r2, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	3320      	adds	r3, #32
 8002c9a:	443b      	add	r3, r7
 8002c9c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	77fb      	strb	r3, [r7, #31]
 8002ca6:	7ffb      	ldrb	r3, [r7, #31]
 8002ca8:	2b07      	cmp	r3, #7
 8002caa:	d9eb      	bls.n	8002c84 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	b292      	uxth	r2, r2
 8002cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002cdc:	bf00      	nop
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f6      	beq.n	8002cde <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d02:	b292      	uxth	r2, r2
 8002d04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e00f      	b.n	8002d2e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	4611      	mov	r1, r2
 8002d16:	7ffa      	ldrb	r2, [r7, #31]
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	440a      	add	r2, r1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	3320      	adds	r3, #32
 8002d20:	443b      	add	r3, r7
 8002d22:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d26:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002d28:	7ffb      	ldrb	r3, [r7, #31]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	7ffb      	ldrb	r3, [r7, #31]
 8002d30:	2b07      	cmp	r3, #7
 8002d32:	d9ec      	bls.n	8002d0e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0208 	orr.w	r2, r2, #8
 8002d46:	b292      	uxth	r2, r2
 8002d48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0204 	orr.w	r2, r2, #4
 8002d76:	b292      	uxth	r2, r2
 8002d78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f006 fdf1 	bl	8009964 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002d82:	e026      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00f      	beq.n	8002dae <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002da0:	b292      	uxth	r2, r2
 8002da2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f006 fdaf 	bl	800990a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002dac:	e011      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dca:	b292      	uxth	r2, r2
 8002dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002dd0:	bf00      	nop
  }
}
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_PCD_SetAddress+0x1a>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e012      	b.n	8002e18 <HAL_PCD_SetAddress+0x40>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 fe89 	bl	8007b20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	70fb      	strb	r3, [r7, #3]
 8002e32:	460b      	mov	r3, r1
 8002e34:	803b      	strh	r3, [r7, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	da0e      	bge.n	8002e64 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	f003 0207 	and.w	r2, r3, #7
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	3310      	adds	r3, #16
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	705a      	strb	r2, [r3, #1]
 8002e62:	e00e      	b.n	8002e82 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 0207 	and.w	r2, r3, #7
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e8e:	883a      	ldrh	r2, [r7, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	78ba      	ldrb	r2, [r7, #2]
 8002e98:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e9a:	78bb      	ldrb	r3, [r7, #2]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_PCD_EP_Open+0x94>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e00e      	b.n	8002ed2 <HAL_PCD_EP_Open+0xb2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68f9      	ldr	r1, [r7, #12]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f002 fbd2 	bl	800566c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002ed0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	da0e      	bge.n	8002f0c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 0207 	and.w	r2, r3, #7
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	3310      	adds	r3, #16
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	705a      	strb	r2, [r3, #1]
 8002f0a:	e00e      	b.n	8002f2a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	f003 0207 	and.w	r2, r3, #7
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_PCD_EP_Close+0x6a>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e00e      	b.n	8002f62 <HAL_PCD_EP_Close+0x88>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 ff4a 	bl	8005dec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	460b      	mov	r3, r1
 8002f78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f7a:	7afb      	ldrb	r3, [r7, #11]
 8002f7c:	f003 0207 	and.w	r2, r3, #7
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002faa:	7afb      	ldrb	r3, [r7, #11]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6979      	ldr	r1, [r7, #20]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 f901 	bl	80061c4 <USB_EPStartXfer>

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 0207 	and.w	r2, r3, #7
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	460b      	mov	r3, r1
 8003008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300a:	7afb      	ldrb	r3, [r7, #11]
 800300c:	f003 0207 	and.w	r2, r3, #7
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	3310      	adds	r3, #16
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2200      	movs	r2, #0
 800303e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2201      	movs	r2, #1
 8003044:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003046:	7afb      	ldrb	r3, [r7, #11]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	b2da      	uxtb	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6979      	ldr	r1, [r7, #20]
 8003058:	4618      	mov	r0, r3
 800305a:	f003 f8b3 	bl	80061c4 <USB_EPStartXfer>

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	7912      	ldrb	r2, [r2, #4]
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e04c      	b.n	8003120 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da0e      	bge.n	80030ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 0207 	and.w	r2, r3, #7
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	3310      	adds	r3, #16
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	705a      	strb	r2, [r3, #1]
 80030aa:	e00c      	b.n	80030c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_PCD_EP_SetStall+0x7e>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e01c      	b.n	8003120 <HAL_PCD_EP_SetStall+0xb8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f004 fc16 	bl	8007926 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	2b00      	cmp	r3, #0
 8003102:	d108      	bne.n	8003116 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f004 fd3b 	bl	8007b8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	7912      	ldrb	r2, [r2, #4]
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e040      	b.n	80031c8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800314a:	2b00      	cmp	r3, #0
 800314c:	da0e      	bge.n	800316c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 0207 	and.w	r2, r3, #7
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	3310      	adds	r3, #16
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	705a      	strb	r2, [r3, #1]
 800316a:	e00e      	b.n	800318a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	f003 0207 	and.w	r2, r3, #7
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	b2da      	uxtb	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_PCD_EP_ClrStall+0x82>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e00e      	b.n	80031c8 <HAL_PCD_EP_ClrStall+0xa0>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f004 fc04 	bl	80079c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b096      	sub	sp, #88	@ 0x58
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031d8:	e3bb      	b.n	8003952 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80031e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80031f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f040 8175 	bne.w	80034e8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80031fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d14e      	bne.n	80032a8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800321a:	81fb      	strh	r3, [r7, #14]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	89fb      	ldrh	r3, [r7, #14]
 8003222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800322a:	b29b      	uxth	r3, r3
 800322c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3310      	adds	r3, #16
 8003232:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800323c:	b29b      	uxth	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	3302      	adds	r3, #2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800325c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	441a      	add	r2, r3
 800326a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800326e:	2100      	movs	r1, #0
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f006 fb30 	bl	80098d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7b5b      	ldrb	r3, [r3, #13]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8368 	beq.w	8003952 <PCD_EP_ISR_Handler+0x782>
 8003282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 8363 	bne.w	8003952 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7b5b      	ldrb	r3, [r3, #13]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003296:	b2da      	uxtb	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	735a      	strb	r2, [r3, #13]
 80032a6:	e354      	b.n	8003952 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032ae:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80032be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d034      	beq.n	8003330 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	3306      	adds	r3, #6
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80032fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003302:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003304:	b29b      	uxth	r3, r3
 8003306:	f004 fc92 	bl	8007c2e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	b29a      	uxth	r2, r3
 8003312:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003316:	4013      	ands	r3, r2
 8003318:	823b      	strh	r3, [r7, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	8a3a      	ldrh	r2, [r7, #16]
 8003320:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003324:	b292      	uxth	r2, r2
 8003326:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f006 faa7 	bl	800987c <HAL_PCD_SetupStageCallback>
 800332e:	e310      	b.n	8003952 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003330:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003334:	2b00      	cmp	r3, #0
 8003336:	f280 830c 	bge.w	8003952 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	b29a      	uxth	r2, r3
 8003342:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003346:	4013      	ands	r3, r2
 8003348:	83fb      	strh	r3, [r7, #30]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	8bfa      	ldrh	r2, [r7, #30]
 8003350:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003354:	b292      	uxth	r2, r2
 8003356:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003360:	b29b      	uxth	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	3306      	adds	r3, #6
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003382:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d019      	beq.n	80033c0 <PCD_EP_ISR_Handler+0x1f0>
 800338c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d015      	beq.n	80033c0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339a:	6959      	ldr	r1, [r3, #20]
 800339c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80033a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f004 fc42 	bl	8007c2e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80033aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	441a      	add	r2, r3
 80033b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80033b8:	2100      	movs	r1, #0
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f006 fa70 	bl	80098a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80033ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80033ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 82bd 	bne.w	8003952 <PCD_EP_ISR_Handler+0x782>
 80033d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80033dc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80033e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033e4:	f000 82b5 	beq.w	8003952 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	b29b      	uxth	r3, r3
 800340e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003412:	b29a      	uxth	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	801a      	strh	r2, [r3, #0]
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b3e      	cmp	r3, #62	@ 0x3e
 800341e:	d91d      	bls.n	800345c <PCD_EP_ISR_Handler+0x28c>
 8003420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	647b      	str	r3, [r7, #68]	@ 0x44
 8003428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <PCD_EP_ISR_Handler+0x26a>
 8003434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003436:	3b01      	subs	r3, #1
 8003438:	647b      	str	r3, [r7, #68]	@ 0x44
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29a      	uxth	r2, r3
 8003440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003442:	b29b      	uxth	r3, r3
 8003444:	029b      	lsls	r3, r3, #10
 8003446:	b29b      	uxth	r3, r3
 8003448:	4313      	orrs	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003454:	b29a      	uxth	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	801a      	strh	r2, [r3, #0]
 800345a:	e026      	b.n	80034aa <PCD_EP_ISR_Handler+0x2da>
 800345c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <PCD_EP_ISR_Handler+0x2aa>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800346e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003472:	b29a      	uxth	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	801a      	strh	r2, [r3, #0]
 8003478:	e017      	b.n	80034aa <PCD_EP_ISR_Handler+0x2da>
 800347a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	647b      	str	r3, [r7, #68]	@ 0x44
 8003482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <PCD_EP_ISR_Handler+0x2c4>
 800348e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003490:	3301      	adds	r3, #1
 8003492:	647b      	str	r3, [r7, #68]	@ 0x44
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29a      	uxth	r2, r3
 800349a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800349c:	b29b      	uxth	r3, r3
 800349e:	029b      	lsls	r3, r3, #10
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	4313      	orrs	r3, r2
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ba:	827b      	strh	r3, [r7, #18]
 80034bc:	8a7b      	ldrh	r3, [r7, #18]
 80034be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80034c2:	827b      	strh	r3, [r7, #18]
 80034c4:	8a7b      	ldrh	r3, [r7, #18]
 80034c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80034ca:	827b      	strh	r3, [r7, #18]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	8a7b      	ldrh	r3, [r7, #18]
 80034d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8013      	strh	r3, [r2, #0]
 80034e6:	e234      	b.n	8003952 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034fc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003500:	2b00      	cmp	r3, #0
 8003502:	f280 80fc 	bge.w	80036fe <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29a      	uxth	r2, r3
 8003518:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800351c:	4013      	ands	r3, r2
 800351e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003534:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003538:	b292      	uxth	r2, r2
 800353a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800353c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003554:	7b1b      	ldrb	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d125      	bne.n	80035a6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003562:	b29b      	uxth	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	3306      	adds	r3, #6
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003582:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003586:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8092 	beq.w	80036b4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003596:	6959      	ldr	r1, [r3, #20]
 8003598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359a:	88da      	ldrh	r2, [r3, #6]
 800359c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035a0:	f004 fb45 	bl	8007c2e <USB_ReadPMA>
 80035a4:	e086      	b.n	80036b4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	78db      	ldrb	r3, [r3, #3]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d10a      	bne.n	80035c4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80035ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035b2:	461a      	mov	r2, r3
 80035b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f9d9 	bl	800396e <HAL_PCD_EP_DB_Receive>
 80035bc:	4603      	mov	r3, r0
 80035be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80035c2:	e077      	b.n	80036b4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035de:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	441a      	add	r2, r3
 80035f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80035f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003600:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003604:	b29b      	uxth	r3, r3
 8003606:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d024      	beq.n	800366c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800362a:	b29b      	uxth	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	3302      	adds	r3, #2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800364a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800364e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003652:	2b00      	cmp	r3, #0
 8003654:	d02e      	beq.n	80036b4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365c:	6959      	ldr	r1, [r3, #20]
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	891a      	ldrh	r2, [r3, #8]
 8003662:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003666:	f004 fae2 	bl	8007c2e <USB_ReadPMA>
 800366a:	e023      	b.n	80036b4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003674:	b29b      	uxth	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	3306      	adds	r3, #6
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003694:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003698:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a6:	6959      	ldr	r1, [r3, #20]
 80036a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036aa:	895a      	ldrh	r2, [r3, #10]
 80036ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036b0:	f004 fabd 	bl	8007c2e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80036b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036bc:	441a      	add	r2, r3
 80036be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80036c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036ca:	441a      	add	r2, r3
 80036cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80036d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <PCD_EP_ISR_Handler+0x514>
 80036d8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80036dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d206      	bcs.n	80036f2 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80036e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f006 f8d8 	bl	80098a0 <HAL_PCD_DataOutStageCallback>
 80036f0:	e005      	b.n	80036fe <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036f8:	4618      	mov	r0, r3
 80036fa:	f002 fd63 	bl	80061c4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80036fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8123 	beq.w	8003952 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800370c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	3310      	adds	r3, #16
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800373a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	441a      	add	r2, r3
 800374c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003758:	b29b      	uxth	r3, r3
 800375a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800375c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800375e:	78db      	ldrb	r3, [r3, #3]
 8003760:	2b01      	cmp	r3, #1
 8003762:	f040 80a2 	bne.w	80038aa <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800376c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376e:	7b1b      	ldrb	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8093 	beq.w	800389c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003776:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800377a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d046      	beq.n	8003810 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003784:	785b      	ldrb	r3, [r3, #1]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d126      	bne.n	80037d8 <PCD_EP_ISR_Handler+0x608>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003798:	b29b      	uxth	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	4413      	add	r3, r2
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	011a      	lsls	r2, r3, #4
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	4413      	add	r3, r2
 80037ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037bc:	b29a      	uxth	r2, r3
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	801a      	strh	r2, [r3, #0]
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	801a      	strh	r2, [r3, #0]
 80037d6:	e061      	b.n	800389c <PCD_EP_ISR_Handler+0x6cc>
 80037d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037da:	785b      	ldrb	r3, [r3, #1]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d15d      	bne.n	800389c <PCD_EP_ISR_Handler+0x6cc>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f4:	4413      	add	r3, r2
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	011a      	lsls	r2, r3, #4
 80037fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003800:	4413      	add	r3, r2
 8003802:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003806:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380a:	2200      	movs	r2, #0
 800380c:	801a      	strh	r2, [r3, #0]
 800380e:	e045      	b.n	800389c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003818:	785b      	ldrb	r3, [r3, #1]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d126      	bne.n	800386c <PCD_EP_ISR_Handler+0x69c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	637b      	str	r3, [r7, #52]	@ 0x34
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800382c:	b29b      	uxth	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003832:	4413      	add	r3, r2
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
 8003836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	011a      	lsls	r2, r3, #4
 800383c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383e:	4413      	add	r3, r2
 8003840:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003844:	633b      	str	r3, [r7, #48]	@ 0x30
 8003846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003850:	b29a      	uxth	r2, r3
 8003852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003864:	b29a      	uxth	r2, r3
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	801a      	strh	r2, [r3, #0]
 800386a:	e017      	b.n	800389c <PCD_EP_ISR_Handler+0x6cc>
 800386c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386e:	785b      	ldrb	r3, [r3, #1]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d113      	bne.n	800389c <PCD_EP_ISR_Handler+0x6cc>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800387c:	b29b      	uxth	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003882:	4413      	add	r3, r2
 8003884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	011a      	lsls	r2, r3, #4
 800388c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800388e:	4413      	add	r3, r2
 8003890:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003894:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	2200      	movs	r2, #0
 800389a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800389c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f006 f817 	bl	80098d6 <HAL_PCD_DataInStageCallback>
 80038a8:	e053      	b.n	8003952 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80038aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80038ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d146      	bne.n	8003944 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038be:	b29b      	uxth	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	3302      	adds	r3, #2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80038e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d907      	bls.n	80038fe <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80038ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80038f6:	1ad2      	subs	r2, r2, r3
 80038f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fa:	619a      	str	r2, [r3, #24]
 80038fc:	e002      	b.n	8003904 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80038fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003900:	2200      	movs	r2, #0
 8003902:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800390c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f005 ffdf 	bl	80098d6 <HAL_PCD_DataInStageCallback>
 8003918:	e01b      	b.n	8003952 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800391a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003922:	441a      	add	r2, r3
 8003924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003926:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003930:	441a      	add	r2, r3
 8003932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003934:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800393c:	4618      	mov	r0, r3
 800393e:	f002 fc41 	bl	80061c4 <USB_EPStartXfer>
 8003942:	e006      	b.n	8003952 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003944:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003948:	461a      	mov	r2, r3
 800394a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f91b 	bl	8003b88 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800395a:	b29b      	uxth	r3, r3
 800395c:	b21b      	sxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	f6ff ac3b 	blt.w	80031da <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3758      	adds	r7, #88	@ 0x58
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b088      	sub	sp, #32
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	4613      	mov	r3, r2
 800397a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d07e      	beq.n	8003a84 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	3302      	adds	r3, #2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	8b7b      	ldrh	r3, [r7, #26]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d306      	bcc.n	80039c8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	8b7b      	ldrh	r3, [r7, #26]
 80039c0:	1ad2      	subs	r2, r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	619a      	str	r2, [r3, #24]
 80039c6:	e002      	b.n	80039ce <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d123      	bne.n	8003a1e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f0:	833b      	strh	r3, [r7, #24]
 80039f2:	8b3b      	ldrh	r3, [r7, #24]
 80039f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80039f8:	833b      	strh	r3, [r7, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	8b3b      	ldrh	r3, [r7, #24]
 8003a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01f      	beq.n	8003a68 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a42:	82fb      	strh	r3, [r7, #22]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	441a      	add	r2, r3
 8003a52:	8afb      	ldrh	r3, [r7, #22]
 8003a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a68:	8b7b      	ldrh	r3, [r7, #26]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8087 	beq.w	8003b7e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6959      	ldr	r1, [r3, #20]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	891a      	ldrh	r2, [r3, #8]
 8003a7c:	8b7b      	ldrh	r3, [r7, #26]
 8003a7e:	f004 f8d6 	bl	8007c2e <USB_ReadPMA>
 8003a82:	e07c      	b.n	8003b7e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	3306      	adds	r3, #6
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	8b7b      	ldrh	r3, [r7, #26]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d306      	bcc.n	8003ac6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	8b7b      	ldrh	r3, [r7, #26]
 8003abe:	1ad2      	subs	r2, r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	619a      	str	r2, [r3, #24]
 8003ac4:	e002      	b.n	8003acc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d123      	bne.n	8003b1c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aee:	83fb      	strh	r3, [r7, #30]
 8003af0:	8bfb      	ldrh	r3, [r7, #30]
 8003af2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003af6:	83fb      	strh	r3, [r7, #30]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	441a      	add	r2, r3
 8003b06:	8bfb      	ldrh	r3, [r7, #30]
 8003b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11f      	bne.n	8003b66 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b40:	83bb      	strh	r3, [r7, #28]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	441a      	add	r2, r3
 8003b50:	8bbb      	ldrh	r3, [r7, #28]
 8003b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b66:	8b7b      	ldrh	r3, [r7, #26]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6959      	ldr	r1, [r3, #20]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	895a      	ldrh	r2, [r3, #10]
 8003b78:	8b7b      	ldrh	r3, [r7, #26]
 8003b7a:	f004 f858 	bl	8007c2e <USB_ReadPMA>
    }
  }

  return count;
 8003b7e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b0a4      	sub	sp, #144	@ 0x90
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 81dd 	beq.w	8003f5c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d907      	bls.n	8003bea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003be2:	1ad2      	subs	r2, r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	619a      	str	r2, [r3, #24]
 8003be8:	e002      	b.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2200      	movs	r2, #0
 8003bee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f040 80b9 	bne.w	8003d6c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	785b      	ldrb	r3, [r3, #1]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d126      	bne.n	8003c50 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c16:	4413      	add	r3, r2
 8003c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	011a      	lsls	r2, r3, #4
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	4413      	add	r3, r2
 8003c24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c38:	801a      	strh	r2, [r3, #0]
 8003c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	e01a      	b.n	8003c86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d116      	bne.n	8003c86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6c:	4413      	add	r3, r2
 8003c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	011a      	lsls	r2, r3, #4
 8003c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c78:	4413      	add	r3, r2
 8003c7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c82:	2200      	movs	r2, #0
 8003c84:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d126      	bne.n	8003ce2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	4413      	add	r3, r2
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	011a      	lsls	r2, r3, #4
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	801a      	strh	r2, [r3, #0]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	801a      	strh	r2, [r3, #0]
 8003ce0:	e017      	b.n	8003d12 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d113      	bne.n	8003d12 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	4413      	add	r3, r2
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	011a      	lsls	r2, r3, #4
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	4413      	add	r3, r2
 8003d06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	4619      	mov	r1, r3
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f005 fddc 	bl	80098d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 82fc 	beq.w	8004322 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d44:	82fb      	strh	r3, [r7, #22]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	441a      	add	r2, r3
 8003d54:	8afb      	ldrh	r3, [r7, #22]
 8003d56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8013      	strh	r3, [r2, #0]
 8003d6a:	e2da      	b.n	8004322 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d021      	beq.n	8003dba <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	441a      	add	r2, r3
 8003da2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	f040 82ae 	bne.w	8004322 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003dce:	441a      	add	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ddc:	441a      	add	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6a1a      	ldr	r2, [r3, #32]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d30b      	bcc.n	8003e06 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6a1a      	ldr	r2, [r3, #32]
 8003dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	621a      	str	r2, [r3, #32]
 8003e04:	e017      	b.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d108      	bne.n	8003e20 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003e0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e1e:	e00a      	b.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d165      	bne.n	8003f0a <HAL_PCD_EP_DB_Transmit+0x382>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e52:	4413      	add	r3, r2
 8003e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	011a      	lsls	r2, r3, #4
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e5e:	4413      	add	r3, r2
 8003e60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e7c:	d91d      	bls.n	8003eba <HAL_PCD_EP_DB_Transmit+0x332>
 8003e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d102      	bne.n	8003e98 <HAL_PCD_EP_DB_Transmit+0x310>
 8003e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e94:	3b01      	subs	r3, #1
 8003e96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	029b      	lsls	r3, r3, #10
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e044      	b.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_PCD_EP_DB_Transmit+0x350>
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed4:	801a      	strh	r2, [r3, #0]
 8003ed6:	e035      	b.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eee:	3301      	adds	r3, #1
 8003ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	029b      	lsls	r3, r3, #10
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4313      	orrs	r3, r2
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	e01c      	b.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	785b      	ldrb	r3, [r3, #1]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d118      	bne.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f26:	4413      	add	r3, r2
 8003f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	011a      	lsls	r2, r3, #4
 8003f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f32:	4413      	add	r3, r2
 8003f34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f42:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6959      	ldr	r1, [r3, #20]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	891a      	ldrh	r2, [r3, #8]
 8003f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f003 fe24 	bl	8007ba2 <USB_WritePMA>
 8003f5a:	e1e2      	b.n	8004322 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3306      	adds	r3, #6
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f84:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	699a      	ldr	r2, [r3, #24]
 8003f8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d307      	bcc.n	8003fa4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f9c:	1ad2      	subs	r2, r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	619a      	str	r2, [r3, #24]
 8003fa2:	e002      	b.n	8003faa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f040 80c0 	bne.w	8004134 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	785b      	ldrb	r3, [r3, #1]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d126      	bne.n	800400a <HAL_PCD_EP_DB_Transmit+0x482>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fd0:	4413      	add	r3, r2
 8003fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	011a      	lsls	r2, r3, #4
 8003fda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fdc:	4413      	add	r3, r2
 8003fde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004002:	b29a      	uxth	r2, r3
 8004004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	e01a      	b.n	8004040 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	785b      	ldrb	r3, [r3, #1]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d116      	bne.n	8004040 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	667b      	str	r3, [r7, #100]	@ 0x64
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004020:	b29b      	uxth	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004026:	4413      	add	r3, r2
 8004028:	667b      	str	r3, [r7, #100]	@ 0x64
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	011a      	lsls	r2, r3, #4
 8004030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004032:	4413      	add	r3, r2
 8004034:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004038:	663b      	str	r3, [r7, #96]	@ 0x60
 800403a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800403c:	2200      	movs	r2, #0
 800403e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	677b      	str	r3, [r7, #116]	@ 0x74
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	785b      	ldrb	r3, [r3, #1]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d12b      	bne.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800405c:	b29b      	uxth	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004062:	4413      	add	r3, r2
 8004064:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	011a      	lsls	r2, r3, #4
 800406c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800406e:	4413      	add	r3, r2
 8004070:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004074:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004078:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004084:	b29a      	uxth	r2, r3
 8004086:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800408a:	801a      	strh	r2, [r3, #0]
 800408c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800409c:	b29a      	uxth	r2, r3
 800409e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	e017      	b.n	80040d6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	785b      	ldrb	r3, [r3, #1]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d113      	bne.n	80040d6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040bc:	4413      	add	r3, r2
 80040be:	677b      	str	r3, [r7, #116]	@ 0x74
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	011a      	lsls	r2, r3, #4
 80040c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c8:	4413      	add	r3, r2
 80040ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80040d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040d2:	2200      	movs	r2, #0
 80040d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	4619      	mov	r1, r3
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f005 fbfa 	bl	80098d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 811a 	bne.w	8004322 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004108:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	441a      	add	r2, r3
 800411a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800411e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004126:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800412a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800412e:	b29b      	uxth	r3, r3
 8004130:	8013      	strh	r3, [r2, #0]
 8004132:	e0f6      	b.n	8004322 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d121      	bne.n	8004182 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004158:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800416e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004176:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800417a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800417e:	b29b      	uxth	r3, r3
 8004180:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004188:	2b01      	cmp	r3, #1
 800418a:	f040 80ca 	bne.w	8004322 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004196:	441a      	add	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041a4:	441a      	add	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	6a1a      	ldr	r2, [r3, #32]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d30b      	bcc.n	80041ce <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	6a1a      	ldr	r2, [r3, #32]
 80041c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041c6:	1ad2      	subs	r2, r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	621a      	str	r2, [r3, #32]
 80041cc:	e017      	b.n	80041fe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80041d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80041e6:	e00a      	b.n	80041fe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	657b      	str	r3, [r7, #84]	@ 0x54
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d165      	bne.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x750>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800421a:	b29b      	uxth	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004220:	4413      	add	r3, r2
 8004222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	011a      	lsls	r2, r3, #4
 800422a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800422c:	4413      	add	r3, r2
 800422e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004232:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423e:	b29a      	uxth	r2, r3
 8004240:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004242:	801a      	strh	r2, [r3, #0]
 8004244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004248:	2b3e      	cmp	r3, #62	@ 0x3e
 800424a:	d91d      	bls.n	8004288 <HAL_PCD_EP_DB_Transmit+0x700>
 800424c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004262:	3b01      	subs	r3, #1
 8004264:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004266:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29a      	uxth	r2, r3
 800426c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800426e:	b29b      	uxth	r3, r3
 8004270:	029b      	lsls	r3, r3, #10
 8004272:	b29b      	uxth	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b29b      	uxth	r3, r3
 8004278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004280:	b29a      	uxth	r2, r3
 8004282:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004284:	801a      	strh	r2, [r3, #0]
 8004286:	e041      	b.n	800430c <HAL_PCD_EP_DB_Transmit+0x784>
 8004288:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004290:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800429a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800429e:	b29a      	uxth	r2, r3
 80042a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	e032      	b.n	800430c <HAL_PCD_EP_DB_Transmit+0x784>
 80042a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_PCD_EP_DB_Transmit+0x738>
 80042ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042bc:	3301      	adds	r3, #1
 80042be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	029b      	lsls	r3, r3, #10
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	4313      	orrs	r3, r2
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	e019      	b.n	800430c <HAL_PCD_EP_DB_Transmit+0x784>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d115      	bne.n	800430c <HAL_PCD_EP_DB_Transmit+0x784>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ee:	4413      	add	r3, r2
 80042f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	011a      	lsls	r2, r3, #4
 80042f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fa:	4413      	add	r3, r2
 80042fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004300:	653b      	str	r3, [r7, #80]	@ 0x50
 8004302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004306:	b29a      	uxth	r2, r3
 8004308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800430a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6959      	ldr	r1, [r3, #20]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	895a      	ldrh	r2, [r3, #10]
 8004318:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800431c:	b29b      	uxth	r3, r3
 800431e:	f003 fc40 	bl	8007ba2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800433c:	82bb      	strh	r3, [r7, #20]
 800433e:	8abb      	ldrh	r3, [r7, #20]
 8004340:	f083 0310 	eor.w	r3, r3, #16
 8004344:	82bb      	strh	r3, [r7, #20]
 8004346:	8abb      	ldrh	r3, [r7, #20]
 8004348:	f083 0320 	eor.w	r3, r3, #32
 800434c:	82bb      	strh	r3, [r7, #20]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	8abb      	ldrh	r3, [r7, #20]
 800435e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800436a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800436e:	b29b      	uxth	r3, r3
 8004370:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3790      	adds	r7, #144	@ 0x90
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	817b      	strh	r3, [r7, #10]
 800438a:	4613      	mov	r3, r2
 800438c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800438e:	897b      	ldrh	r3, [r7, #10]
 8004390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800439a:	897b      	ldrh	r3, [r7, #10]
 800439c:	f003 0207 	and.w	r2, r3, #7
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3310      	adds	r3, #16
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e009      	b.n	80043c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043b2:	897a      	ldrh	r2, [r7, #10]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043c6:	893b      	ldrh	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2200      	movs	r2, #0
 80043d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	80da      	strh	r2, [r3, #6]
 80043da:	e00b      	b.n	80043f4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2201      	movs	r2, #1
 80043e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e272      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8087 	beq.w	800452e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004420:	4b92      	ldr	r3, [pc, #584]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b04      	cmp	r3, #4
 800442a:	d00c      	beq.n	8004446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800442c:	4b8f      	ldr	r3, [pc, #572]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b08      	cmp	r3, #8
 8004436:	d112      	bne.n	800445e <HAL_RCC_OscConfig+0x5e>
 8004438:	4b8c      	ldr	r3, [pc, #560]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004444:	d10b      	bne.n	800445e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004446:	4b89      	ldr	r3, [pc, #548]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d06c      	beq.n	800452c <HAL_RCC_OscConfig+0x12c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d168      	bne.n	800452c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e24c      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x76>
 8004468:	4b80      	ldr	r3, [pc, #512]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a7f      	ldr	r2, [pc, #508]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 800446e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	e02e      	b.n	80044d4 <HAL_RCC_OscConfig+0xd4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x98>
 800447e:	4b7b      	ldr	r3, [pc, #492]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a7a      	ldr	r2, [pc, #488]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b78      	ldr	r3, [pc, #480]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a77      	ldr	r2, [pc, #476]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004490:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e01d      	b.n	80044d4 <HAL_RCC_OscConfig+0xd4>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044a0:	d10c      	bne.n	80044bc <HAL_RCC_OscConfig+0xbc>
 80044a2:	4b72      	ldr	r3, [pc, #456]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a71      	ldr	r2, [pc, #452]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80044a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b6f      	ldr	r3, [pc, #444]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a6e      	ldr	r2, [pc, #440]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e00b      	b.n	80044d4 <HAL_RCC_OscConfig+0xd4>
 80044bc:	4b6b      	ldr	r3, [pc, #428]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a6a      	ldr	r2, [pc, #424]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b68      	ldr	r3, [pc, #416]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a67      	ldr	r2, [pc, #412]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80044ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d013      	beq.n	8004504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fd ff7c 	bl	80023d8 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fd ff78 	bl	80023d8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	@ 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e200      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	4b5d      	ldr	r3, [pc, #372]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0xe4>
 8004502:	e014      	b.n	800452e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fd ff68 	bl	80023d8 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800450c:	f7fd ff64 	bl	80023d8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	@ 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e1ec      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451e:	4b53      	ldr	r3, [pc, #332]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x10c>
 800452a:	e000      	b.n	800452e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d063      	beq.n	8004602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800453a:	4b4c      	ldr	r3, [pc, #304]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004546:	4b49      	ldr	r3, [pc, #292]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b08      	cmp	r3, #8
 8004550:	d11c      	bne.n	800458c <HAL_RCC_OscConfig+0x18c>
 8004552:	4b46      	ldr	r3, [pc, #280]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d116      	bne.n	800458c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455e:	4b43      	ldr	r3, [pc, #268]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_RCC_OscConfig+0x176>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d001      	beq.n	8004576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e1c0      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004576:	4b3d      	ldr	r3, [pc, #244]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4939      	ldr	r1, [pc, #228]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458a:	e03a      	b.n	8004602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d020      	beq.n	80045d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004594:	4b36      	ldr	r3, [pc, #216]	@ (8004670 <HAL_RCC_OscConfig+0x270>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459a:	f7fd ff1d 	bl	80023d8 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a2:	f7fd ff19 	bl	80023d8 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e1a1      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b4:	4b2d      	ldr	r3, [pc, #180]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c0:	4b2a      	ldr	r3, [pc, #168]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4927      	ldr	r1, [pc, #156]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	600b      	str	r3, [r1, #0]
 80045d4:	e015      	b.n	8004602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d6:	4b26      	ldr	r3, [pc, #152]	@ (8004670 <HAL_RCC_OscConfig+0x270>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fd fefc 	bl	80023d8 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e4:	f7fd fef8 	bl	80023d8 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e180      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d03a      	beq.n	8004684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d019      	beq.n	800464a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004616:	4b17      	ldr	r3, [pc, #92]	@ (8004674 <HAL_RCC_OscConfig+0x274>)
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461c:	f7fd fedc 	bl	80023d8 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004624:	f7fd fed8 	bl	80023d8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e160      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004636:	4b0d      	ldr	r3, [pc, #52]	@ (800466c <HAL_RCC_OscConfig+0x26c>)
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004642:	2001      	movs	r0, #1
 8004644:	f000 fa9c 	bl	8004b80 <RCC_Delay>
 8004648:	e01c      	b.n	8004684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464a:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <HAL_RCC_OscConfig+0x274>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004650:	f7fd fec2 	bl	80023d8 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004656:	e00f      	b.n	8004678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004658:	f7fd febe 	bl	80023d8 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d908      	bls.n	8004678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e146      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
 8004670:	42420000 	.word	0x42420000
 8004674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	4b92      	ldr	r3, [pc, #584]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e9      	bne.n	8004658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80a6 	beq.w	80047de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004696:	4b8b      	ldr	r3, [pc, #556]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10d      	bne.n	80046be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	4b88      	ldr	r3, [pc, #544]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	4a87      	ldr	r2, [pc, #540]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ac:	61d3      	str	r3, [r2, #28]
 80046ae:	4b85      	ldr	r3, [pc, #532]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ba:	2301      	movs	r3, #1
 80046bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	4b82      	ldr	r3, [pc, #520]	@ (80048c8 <HAL_RCC_OscConfig+0x4c8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d118      	bne.n	80046fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ca:	4b7f      	ldr	r3, [pc, #508]	@ (80048c8 <HAL_RCC_OscConfig+0x4c8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a7e      	ldr	r2, [pc, #504]	@ (80048c8 <HAL_RCC_OscConfig+0x4c8>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fd fe7f 	bl	80023d8 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fd fe7b 	bl	80023d8 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b64      	cmp	r3, #100	@ 0x64
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e103      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	4b75      	ldr	r3, [pc, #468]	@ (80048c8 <HAL_RCC_OscConfig+0x4c8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x312>
 8004704:	4b6f      	ldr	r3, [pc, #444]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	4a6e      	ldr	r2, [pc, #440]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6213      	str	r3, [r2, #32]
 8004710:	e02d      	b.n	800476e <HAL_RCC_OscConfig+0x36e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10c      	bne.n	8004734 <HAL_RCC_OscConfig+0x334>
 800471a:	4b6a      	ldr	r3, [pc, #424]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	4a69      	ldr	r2, [pc, #420]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	6213      	str	r3, [r2, #32]
 8004726:	4b67      	ldr	r3, [pc, #412]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	4a66      	ldr	r2, [pc, #408]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	6213      	str	r3, [r2, #32]
 8004732:	e01c      	b.n	800476e <HAL_RCC_OscConfig+0x36e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b05      	cmp	r3, #5
 800473a:	d10c      	bne.n	8004756 <HAL_RCC_OscConfig+0x356>
 800473c:	4b61      	ldr	r3, [pc, #388]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	4a60      	ldr	r2, [pc, #384]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004742:	f043 0304 	orr.w	r3, r3, #4
 8004746:	6213      	str	r3, [r2, #32]
 8004748:	4b5e      	ldr	r3, [pc, #376]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	4a5d      	ldr	r2, [pc, #372]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6213      	str	r3, [r2, #32]
 8004754:	e00b      	b.n	800476e <HAL_RCC_OscConfig+0x36e>
 8004756:	4b5b      	ldr	r3, [pc, #364]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	4a5a      	ldr	r2, [pc, #360]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	6213      	str	r3, [r2, #32]
 8004762:	4b58      	ldr	r3, [pc, #352]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4a57      	ldr	r2, [pc, #348]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	f023 0304 	bic.w	r3, r3, #4
 800476c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d015      	beq.n	80047a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004776:	f7fd fe2f 	bl	80023d8 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	e00a      	b.n	8004794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477e:	f7fd fe2b 	bl	80023d8 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478c:	4293      	cmp	r3, r2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e0b1      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004794:	4b4b      	ldr	r3, [pc, #300]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0ee      	beq.n	800477e <HAL_RCC_OscConfig+0x37e>
 80047a0:	e014      	b.n	80047cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a2:	f7fd fe19 	bl	80023d8 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fd fe15 	bl	80023d8 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e09b      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c0:	4b40      	ldr	r3, [pc, #256]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ee      	bne.n	80047aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d105      	bne.n	80047de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d2:	4b3c      	ldr	r3, [pc, #240]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	4a3b      	ldr	r2, [pc, #236]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8087 	beq.w	80048f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e8:	4b36      	ldr	r3, [pc, #216]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d061      	beq.n	80048b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d146      	bne.n	800488a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fc:	4b33      	ldr	r3, [pc, #204]	@ (80048cc <HAL_RCC_OscConfig+0x4cc>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fd fde9 	bl	80023d8 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480a:	f7fd fde5 	bl	80023d8 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e06d      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800481c:	4b29      	ldr	r3, [pc, #164]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004830:	d108      	bne.n	8004844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004832:	4b24      	ldr	r3, [pc, #144]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4921      	ldr	r1, [pc, #132]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004844:	4b1f      	ldr	r3, [pc, #124]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a19      	ldr	r1, [r3, #32]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	430b      	orrs	r3, r1
 8004856:	491b      	ldr	r1, [pc, #108]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800485c:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x4cc>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7fd fdb9 	bl	80023d8 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486a:	f7fd fdb5 	bl	80023d8 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e03d      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800487c:	4b11      	ldr	r3, [pc, #68]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x46a>
 8004888:	e035      	b.n	80048f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b10      	ldr	r3, [pc, #64]	@ (80048cc <HAL_RCC_OscConfig+0x4cc>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fd fda2 	bl	80023d8 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fd fd9e 	bl	80023d8 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e026      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048aa:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x498>
 80048b6:	e01e      	b.n	80048f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e019      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40007000 	.word	0x40007000
 80048cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004900 <HAL_RCC_OscConfig+0x500>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d106      	bne.n	80048f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d001      	beq.n	80048f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000

08004904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0d0      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004918:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d910      	bls.n	8004948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b67      	ldr	r3, [pc, #412]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 0207 	bic.w	r2, r3, #7
 800492e:	4965      	ldr	r1, [pc, #404]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b63      	ldr	r3, [pc, #396]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0b8      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004960:	4b59      	ldr	r3, [pc, #356]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a58      	ldr	r2, [pc, #352]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800496a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004978:	4b53      	ldr	r3, [pc, #332]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a52      	ldr	r2, [pc, #328]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b50      	ldr	r3, [pc, #320]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	494d      	ldr	r1, [pc, #308]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004992:	4313      	orrs	r3, r2
 8004994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d040      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	4b47      	ldr	r3, [pc, #284]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d115      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d107      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c2:	4b41      	ldr	r3, [pc, #260]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e073      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e06b      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e2:	4b39      	ldr	r3, [pc, #228]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f023 0203 	bic.w	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	4936      	ldr	r1, [pc, #216]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f4:	f7fd fcf0 	bl	80023d8 <HAL_GetTick>
 80049f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	e00a      	b.n	8004a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049fc:	f7fd fcec 	bl	80023d8 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e053      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 020c 	and.w	r2, r3, #12
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d1eb      	bne.n	80049fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a24:	4b27      	ldr	r3, [pc, #156]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d210      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a32:	4b24      	ldr	r3, [pc, #144]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 0207 	bic.w	r2, r3, #7
 8004a3a:	4922      	ldr	r1, [pc, #136]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b20      	ldr	r3, [pc, #128]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e032      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a60:	4b19      	ldr	r3, [pc, #100]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4916      	ldr	r1, [pc, #88]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	490e      	ldr	r1, [pc, #56]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a92:	f000 f821 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	490a      	ldr	r1, [pc, #40]	@ (8004acc <HAL_RCC_ClockConfig+0x1c8>)
 8004aa4:	5ccb      	ldrb	r3, [r1, r3]
 8004aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aaa:	4a09      	ldr	r2, [pc, #36]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8004aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004aae:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd fc4e 	bl	8002354 <HAL_InitTick>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40022000 	.word	0x40022000
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	0800e1ec 	.word	0x0800e1ec
 8004ad0:	20000014 	.word	0x20000014
 8004ad4:	20000018 	.word	0x20000018

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004af2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d002      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0x30>
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d003      	beq.n	8004b0e <HAL_RCC_GetSysClockFreq+0x36>
 8004b06:	e027      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b08:	4b19      	ldr	r3, [pc, #100]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b0a:	613b      	str	r3, [r7, #16]
      break;
 8004b0c:	e027      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	0c9b      	lsrs	r3, r3, #18
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	4a17      	ldr	r2, [pc, #92]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b18:	5cd3      	ldrb	r3, [r2, r3]
 8004b1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d010      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b26:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	0c5b      	lsrs	r3, r3, #17
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	4a11      	ldr	r2, [pc, #68]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b32:	5cd3      	ldrb	r3, [r2, r3]
 8004b34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a0d      	ldr	r2, [pc, #52]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b3a:	fb03 f202 	mul.w	r2, r3, r2
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e004      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	613b      	str	r3, [r7, #16]
      break;
 8004b56:	e002      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b5a:	613b      	str	r3, [r7, #16]
      break;
 8004b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b5e:	693b      	ldr	r3, [r7, #16]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	007a1200 	.word	0x007a1200
 8004b74:	0800e1fc 	.word	0x0800e1fc
 8004b78:	0800e20c 	.word	0x0800e20c
 8004b7c:	003d0900 	.word	0x003d0900

08004b80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b88:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <RCC_Delay+0x34>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb8 <RCC_Delay+0x38>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	0a5b      	lsrs	r3, r3, #9
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b9c:	bf00      	nop
  }
  while (Delay --);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1e5a      	subs	r2, r3, #1
 8004ba2:	60fa      	str	r2, [r7, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f9      	bne.n	8004b9c <RCC_Delay+0x1c>
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	20000014 	.word	0x20000014
 8004bb8:	10624dd3 	.word	0x10624dd3

08004bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d07d      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bdc:	4b4f      	ldr	r3, [pc, #316]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10d      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be8:	4b4c      	ldr	r3, [pc, #304]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	4a4b      	ldr	r2, [pc, #300]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf2:	61d3      	str	r3, [r2, #28]
 8004bf4:	4b49      	ldr	r3, [pc, #292]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	4b46      	ldr	r3, [pc, #280]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d118      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c10:	4b43      	ldr	r3, [pc, #268]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a42      	ldr	r2, [pc, #264]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1c:	f7fd fbdc 	bl	80023d8 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c22:	e008      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c24:	f7fd fbd8 	bl	80023d8 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	@ 0x64
 8004c30:	d901      	bls.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e06d      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c36:	4b3a      	ldr	r3, [pc, #232]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c42:	4b36      	ldr	r3, [pc, #216]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d02e      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d027      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c60:	4b2e      	ldr	r3, [pc, #184]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c70:	4b2c      	ldr	r3, [pc, #176]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c76:	4a29      	ldr	r2, [pc, #164]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d014      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c86:	f7fd fba7 	bl	80023d8 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8c:	e00a      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8e:	f7fd fba3 	bl	80023d8 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e036      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ee      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4917      	ldr	r1, [pc, #92]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc8:	4b14      	ldr	r3, [pc, #80]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4a13      	ldr	r2, [pc, #76]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	490b      	ldr	r1, [pc, #44]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d008      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cfe:	4b07      	ldr	r3, [pc, #28]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	4904      	ldr	r1, [pc, #16]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40007000 	.word	0x40007000
 8004d24:	42420440 	.word	0x42420440

08004d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e041      	b.n	8004dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fd f998 	bl	8002084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f000 faa6 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d001      	beq.n	8004de0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e032      	b.n	8004e46 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a18      	ldr	r2, [pc, #96]	@ (8004e50 <HAL_TIM_Base_Start+0x88>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00e      	beq.n	8004e10 <HAL_TIM_Base_Start+0x48>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfa:	d009      	beq.n	8004e10 <HAL_TIM_Base_Start+0x48>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a14      	ldr	r2, [pc, #80]	@ (8004e54 <HAL_TIM_Base_Start+0x8c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_TIM_Base_Start+0x48>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a13      	ldr	r2, [pc, #76]	@ (8004e58 <HAL_TIM_Base_Start+0x90>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d111      	bne.n	8004e34 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b06      	cmp	r3, #6
 8004e20:	d010      	beq.n	8004e44 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e32:	e007      	b.n	8004e44 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800

08004e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d001      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e03a      	b.n	8004eea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a18      	ldr	r2, [pc, #96]	@ (8004ef4 <HAL_TIM_Base_Start_IT+0x98>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x58>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x58>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a14      	ldr	r2, [pc, #80]	@ (8004ef8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x58>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a13      	ldr	r2, [pc, #76]	@ (8004efc <HAL_TIM_Base_Start_IT+0xa0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d111      	bne.n	8004ed8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d010      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0201 	orr.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	e007      	b.n	8004ee8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	40012c00 	.word	0x40012c00
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800

08004f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d020      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0202 	mvn.w	r2, #2
 8004f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f998 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f98b 	bl	800526e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f99a 	bl	8005292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d020      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01b      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0204 	mvn.w	r2, #4
 8004f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f972 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f965 	bl	800526e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f974 	bl	8005292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d020      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01b      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0208 	mvn.w	r2, #8
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f94c 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f93f 	bl	800526e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f94e 	bl	8005292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	d020      	beq.n	8005048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01b      	beq.n	8005048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0210 	mvn.w	r2, #16
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2208      	movs	r2, #8
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f926 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f919 	bl	800526e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f928 	bl	8005292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0201 	mvn.w	r2, #1
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fc fc2c 	bl	80018c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fa7f 	bl	800558e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8f8 	bl	80052a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0220 	mvn.w	r2, #32
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa52 	bl	800557c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_TIM_ConfigClockSource+0x1c>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e0b4      	b.n	8005266 <HAL_TIM_ConfigClockSource+0x186>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800511a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005134:	d03e      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513a:	f200 8087 	bhi.w	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005142:	f000 8086 	beq.w	8005252 <HAL_TIM_ConfigClockSource+0x172>
 8005146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800514a:	d87f      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b70      	cmp	r3, #112	@ 0x70
 800514e:	d01a      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0xa6>
 8005150:	2b70      	cmp	r3, #112	@ 0x70
 8005152:	d87b      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b60      	cmp	r3, #96	@ 0x60
 8005156:	d050      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x11a>
 8005158:	2b60      	cmp	r3, #96	@ 0x60
 800515a:	d877      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b50      	cmp	r3, #80	@ 0x50
 800515e:	d03c      	beq.n	80051da <HAL_TIM_ConfigClockSource+0xfa>
 8005160:	2b50      	cmp	r3, #80	@ 0x50
 8005162:	d873      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b40      	cmp	r3, #64	@ 0x40
 8005166:	d058      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x13a>
 8005168:	2b40      	cmp	r3, #64	@ 0x40
 800516a:	d86f      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b30      	cmp	r3, #48	@ 0x30
 800516e:	d064      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005170:	2b30      	cmp	r3, #48	@ 0x30
 8005172:	d86b      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b20      	cmp	r3, #32
 8005176:	d060      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005178:	2b20      	cmp	r3, #32
 800517a:	d867      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d05c      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005180:	2b10      	cmp	r3, #16
 8005182:	d05a      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005184:	e062      	b.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005196:	f000 f974 	bl	8005482 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	609a      	str	r2, [r3, #8]
      break;
 80051b2:	e04f      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051c4:	f000 f95d 	bl	8005482 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051d6:	609a      	str	r2, [r3, #8]
      break;
 80051d8:	e03c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 f8d4 	bl	8005394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2150      	movs	r1, #80	@ 0x50
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f92b 	bl	800544e <TIM_ITRx_SetConfig>
      break;
 80051f8:	e02c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005206:	461a      	mov	r2, r3
 8005208:	f000 f8f2 	bl	80053f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2160      	movs	r1, #96	@ 0x60
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f91b 	bl	800544e <TIM_ITRx_SetConfig>
      break;
 8005218:	e01c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005226:	461a      	mov	r2, r3
 8005228:	f000 f8b4 	bl	8005394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2140      	movs	r1, #64	@ 0x40
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f90b 	bl	800544e <TIM_ITRx_SetConfig>
      break;
 8005238:	e00c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f000 f902 	bl	800544e <TIM_ITRx_SetConfig>
      break;
 800524a:	e003      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
      break;
 8005250:	e000      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005252:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005264:	7bfb      	ldrb	r3, [r7, #15]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr

08005292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr
	...

080052b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005388 <TIM_Base_SetConfig+0xd0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <TIM_Base_SetConfig+0x30>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d6:	d007      	beq.n	80052e8 <TIM_Base_SetConfig+0x30>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a2c      	ldr	r2, [pc, #176]	@ (800538c <TIM_Base_SetConfig+0xd4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0x30>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005390 <TIM_Base_SetConfig+0xd8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d108      	bne.n	80052fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a22      	ldr	r2, [pc, #136]	@ (8005388 <TIM_Base_SetConfig+0xd0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00b      	beq.n	800531a <TIM_Base_SetConfig+0x62>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005308:	d007      	beq.n	800531a <TIM_Base_SetConfig+0x62>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a1f      	ldr	r2, [pc, #124]	@ (800538c <TIM_Base_SetConfig+0xd4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d003      	beq.n	800531a <TIM_Base_SetConfig+0x62>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a1e      	ldr	r2, [pc, #120]	@ (8005390 <TIM_Base_SetConfig+0xd8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d108      	bne.n	800532c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a0d      	ldr	r2, [pc, #52]	@ (8005388 <TIM_Base_SetConfig+0xd0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d103      	bne.n	8005360 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f023 0201 	bic.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	611a      	str	r2, [r3, #16]
  }
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800

08005394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f023 0201 	bic.w	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f023 030a 	bic.w	r3, r3, #10
 80053d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	621a      	str	r2, [r3, #32]
}
 80053e6:	bf00      	nop
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr

080053f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0210 	bic.w	r2, r3, #16
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800541a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	031b      	lsls	r3, r3, #12
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800542c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	621a      	str	r2, [r3, #32]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800544e:	b480      	push	{r7}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	f043 0307 	orr.w	r3, r3, #7
 8005470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	609a      	str	r2, [r3, #8]
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005482:	b480      	push	{r7}
 8005484:	b087      	sub	sp, #28
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800549c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	021a      	lsls	r2, r3, #8
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	609a      	str	r2, [r3, #8]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e046      	b.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a16      	ldr	r2, [pc, #88]	@ (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005524:	d009      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a12      	ldr	r2, [pc, #72]	@ (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a10      	ldr	r2, [pc, #64]	@ (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10c      	bne.n	8005554 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	4313      	orrs	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800

0800557c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr

0800558e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr

080055a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	4638      	mov	r0, r7
 80055aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr

080055ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b085      	sub	sp, #20
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055ca:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80055ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055ee:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80055f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	b29b      	uxth	r3, r3
 8005604:	4013      	ands	r3, r2
 8005606:	b29a      	uxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	4638      	mov	r0, r7
 800563c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr

0800566c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800566c:	b480      	push	{r7}
 800566e:	b09d      	sub	sp, #116	@ 0x74
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800568e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005692:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	78db      	ldrb	r3, [r3, #3]
 800569a:	2b03      	cmp	r3, #3
 800569c:	d81f      	bhi.n	80056de <USB_ActivateEndpoint+0x72>
 800569e:	a201      	add	r2, pc, #4	@ (adr r2, 80056a4 <USB_ActivateEndpoint+0x38>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056e7 	.word	0x080056e7
 80056b0:	080056c3 	.word	0x080056c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80056b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80056b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80056c0:	e012      	b.n	80056e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80056c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80056c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80056ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80056ce:	e00b      	b.n	80056e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80056d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80056dc:	e004      	b.n	80056e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80056e4:	e000      	b.n	80056e8 <USB_ActivateEndpoint+0x7c>
      break;
 80056e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	441a      	add	r2, r3
 80056f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80056f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005706:	b29b      	uxth	r3, r3
 8005708:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800571c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005720:	b29b      	uxth	r3, r3
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	7812      	ldrb	r2, [r2, #0]
 8005726:	4313      	orrs	r3, r2
 8005728:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800573a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800574a:	b29b      	uxth	r3, r3
 800574c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	7b1b      	ldrb	r3, [r3, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 8178 	bne.w	8005a48 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8084 	beq.w	800586a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800576c:	b29b      	uxth	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	4413      	add	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	011a      	lsls	r2, r3, #4
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	88db      	ldrh	r3, [r3, #6]
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	b29b      	uxth	r3, r3
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	827b      	strh	r3, [r7, #18]
 80057a4:	8a7b      	ldrh	r3, [r7, #18]
 80057a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d01b      	beq.n	80057e6 <USB_ActivateEndpoint+0x17a>
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c4:	823b      	strh	r3, [r7, #16]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	441a      	add	r2, r3
 80057d0:	8a3b      	ldrh	r3, [r7, #16]
 80057d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	78db      	ldrb	r3, [r3, #3]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d020      	beq.n	8005830 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005804:	81bb      	strh	r3, [r7, #12]
 8005806:	89bb      	ldrh	r3, [r7, #12]
 8005808:	f083 0320 	eor.w	r3, r3, #32
 800580c:	81bb      	strh	r3, [r7, #12]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	89bb      	ldrh	r3, [r7, #12]
 800581a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800581e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582a:	b29b      	uxth	r3, r3
 800582c:	8013      	strh	r3, [r2, #0]
 800582e:	e2d5      	b.n	8005ddc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005846:	81fb      	strh	r3, [r7, #14]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	89fb      	ldrh	r3, [r7, #14]
 8005854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800585c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005864:	b29b      	uxth	r3, r3
 8005866:	8013      	strh	r3, [r2, #0]
 8005868:	e2b8      	b.n	8005ddc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	633b      	str	r3, [r7, #48]	@ 0x30
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005874:	b29b      	uxth	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	4413      	add	r3, r2
 800587c:	633b      	str	r3, [r7, #48]	@ 0x30
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	011a      	lsls	r2, r3, #4
 8005884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005886:	4413      	add	r3, r2
 8005888:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800588c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	88db      	ldrh	r3, [r3, #6]
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	b29b      	uxth	r3, r3
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	4413      	add	r3, r2
 80058b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	011a      	lsls	r2, r3, #4
 80058b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ba:	4413      	add	r3, r2
 80058bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80058d8:	d91d      	bls.n	8005916 <USB_ActivateEndpoint+0x2aa>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d102      	bne.n	80058f4 <USB_ActivateEndpoint+0x288>
 80058ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058f0:	3b01      	subs	r3, #1
 80058f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	029b      	lsls	r3, r3, #10
 8005900:	b29b      	uxth	r3, r3
 8005902:	4313      	orrs	r3, r2
 8005904:	b29b      	uxth	r3, r3
 8005906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590e:	b29a      	uxth	r2, r3
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e026      	b.n	8005964 <USB_ActivateEndpoint+0x2f8>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <USB_ActivateEndpoint+0x2c8>
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592c:	b29a      	uxth	r2, r3
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	e017      	b.n	8005964 <USB_ActivateEndpoint+0x2f8>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <USB_ActivateEndpoint+0x2e2>
 8005948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800594a:	3301      	adds	r3, #1
 800594c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29a      	uxth	r2, r3
 8005954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005956:	b29b      	uxth	r3, r3
 8005958:	029b      	lsls	r3, r3, #10
 800595a:	b29b      	uxth	r3, r3
 800595c:	4313      	orrs	r3, r2
 800595e:	b29a      	uxth	r2, r3
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005972:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01b      	beq.n	80059b4 <USB_ActivateEndpoint+0x348>
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800598e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005992:	843b      	strh	r3, [r7, #32]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	441a      	add	r2, r3
 800599e:	8c3b      	ldrh	r3, [r7, #32]
 80059a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d124      	bne.n	8005a06 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d2:	83bb      	strh	r3, [r7, #28]
 80059d4:	8bbb      	ldrh	r3, [r7, #28]
 80059d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80059da:	83bb      	strh	r3, [r7, #28]
 80059dc:	8bbb      	ldrh	r3, [r7, #28]
 80059de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059e2:	83bb      	strh	r3, [r7, #28]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	8bbb      	ldrh	r3, [r7, #28]
 80059f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	8013      	strh	r3, [r2, #0]
 8005a04:	e1ea      	b.n	8005ddc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1c:	83fb      	strh	r3, [r7, #30]
 8005a1e:	8bfb      	ldrh	r3, [r7, #30]
 8005a20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a24:	83fb      	strh	r3, [r7, #30]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	8bfb      	ldrh	r3, [r7, #30]
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]
 8005a46:	e1c9      	b.n	8005ddc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	78db      	ldrb	r3, [r3, #3]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d11e      	bne.n	8005a8e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a66:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	441a      	add	r2, r3
 8005a74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a80:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	8013      	strh	r3, [r2, #0]
 8005a8c:	e01d      	b.n	8005aca <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ada:	4413      	add	r3, r2
 8005adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	011a      	lsls	r2, r3, #4
 8005ae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	891b      	ldrh	r3, [r3, #8]
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b0e:	4413      	add	r3, r2
 8005b10:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	011a      	lsls	r2, r3, #4
 8005b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005b20:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	895b      	ldrh	r3, [r3, #10]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b30:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 8093 	bne.w	8005c62 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005b4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <USB_ActivateEndpoint+0x524>
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005b9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01b      	beq.n	8005be0 <USB_ActivateEndpoint+0x574>
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bbe:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	441a      	add	r2, r3
 8005bca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005bf8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005bfa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005bfe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005c00:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005c02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c06:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	441a      	add	r2, r3
 8005c4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	8013      	strh	r3, [r2, #0]
 8005c60:	e0bc      	b.n	8005ddc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005c72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01d      	beq.n	8005cba <USB_ActivateEndpoint+0x64e>
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c94:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005cca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01d      	beq.n	8005d12 <USB_ActivateEndpoint+0x6a6>
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	78db      	ldrb	r3, [r3, #3]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d024      	beq.n	8005d64 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d30:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005d34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005d38:	f083 0320 	eor.w	r3, r3, #32
 8005d3c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]
 8005d62:	e01d      	b.n	8005da0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d7a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	441a      	add	r2, r3
 8005d88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005ddc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3774      	adds	r7, #116	@ 0x74
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop

08005dec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b08d      	sub	sp, #52	@ 0x34
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	7b1b      	ldrb	r3, [r3, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f040 808e 	bne.w	8005f1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d044      	beq.n	8005e92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	81bb      	strh	r3, [r7, #12]
 8005e16:	89bb      	ldrh	r3, [r7, #12]
 8005e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01b      	beq.n	8005e58 <USB_DeactivateEndpoint+0x6c>
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e36:	817b      	strh	r3, [r7, #10]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	897b      	ldrh	r3, [r7, #10]
 8005e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e6e:	813b      	strh	r3, [r7, #8]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	441a      	add	r2, r3
 8005e7a:	893b      	ldrh	r3, [r7, #8]
 8005e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	8013      	strh	r3, [r2, #0]
 8005e90:	e192      	b.n	80061b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	827b      	strh	r3, [r7, #18]
 8005ea0:	8a7b      	ldrh	r3, [r7, #18]
 8005ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01b      	beq.n	8005ee2 <USB_DeactivateEndpoint+0xf6>
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec0:	823b      	strh	r3, [r7, #16]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	8a3b      	ldrh	r3, [r7, #16]
 8005ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ed6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef8:	81fb      	strh	r3, [r7, #14]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	89fb      	ldrh	r3, [r7, #14]
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]
 8005f1a:	e14d      	b.n	80061b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f040 80a5 	bne.w	8006070 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	843b      	strh	r3, [r7, #32]
 8005f34:	8c3b      	ldrh	r3, [r7, #32]
 8005f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d01b      	beq.n	8005f76 <USB_DeactivateEndpoint+0x18a>
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f54:	83fb      	strh	r3, [r7, #30]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	8bfb      	ldrh	r3, [r7, #30]
 8005f62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	83bb      	strh	r3, [r7, #28]
 8005f84:	8bbb      	ldrh	r3, [r7, #28]
 8005f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01b      	beq.n	8005fc6 <USB_DeactivateEndpoint+0x1da>
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa4:	837b      	strh	r3, [r7, #26]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	441a      	add	r2, r3
 8005fb0:	8b7b      	ldrh	r3, [r7, #26]
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fdc:	833b      	strh	r3, [r7, #24]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	441a      	add	r2, r3
 8005fe8:	8b3b      	ldrh	r3, [r7, #24]
 8005fea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006014:	82fb      	strh	r3, [r7, #22]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	441a      	add	r2, r3
 8006020:	8afb      	ldrh	r3, [r7, #22]
 8006022:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006026:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800602a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800602e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006032:	b29b      	uxth	r3, r3
 8006034:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800604c:	82bb      	strh	r3, [r7, #20]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	8abb      	ldrh	r3, [r7, #20]
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
 800606e:	e0a3      	b.n	80061b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800607e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01b      	beq.n	80060c0 <USB_DeactivateEndpoint+0x2d4>
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800609a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800609e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80060ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80060d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01b      	beq.n	8006110 <USB_DeactivateEndpoint+0x324>
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	441a      	add	r2, r3
 80060fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80060fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006108:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800610c:	b29b      	uxth	r3, r3
 800610e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006126:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	441a      	add	r2, r3
 8006132:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006134:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006138:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800613c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006144:	b29b      	uxth	r3, r3
 8006146:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800615a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800615e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	441a      	add	r2, r3
 800616a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800616c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006170:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617c:	b29b      	uxth	r3, r3
 800617e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006196:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	441a      	add	r2, r3
 80061a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3734      	adds	r7, #52	@ 0x34
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b0c2      	sub	sp, #264	@ 0x108
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d2:	6018      	str	r0, [r3, #0]
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	f040 86b7 	bne.w	8006f5e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	429a      	cmp	r2, r3
 800620a:	d908      	bls.n	800621e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800621c:	e007      	b.n	800622e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800621e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800622e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	7b1b      	ldrb	r3, [r3, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d13a      	bne.n	80062b4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800623e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6959      	ldr	r1, [r3, #20]
 800624a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	88da      	ldrh	r2, [r3, #6]
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	b29b      	uxth	r3, r3
 800625c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006260:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006264:	6800      	ldr	r0, [r0, #0]
 8006266:	f001 fc9c 	bl	8007ba2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006284:	b29b      	uxth	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4413      	add	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	011a      	lsls	r2, r3, #4
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4413      	add	r3, r2
 80062a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	801a      	strh	r2, [r3, #0]
 80062b0:	f000 be1f 	b.w	8006ef2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	78db      	ldrb	r3, [r3, #3]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	f040 8462 	bne.w	8006b8a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80062c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6a1a      	ldr	r2, [r3, #32]
 80062d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	429a      	cmp	r2, r3
 80062e0:	f240 83df 	bls.w	8006aa2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800630a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800630e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	441a      	add	r2, r3
 8006328:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006334:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6a1a      	ldr	r2, [r3, #32]
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800635e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 81c7 	beq.w	8006714 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	633b      	str	r3, [r7, #48]	@ 0x30
 8006392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d177      	bne.n	8006492 <USB_EPStartXfer+0x2ce>
 80063a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063bc:	b29b      	uxth	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	4413      	add	r3, r2
 80063c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	011a      	lsls	r2, r3, #4
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	4413      	add	r3, r2
 80063d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80063f4:	d921      	bls.n	800643a <USB_EPStartXfer+0x276>
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	2b00      	cmp	r3, #0
 800640a:	d104      	bne.n	8006416 <USB_EPStartXfer+0x252>
 800640c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006410:	3b01      	subs	r3, #1
 8006412:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29a      	uxth	r2, r3
 800641c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006420:	b29b      	uxth	r3, r3
 8006422:	029b      	lsls	r3, r3, #10
 8006424:	b29b      	uxth	r3, r3
 8006426:	4313      	orrs	r3, r2
 8006428:	b29b      	uxth	r3, r3
 800642a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006432:	b29a      	uxth	r2, r3
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	801a      	strh	r2, [r3, #0]
 8006438:	e050      	b.n	80064dc <USB_EPStartXfer+0x318>
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <USB_EPStartXfer+0x294>
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800644c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006450:	b29a      	uxth	r2, r3
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	801a      	strh	r2, [r3, #0]
 8006456:	e041      	b.n	80064dc <USB_EPStartXfer+0x318>
 8006458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645c:	085b      	lsrs	r3, r3, #1
 800645e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d004      	beq.n	8006478 <USB_EPStartXfer+0x2b4>
 800646e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006472:	3301      	adds	r3, #1
 8006474:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29a      	uxth	r2, r3
 800647e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006482:	b29b      	uxth	r3, r3
 8006484:	029b      	lsls	r3, r3, #10
 8006486:	b29b      	uxth	r3, r3
 8006488:	4313      	orrs	r3, r2
 800648a:	b29a      	uxth	r2, r3
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	e024      	b.n	80064dc <USB_EPStartXfer+0x318>
 8006492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d11c      	bne.n	80064dc <USB_EPStartXfer+0x318>
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	4413      	add	r3, r2
 80064b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	011a      	lsls	r2, r3, #4
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	4413      	add	r3, r2
 80064cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	895b      	ldrh	r3, [r3, #10]
 80064e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6959      	ldr	r1, [r3, #20]
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006502:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006506:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800650a:	6800      	ldr	r0, [r0, #0]
 800650c:	f001 fb49 	bl	8007ba2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695a      	ldr	r2, [r3, #20]
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006520:	441a      	add	r2, r3
 8006522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800652e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6a1a      	ldr	r2, [r3, #32]
 800653a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	429a      	cmp	r2, r3
 8006548:	d90f      	bls.n	800656a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800654a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800654e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6a1a      	ldr	r2, [r3, #32]
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655a:	1ad2      	subs	r2, r2, r3
 800655c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	621a      	str	r2, [r3, #32]
 8006568:	e00e      	b.n	8006588 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800656a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800657a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2200      	movs	r2, #0
 8006586:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d177      	bne.n	8006688 <USB_EPStartXfer+0x4c4>
 8006598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	4413      	add	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	011a      	lsls	r2, r3, #4
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	4413      	add	r3, r2
 80065ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065de:	b29a      	uxth	r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80065ea:	d921      	bls.n	8006630 <USB_EPStartXfer+0x46c>
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f0:	095b      	lsrs	r3, r3, #5
 80065f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d104      	bne.n	800660c <USB_EPStartXfer+0x448>
 8006602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006606:	3b01      	subs	r3, #1
 8006608:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29a      	uxth	r2, r3
 8006612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006616:	b29b      	uxth	r3, r3
 8006618:	029b      	lsls	r3, r3, #10
 800661a:	b29b      	uxth	r3, r3
 800661c:	4313      	orrs	r3, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006628:	b29a      	uxth	r2, r3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	e056      	b.n	80066de <USB_EPStartXfer+0x51a>
 8006630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <USB_EPStartXfer+0x48a>
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006646:	b29a      	uxth	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	e047      	b.n	80066de <USB_EPStartXfer+0x51a>
 800664e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <USB_EPStartXfer+0x4aa>
 8006664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006668:	3301      	adds	r3, #1
 800666a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29a      	uxth	r2, r3
 8006674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006678:	b29b      	uxth	r3, r3
 800667a:	029b      	lsls	r3, r3, #10
 800667c:	b29b      	uxth	r3, r3
 800667e:	4313      	orrs	r3, r2
 8006680:	b29a      	uxth	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	e02a      	b.n	80066de <USB_EPStartXfer+0x51a>
 8006688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d122      	bne.n	80066de <USB_EPStartXfer+0x51a>
 8006698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	623b      	str	r3, [r7, #32]
 80066a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	4413      	add	r3, r2
 80066ba:	623b      	str	r3, [r7, #32]
 80066bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	011a      	lsls	r2, r3, #4
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d8:	b29a      	uxth	r2, r3
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	891b      	ldrh	r3, [r3, #8]
 80066ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6959      	ldr	r1, [r3, #20]
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006704:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006708:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800670c:	6800      	ldr	r0, [r0, #0]
 800670e:	f001 fa48 	bl	8007ba2 <USB_WritePMA>
 8006712:	e3ee      	b.n	8006ef2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d177      	bne.n	8006814 <USB_EPStartXfer+0x650>
 8006724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006728:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006734:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800673e:	b29b      	uxth	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006744:	4413      	add	r3, r2
 8006746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	011a      	lsls	r2, r3, #4
 8006756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006758:	4413      	add	r3, r2
 800675a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800675e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800676a:	b29a      	uxth	r2, r3
 800676c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800676e:	801a      	strh	r2, [r3, #0]
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	2b3e      	cmp	r3, #62	@ 0x3e
 8006776:	d921      	bls.n	80067bc <USB_EPStartXfer+0x5f8>
 8006778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	2b00      	cmp	r3, #0
 800678c:	d104      	bne.n	8006798 <USB_EPStartXfer+0x5d4>
 800678e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006792:	3b01      	subs	r3, #1
 8006794:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29a      	uxth	r2, r3
 800679e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	029b      	lsls	r3, r3, #10
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	4313      	orrs	r3, r2
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	e056      	b.n	800686a <USB_EPStartXfer+0x6a6>
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <USB_EPStartXfer+0x616>
 80067c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	e047      	b.n	800686a <USB_EPStartXfer+0x6a6>
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067de:	085b      	lsrs	r3, r3, #1
 80067e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <USB_EPStartXfer+0x636>
 80067f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067f4:	3301      	adds	r3, #1
 80067f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80067fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29a      	uxth	r2, r3
 8006800:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006804:	b29b      	uxth	r3, r3
 8006806:	029b      	lsls	r3, r3, #10
 8006808:	b29b      	uxth	r3, r3
 800680a:	4313      	orrs	r3, r2
 800680c:	b29a      	uxth	r2, r3
 800680e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006810:	801a      	strh	r2, [r3, #0]
 8006812:	e02a      	b.n	800686a <USB_EPStartXfer+0x6a6>
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	785b      	ldrb	r3, [r3, #1]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d122      	bne.n	800686a <USB_EPStartXfer+0x6a6>
 8006824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006828:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006834:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800683e:	b29b      	uxth	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006844:	4413      	add	r3, r2
 8006846:	653b      	str	r3, [r7, #80]	@ 0x50
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	011a      	lsls	r2, r3, #4
 8006856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006858:	4413      	add	r3, r2
 800685a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800685e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006864:	b29a      	uxth	r2, r3
 8006866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006868:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800686a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	891b      	ldrh	r3, [r3, #8]
 8006876:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800687a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6959      	ldr	r1, [r3, #20]
 8006886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688a:	b29b      	uxth	r3, r3
 800688c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006890:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006894:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006898:	6800      	ldr	r0, [r0, #0]
 800689a:	f001 f982 	bl	8007ba2 <USB_WritePMA>
            ep->xfer_buff += len;
 800689e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695a      	ldr	r2, [r3, #20]
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ae:	441a      	add	r2, r3
 80068b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6a1a      	ldr	r2, [r3, #32]
 80068c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d90f      	bls.n	80068f8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6a1a      	ldr	r2, [r3, #32]
 80068e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e8:	1ad2      	subs	r2, r2, r3
 80068ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	621a      	str	r2, [r3, #32]
 80068f6:	e00e      	b.n	8006916 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2200      	movs	r2, #0
 8006914:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	643b      	str	r3, [r7, #64]	@ 0x40
 8006922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	785b      	ldrb	r3, [r3, #1]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d177      	bne.n	8006a22 <USB_EPStartXfer+0x85e>
 8006932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006936:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800693e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800694c:	b29b      	uxth	r3, r3
 800694e:	461a      	mov	r2, r3
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	4413      	add	r3, r2
 8006954:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	011a      	lsls	r2, r3, #4
 8006964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006966:	4413      	add	r3, r2
 8006968:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800696c:	637b      	str	r3, [r7, #52]	@ 0x34
 800696e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006978:	b29a      	uxth	r2, r3
 800697a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006982:	2b3e      	cmp	r3, #62	@ 0x3e
 8006984:	d921      	bls.n	80069ca <USB_EPStartXfer+0x806>
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006994:	f003 031f 	and.w	r3, r3, #31
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <USB_EPStartXfer+0x7e2>
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a0:	3b01      	subs	r3, #1
 80069a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80069a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	029b      	lsls	r3, r3, #10
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	4313      	orrs	r3, r2
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	e050      	b.n	8006a6c <USB_EPStartXfer+0x8a8>
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <USB_EPStartXfer+0x824>
 80069d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	e041      	b.n	8006a6c <USB_EPStartXfer+0x8a8>
 80069e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ec:	085b      	lsrs	r3, r3, #1
 80069ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80069f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <USB_EPStartXfer+0x844>
 80069fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a02:	3301      	adds	r3, #1
 8006a04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	029b      	lsls	r3, r3, #10
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	e024      	b.n	8006a6c <USB_EPStartXfer+0x8a8>
 8006a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d11c      	bne.n	8006a6c <USB_EPStartXfer+0x8a8>
 8006a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a46:	4413      	add	r3, r2
 8006a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	011a      	lsls	r2, r3, #4
 8006a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	895b      	ldrh	r3, [r3, #10]
 8006a78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6959      	ldr	r1, [r3, #20]
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a9a:	6800      	ldr	r0, [r0, #0]
 8006a9c:	f001 f881 	bl	8007ba2 <USB_WritePMA>
 8006aa0:	e227      	b.n	8006ef2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	441a      	add	r2, r3
 8006af6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b2e:	4413      	add	r3, r2
 8006b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	011a      	lsls	r2, r3, #4
 8006b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b42:	4413      	add	r3, r2
 8006b44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	891b      	ldrh	r3, [r3, #8]
 8006b60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6959      	ldr	r1, [r3, #20]
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b7e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b82:	6800      	ldr	r0, [r0, #0]
 8006b84:	f001 f80d 	bl	8007ba2 <USB_WritePMA>
 8006b88:	e1b3      	b.n	8006ef2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6a1a      	ldr	r2, [r3, #32]
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9a:	1ad2      	subs	r2, r2, r3
 8006b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 80c6 	beq.w	8006d5c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d177      	bne.n	8006cdc <USB_EPStartXfer+0xb18>
 8006bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c0c:	4413      	add	r3, r2
 8006c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	011a      	lsls	r2, r3, #4
 8006c1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c20:	4413      	add	r3, r2
 8006c22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c26:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c3e:	d921      	bls.n	8006c84 <USB_EPStartXfer+0xac0>
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c44:	095b      	lsrs	r3, r3, #5
 8006c46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4e:	f003 031f 	and.w	r3, r3, #31
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <USB_EPStartXfer+0xa9c>
 8006c56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	029b      	lsls	r3, r3, #10
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	4313      	orrs	r3, r2
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e050      	b.n	8006d26 <USB_EPStartXfer+0xb62>
 8006c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <USB_EPStartXfer+0xade>
 8006c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c9e:	801a      	strh	r2, [r3, #0]
 8006ca0:	e041      	b.n	8006d26 <USB_EPStartXfer+0xb62>
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca6:	085b      	lsrs	r3, r3, #1
 8006ca8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <USB_EPStartXfer+0xafe>
 8006cb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006cc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	029b      	lsls	r3, r3, #10
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	e024      	b.n	8006d26 <USB_EPStartXfer+0xb62>
 8006cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d11c      	bne.n	8006d26 <USB_EPStartXfer+0xb62>
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d00:	4413      	add	r3, r2
 8006d02:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	011a      	lsls	r2, r3, #4
 8006d12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d14:	4413      	add	r3, r2
 8006d16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	895b      	ldrh	r3, [r3, #10]
 8006d32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6959      	ldr	r1, [r3, #20]
 8006d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d54:	6800      	ldr	r0, [r0, #0]
 8006d56:	f000 ff24 	bl	8007ba2 <USB_WritePMA>
 8006d5a:	e0ca      	b.n	8006ef2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d177      	bne.n	8006e5c <USB_EPStartXfer+0xc98>
 8006d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d8c:	4413      	add	r3, r2
 8006d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	011a      	lsls	r2, r3, #4
 8006d9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006da0:	4413      	add	r3, r2
 8006da2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006da6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dbe:	d921      	bls.n	8006e04 <USB_EPStartXfer+0xc40>
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dce:	f003 031f 	and.w	r3, r3, #31
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d104      	bne.n	8006de0 <USB_EPStartXfer+0xc1c>
 8006dd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006de0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	029b      	lsls	r3, r3, #10
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	4313      	orrs	r3, r2
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	e05c      	b.n	8006ebe <USB_EPStartXfer+0xcfa>
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <USB_EPStartXfer+0xc5e>
 8006e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	e04d      	b.n	8006ebe <USB_EPStartXfer+0xcfa>
 8006e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <USB_EPStartXfer+0xc7e>
 8006e38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	029b      	lsls	r3, r3, #10
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	4313      	orrs	r3, r2
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	e030      	b.n	8006ebe <USB_EPStartXfer+0xcfa>
 8006e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d128      	bne.n	8006ebe <USB_EPStartXfer+0xcfa>
 8006e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e90:	4413      	add	r3, r2
 8006e92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	011a      	lsls	r2, r3, #4
 8006ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006eae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ebc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	891b      	ldrh	r3, [r3, #8]
 8006eca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6959      	ldr	r1, [r3, #20]
 8006eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ee4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ee8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006eec:	6800      	ldr	r0, [r0, #0]
 8006eee:	f000 fe58 	bl	8007ba2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f18:	817b      	strh	r3, [r7, #10]
 8006f1a:	897b      	ldrh	r3, [r7, #10]
 8006f1c:	f083 0310 	eor.w	r3, r3, #16
 8006f20:	817b      	strh	r3, [r7, #10]
 8006f22:	897b      	ldrh	r3, [r7, #10]
 8006f24:	f083 0320 	eor.w	r3, r3, #32
 8006f28:	817b      	strh	r3, [r7, #10]
 8006f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	441a      	add	r2, r3
 8006f44:	897b      	ldrh	r3, [r7, #10]
 8006f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	8013      	strh	r3, [r2, #0]
 8006f5a:	f000 bcde 	b.w	800791a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	7b1b      	ldrb	r3, [r3, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 80bb 	bne.w	80070e6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699a      	ldr	r2, [r3, #24]
 8006f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d917      	bls.n	8006fbc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699a      	ldr	r2, [r3, #24]
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fac:	1ad2      	subs	r2, r2, r3
 8006fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	619a      	str	r2, [r3, #24]
 8006fba:	e00e      	b.n	8006fda <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ffe:	4413      	add	r3, r2
 8007000:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	011a      	lsls	r2, r3, #4
 8007012:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007016:	4413      	add	r3, r2
 8007018:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800701c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800702c:	b29a      	uxth	r2, r3
 800702e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007038:	2b3e      	cmp	r3, #62	@ 0x3e
 800703a:	d924      	bls.n	8007086 <USB_EPStartXfer+0xec2>
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <USB_EPStartXfer+0xe98>
 8007052:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007056:	3b01      	subs	r3, #1
 8007058:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800705c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29a      	uxth	r2, r3
 8007064:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007068:	b29b      	uxth	r3, r3
 800706a:	029b      	lsls	r3, r3, #10
 800706c:	b29b      	uxth	r3, r3
 800706e:	4313      	orrs	r3, r2
 8007070:	b29b      	uxth	r3, r3
 8007072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707a:	b29a      	uxth	r2, r3
 800707c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	f000 bc10 	b.w	80078a6 <USB_EPStartXfer+0x16e2>
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10c      	bne.n	80070a8 <USB_EPStartXfer+0xee4>
 800708e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800709a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709e:	b29a      	uxth	r2, r3
 80070a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070a4:	801a      	strh	r2, [r3, #0]
 80070a6:	e3fe      	b.n	80078a6 <USB_EPStartXfer+0x16e2>
 80070a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ac:	085b      	lsrs	r3, r3, #1
 80070ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <USB_EPStartXfer+0xf04>
 80070be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80070c2:	3301      	adds	r3, #1
 80070c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	029b      	lsls	r3, r3, #10
 80070d8:	b29b      	uxth	r3, r3
 80070da:	4313      	orrs	r3, r2
 80070dc:	b29a      	uxth	r2, r3
 80070de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	e3df      	b.n	80078a6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80070e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	78db      	ldrb	r3, [r3, #3]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	f040 8218 	bne.w	8007528 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f040 809d 	bne.w	8007244 <USB_EPStartXfer+0x1080>
 800710a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007126:	b29b      	uxth	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800712e:	4413      	add	r3, r2
 8007130:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	011a      	lsls	r2, r3, #4
 8007142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007146:	4413      	add	r3, r2
 8007148:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800714c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800715c:	b29a      	uxth	r2, r3
 800715e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b3e      	cmp	r3, #62	@ 0x3e
 8007172:	d92b      	bls.n	80071cc <USB_EPStartXfer+0x1008>
 8007174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <USB_EPStartXfer+0xfe0>
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719e:	3b01      	subs	r3, #1
 80071a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	029b      	lsls	r3, r3, #10
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	e070      	b.n	80072ae <USB_EPStartXfer+0x10ea>
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10c      	bne.n	80071f6 <USB_EPStartXfer+0x1032>
 80071dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071f2:	801a      	strh	r2, [r3, #0]
 80071f4:	e05b      	b.n	80072ae <USB_EPStartXfer+0x10ea>
 80071f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <USB_EPStartXfer+0x1062>
 800721c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007220:	3301      	adds	r3, #1
 8007222:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29a      	uxth	r2, r3
 800722e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007232:	b29b      	uxth	r3, r3
 8007234:	029b      	lsls	r3, r3, #10
 8007236:	b29b      	uxth	r3, r3
 8007238:	4313      	orrs	r3, r2
 800723a:	b29a      	uxth	r2, r3
 800723c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e034      	b.n	80072ae <USB_EPStartXfer+0x10ea>
 8007244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d12c      	bne.n	80072ae <USB_EPStartXfer+0x10ea>
 8007254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007270:	b29b      	uxth	r3, r3
 8007272:	461a      	mov	r2, r3
 8007274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007278:	4413      	add	r3, r2
 800727a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	011a      	lsls	r2, r3, #4
 800728c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007290:	4413      	add	r3, r2
 8007292:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007296:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	785b      	ldrb	r3, [r3, #1]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f040 809d 	bne.w	8007408 <USB_EPStartXfer+0x1244>
 80072ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072f2:	4413      	add	r3, r2
 80072f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	011a      	lsls	r2, r3, #4
 8007306:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800730a:	4413      	add	r3, r2
 800730c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	b29b      	uxth	r3, r3
 800731c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007320:	b29a      	uxth	r2, r3
 8007322:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b3e      	cmp	r3, #62	@ 0x3e
 8007336:	d92b      	bls.n	8007390 <USB_EPStartXfer+0x11cc>
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	2b00      	cmp	r3, #0
 800735c:	d104      	bne.n	8007368 <USB_EPStartXfer+0x11a4>
 800735e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007362:	3b01      	subs	r3, #1
 8007364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007368:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29a      	uxth	r2, r3
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007374:	b29b      	uxth	r3, r3
 8007376:	029b      	lsls	r3, r3, #10
 8007378:	b29b      	uxth	r3, r3
 800737a:	4313      	orrs	r3, r2
 800737c:	b29b      	uxth	r3, r3
 800737e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007386:	b29a      	uxth	r2, r3
 8007388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800738c:	801a      	strh	r2, [r3, #0]
 800738e:	e069      	b.n	8007464 <USB_EPStartXfer+0x12a0>
 8007390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10c      	bne.n	80073ba <USB_EPStartXfer+0x11f6>
 80073a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073b6:	801a      	strh	r2, [r3, #0]
 80073b8:	e054      	b.n	8007464 <USB_EPStartXfer+0x12a0>
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	085b      	lsrs	r3, r3, #1
 80073c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <USB_EPStartXfer+0x1226>
 80073e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073e4:	3301      	adds	r3, #1
 80073e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	029b      	lsls	r3, r3, #10
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	4313      	orrs	r3, r2
 80073fe:	b29a      	uxth	r2, r3
 8007400:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	e02d      	b.n	8007464 <USB_EPStartXfer+0x12a0>
 8007408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d125      	bne.n	8007464 <USB_EPStartXfer+0x12a0>
 8007418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007426:	b29b      	uxth	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800742e:	4413      	add	r3, r2
 8007430:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	011a      	lsls	r2, r3, #4
 8007442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007446:	4413      	add	r3, r2
 8007448:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800744c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	b29a      	uxth	r2, r3
 800745e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007462:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 8218 	beq.w	80078a6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007496:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800749a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <USB_EPStartXfer+0x12ea>
 80074a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10d      	bne.n	80074ca <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80074ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f040 81f5 	bne.w	80078a6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80074bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f040 81ee 	bne.w	80078a6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80074ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074f0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80074f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	441a      	add	r2, r3
 800750e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800751a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800751e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007522:	b29b      	uxth	r3, r3
 8007524:	8013      	strh	r3, [r2, #0]
 8007526:	e1be      	b.n	80078a6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	78db      	ldrb	r3, [r3, #3]
 8007534:	2b01      	cmp	r3, #1
 8007536:	f040 81b4 	bne.w	80078a2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800753a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699a      	ldr	r2, [r3, #24]
 8007546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	429a      	cmp	r2, r3
 8007554:	d917      	bls.n	8007586 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007576:	1ad2      	subs	r2, r2, r3
 8007578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	619a      	str	r2, [r3, #24]
 8007584:	e00e      	b.n	80075a4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2200      	movs	r2, #0
 80075a2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80075a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f040 8085 	bne.w	80076c0 <USB_EPStartXfer+0x14fc>
 80075b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075da:	4413      	add	r3, r2
 80075dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	011a      	lsls	r2, r3, #4
 80075ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075f2:	4413      	add	r3, r2
 80075f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007608:	b29a      	uxth	r2, r3
 800760a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007614:	2b3e      	cmp	r3, #62	@ 0x3e
 8007616:	d923      	bls.n	8007660 <USB_EPStartXfer+0x149c>
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761c:	095b      	lsrs	r3, r3, #5
 800761e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <USB_EPStartXfer+0x1474>
 800762e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007632:	3b01      	subs	r3, #1
 8007634:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29a      	uxth	r2, r3
 8007640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007644:	b29b      	uxth	r3, r3
 8007646:	029b      	lsls	r3, r3, #10
 8007648:	b29b      	uxth	r3, r3
 800764a:	4313      	orrs	r3, r2
 800764c:	b29b      	uxth	r3, r3
 800764e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007656:	b29a      	uxth	r2, r3
 8007658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	e060      	b.n	8007722 <USB_EPStartXfer+0x155e>
 8007660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10c      	bne.n	8007682 <USB_EPStartXfer+0x14be>
 8007668:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007678:	b29a      	uxth	r2, r3
 800767a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	e04f      	b.n	8007722 <USB_EPStartXfer+0x155e>
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007686:	085b      	lsrs	r3, r3, #1
 8007688:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <USB_EPStartXfer+0x14de>
 8007698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800769c:	3301      	adds	r3, #1
 800769e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80076a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	029b      	lsls	r3, r3, #10
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	4313      	orrs	r3, r2
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076bc:	801a      	strh	r2, [r3, #0]
 80076be:	e030      	b.n	8007722 <USB_EPStartXfer+0x155e>
 80076c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d128      	bne.n	8007722 <USB_EPStartXfer+0x155e>
 80076d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80076de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	461a      	mov	r2, r3
 80076f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076f4:	4413      	add	r3, r2
 80076f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80076fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	011a      	lsls	r2, r3, #4
 8007708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800770c:	4413      	add	r3, r2
 800770e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007712:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771a:	b29a      	uxth	r2, r3
 800771c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007720:	801a      	strh	r2, [r3, #0]
 8007722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	785b      	ldrb	r3, [r3, #1]
 800773c:	2b00      	cmp	r3, #0
 800773e:	f040 8085 	bne.w	800784c <USB_EPStartXfer+0x1688>
 8007742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800775e:	b29b      	uxth	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007766:	4413      	add	r3, r2
 8007768:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800776c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	011a      	lsls	r2, r3, #4
 800777a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800777e:	4413      	add	r3, r2
 8007780:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007794:	b29a      	uxth	r2, r3
 8007796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80077a2:	d923      	bls.n	80077ec <USB_EPStartXfer+0x1628>
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d104      	bne.n	80077c4 <USB_EPStartXfer+0x1600>
 80077ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077be:	3b01      	subs	r3, #1
 80077c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	029b      	lsls	r3, r3, #10
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	4313      	orrs	r3, r2
 80077d8:	b29b      	uxth	r3, r3
 80077da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e05c      	b.n	80078a6 <USB_EPStartXfer+0x16e2>
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10c      	bne.n	800780e <USB_EPStartXfer+0x164a>
 80077f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007804:	b29a      	uxth	r2, r3
 8007806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	e04b      	b.n	80078a6 <USB_EPStartXfer+0x16e2>
 800780e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007812:	085b      	lsrs	r3, r3, #1
 8007814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <USB_EPStartXfer+0x166a>
 8007824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007828:	3301      	adds	r3, #1
 800782a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800782e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800783a:	b29b      	uxth	r3, r3
 800783c:	029b      	lsls	r3, r3, #10
 800783e:	b29b      	uxth	r3, r3
 8007840:	4313      	orrs	r3, r2
 8007842:	b29a      	uxth	r2, r3
 8007844:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007848:	801a      	strh	r2, [r3, #0]
 800784a:	e02c      	b.n	80078a6 <USB_EPStartXfer+0x16e2>
 800784c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d124      	bne.n	80078a6 <USB_EPStartXfer+0x16e2>
 800785c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800786a:	b29b      	uxth	r3, r3
 800786c:	461a      	mov	r2, r3
 800786e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007872:	4413      	add	r3, r2
 8007874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	011a      	lsls	r2, r3, #4
 8007886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800788a:	4413      	add	r3, r2
 800788c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007890:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007898:	b29a      	uxth	r2, r3
 800789a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800789e:	801a      	strh	r2, [r3, #0]
 80078a0:	e001      	b.n	80078a6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e03a      	b.n	800791c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80078d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80078d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80078dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80078e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	441a      	add	r2, r3
 8007902:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800790a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800790e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d020      	beq.n	800797a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b29b      	uxth	r3, r3
 8007946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800794a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800794e:	81bb      	strh	r3, [r7, #12]
 8007950:	89bb      	ldrh	r3, [r7, #12]
 8007952:	f083 0310 	eor.w	r3, r3, #16
 8007956:	81bb      	strh	r3, [r7, #12]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	441a      	add	r2, r3
 8007962:	89bb      	ldrh	r3, [r7, #12]
 8007964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800796c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007974:	b29b      	uxth	r3, r3
 8007976:	8013      	strh	r3, [r2, #0]
 8007978:	e01f      	b.n	80079ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	b29b      	uxth	r3, r3
 8007988:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800798c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007990:	81fb      	strh	r3, [r7, #14]
 8007992:	89fb      	ldrh	r3, [r7, #14]
 8007994:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007998:	81fb      	strh	r3, [r7, #14]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	441a      	add	r2, r3
 80079a4:	89fb      	ldrh	r3, [r7, #14]
 80079a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr

080079c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b087      	sub	sp, #28
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	7b1b      	ldrb	r3, [r3, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f040 809d 	bne.w	8007b14 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d04c      	beq.n	8007a7c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	823b      	strh	r3, [r7, #16]
 80079f0:	8a3b      	ldrh	r3, [r7, #16]
 80079f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01b      	beq.n	8007a32 <USB_EPClearStall+0x6c>
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a10:	81fb      	strh	r3, [r7, #14]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	441a      	add	r2, r3
 8007a1c:	89fb      	ldrh	r3, [r7, #14]
 8007a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	78db      	ldrb	r3, [r3, #3]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d06c      	beq.n	8007b14 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a50:	81bb      	strh	r3, [r7, #12]
 8007a52:	89bb      	ldrh	r3, [r7, #12]
 8007a54:	f083 0320 	eor.w	r3, r3, #32
 8007a58:	81bb      	strh	r3, [r7, #12]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	441a      	add	r2, r3
 8007a64:	89bb      	ldrh	r3, [r7, #12]
 8007a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	8013      	strh	r3, [r2, #0]
 8007a7a:	e04b      	b.n	8007b14 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	82fb      	strh	r3, [r7, #22]
 8007a8a:	8afb      	ldrh	r3, [r7, #22]
 8007a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01b      	beq.n	8007acc <USB_EPClearStall+0x106>
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aaa:	82bb      	strh	r3, [r7, #20]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	441a      	add	r2, r3
 8007ab6:	8abb      	ldrh	r3, [r7, #20]
 8007ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae2:	827b      	strh	r3, [r7, #18]
 8007ae4:	8a7b      	ldrh	r3, [r7, #18]
 8007ae6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007aea:	827b      	strh	r3, [r7, #18]
 8007aec:	8a7b      	ldrh	r3, [r7, #18]
 8007aee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007af2:	827b      	strh	r3, [r7, #18]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	441a      	add	r2, r3
 8007afe:	8a7b      	ldrh	r3, [r7, #18]
 8007b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bc80      	pop	{r7}
 8007b1e:	4770      	bx	lr

08007b20 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d103      	bne.n	8007b3a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2280      	movs	r2, #128	@ 0x80
 8007b36:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr

08007b46 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc80      	pop	{r7}
 8007b58:	4770      	bx	lr

08007b5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr

08007b6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b085      	sub	sp, #20
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b80:	68fb      	ldr	r3, [r7, #12]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr

08007b8c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr

08007ba2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b08b      	sub	sp, #44	@ 0x2c
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	4611      	mov	r1, r2
 8007bae:	461a      	mov	r2, r3
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	80fb      	strh	r3, [r7, #6]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007bb8:	88bb      	ldrh	r3, [r7, #4]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	085b      	lsrs	r3, r3, #1
 8007bbe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	005a      	lsls	r2, r3, #1
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bd4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bda:	e01f      	b.n	8007c1c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	3301      	adds	r3, #1
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	b21b      	sxth	r3, r3
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	b21a      	sxth	r2, r3
 8007bee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	b21b      	sxth	r3, r3
 8007bf6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	8a7a      	ldrh	r2, [r7, #18]
 8007bfc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	3302      	adds	r3, #2
 8007c02:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	3302      	adds	r3, #2
 8007c08:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	3301      	adds	r3, #1
 8007c14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1dc      	bne.n	8007bdc <USB_WritePMA+0x3a>
  }
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	372c      	adds	r7, #44	@ 0x2c
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bc80      	pop	{r7}
 8007c2c:	4770      	bx	lr

08007c2e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b08b      	sub	sp, #44	@ 0x2c
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	80fb      	strh	r3, [r7, #6]
 8007c40:	4613      	mov	r3, r2
 8007c42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007c44:	88bb      	ldrh	r3, [r7, #4]
 8007c46:	085b      	lsrs	r3, r3, #1
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c54:	88fb      	ldrh	r3, [r7, #6]
 8007c56:	005a      	lsls	r2, r3, #1
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c66:	e01b      	b.n	8007ca0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	3302      	adds	r3, #2
 8007c74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	3301      	adds	r3, #1
 8007c82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3301      	adds	r3, #1
 8007c92:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	3302      	adds	r3, #2
 8007c98:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e0      	bne.n	8007c68 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ca6:	88bb      	ldrh	r3, [r7, #4]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	701a      	strb	r2, [r3, #0]
  }
}
 8007cc2:	bf00      	nop
 8007cc4:	372c      	adds	r7, #44	@ 0x2c
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bc80      	pop	{r7}
 8007cca:	4770      	bx	lr

08007ccc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7c1b      	ldrb	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d115      	bne.n	8007d10 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ce8:	2202      	movs	r2, #2
 8007cea:	2181      	movs	r1, #129	@ 0x81
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 fed6 	bl	8009a9e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	2101      	movs	r1, #1
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 fecc 	bl	8009a9e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007d0e:	e012      	b.n	8007d36 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d10:	2340      	movs	r3, #64	@ 0x40
 8007d12:	2202      	movs	r2, #2
 8007d14:	2181      	movs	r1, #129	@ 0x81
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 fec1 	bl	8009a9e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d22:	2340      	movs	r3, #64	@ 0x40
 8007d24:	2202      	movs	r2, #2
 8007d26:	2101      	movs	r1, #1
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 feb8 	bl	8009a9e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d36:	2308      	movs	r3, #8
 8007d38:	2203      	movs	r2, #3
 8007d3a:	2182      	movs	r1, #130	@ 0x82
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 feae 	bl	8009a9e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d48:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007d4c:	f001 ffce 	bl	8009cec <USBD_static_malloc>
 8007d50:	4602      	mov	r2, r0
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d102      	bne.n	8007d68 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007d62:	2301      	movs	r3, #1
 8007d64:	73fb      	strb	r3, [r7, #15]
 8007d66:	e026      	b.n	8007db6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d6e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7c1b      	ldrb	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d109      	bne.n	8007da6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f001 ff6d 	bl	8009c7e <USBD_LL_PrepareReceive>
 8007da4:	e007      	b.n	8007db6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007dac:	2340      	movs	r3, #64	@ 0x40
 8007dae:	2101      	movs	r1, #1
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 ff64 	bl	8009c7e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007dd0:	2181      	movs	r1, #129	@ 0x81
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fe89 	bl	8009aea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007dde:	2101      	movs	r1, #1
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 fe82 	bl	8009aea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007dee:	2182      	movs	r1, #130	@ 0x82
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 fe7a 	bl	8009aea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00e      	beq.n	8007e24 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 ff74 	bl	8009d04 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b086      	sub	sp, #24
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e3e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d039      	beq.n	8007ecc <USBD_CDC_Setup+0x9e>
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	d17f      	bne.n	8007f5c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	88db      	ldrh	r3, [r3, #6]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d029      	beq.n	8007eb8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	b25b      	sxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	da11      	bge.n	8007e92 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007e7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	88d2      	ldrh	r2, [r2, #6]
 8007e80:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e82:	6939      	ldr	r1, [r7, #16]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	88db      	ldrh	r3, [r3, #6]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fa06 	bl	800929c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e90:	e06b      	b.n	8007f6a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	785a      	ldrb	r2, [r3, #1]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	88db      	ldrh	r3, [r3, #6]
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ea8:	6939      	ldr	r1, [r7, #16]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 fa21 	bl	80092f8 <USBD_CtlPrepareRx>
      break;
 8007eb6:	e058      	b.n	8007f6a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	7850      	ldrb	r0, [r2, #1]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	4798      	blx	r3
      break;
 8007eca:	e04e      	b.n	8007f6a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	785b      	ldrb	r3, [r3, #1]
 8007ed0:	2b0b      	cmp	r3, #11
 8007ed2:	d02e      	beq.n	8007f32 <USBD_CDC_Setup+0x104>
 8007ed4:	2b0b      	cmp	r3, #11
 8007ed6:	dc38      	bgt.n	8007f4a <USBD_CDC_Setup+0x11c>
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <USBD_CDC_Setup+0xb4>
 8007edc:	2b0a      	cmp	r3, #10
 8007ede:	d014      	beq.n	8007f0a <USBD_CDC_Setup+0xdc>
 8007ee0:	e033      	b.n	8007f4a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d107      	bne.n	8007efc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007eec:	f107 030c 	add.w	r3, r7, #12
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 f9d1 	bl	800929c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007efa:	e02e      	b.n	8007f5a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 f962 	bl	80091c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f04:	2302      	movs	r3, #2
 8007f06:	75fb      	strb	r3, [r7, #23]
          break;
 8007f08:	e027      	b.n	8007f5a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d107      	bne.n	8007f24 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f14:	f107 030f 	add.w	r3, r7, #15
 8007f18:	2201      	movs	r2, #1
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f9bd 	bl	800929c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f22:	e01a      	b.n	8007f5a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 f94e 	bl	80091c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	75fb      	strb	r3, [r7, #23]
          break;
 8007f30:	e013      	b.n	8007f5a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d00d      	beq.n	8007f58 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f001 f942 	bl	80091c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f44:	2302      	movs	r3, #2
 8007f46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f48:	e006      	b.n	8007f58 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 f93b 	bl	80091c8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f52:	2302      	movs	r3, #2
 8007f54:	75fb      	strb	r3, [r7, #23]
          break;
 8007f56:	e000      	b.n	8007f5a <USBD_CDC_Setup+0x12c>
          break;
 8007f58:	bf00      	nop
      }
      break;
 8007f5a:	e006      	b.n	8007f6a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 f932 	bl	80091c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f64:	2302      	movs	r3, #2
 8007f66:	75fb      	strb	r3, [r7, #23]
      break;
 8007f68:	bf00      	nop
  }

  return ret;
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f86:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f8e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d03a      	beq.n	8008010 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	331c      	adds	r3, #28
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d029      	beq.n	8008004 <USBD_CDC_DataIn+0x90>
 8007fb0:	78fa      	ldrb	r2, [r7, #3]
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	331c      	adds	r3, #28
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	78f9      	ldrb	r1, [r7, #3]
 8007fc4:	68b8      	ldr	r0, [r7, #8]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	4403      	add	r3, r0
 8007fd0:	3320      	adds	r3, #32
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d110      	bne.n	8008004 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	440b      	add	r3, r1
 8007ff0:	331c      	adds	r3, #28
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ff6:	78f9      	ldrb	r1, [r7, #3]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 fe1b 	bl	8009c38 <USBD_LL_Transmit>
 8008002:	e003      	b.n	800800c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	e000      	b.n	8008012 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008010:	2302      	movs	r3, #2
  }
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	460b      	mov	r3, r1
 8008024:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800802c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800802e:	78fb      	ldrb	r3, [r7, #3]
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 fe46 	bl	8009cc4 <USBD_LL_GetRxDataSize>
 8008038:	4602      	mov	r2, r0
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00d      	beq.n	8008066 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800805e:	4611      	mov	r1, r2
 8008060:	4798      	blx	r3

    return USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	e000      	b.n	8008068 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008066:	2302      	movs	r3, #2
  }
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800807e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008086:	2b00      	cmp	r3, #0
 8008088:	d014      	beq.n	80080b4 <USBD_CDC_EP0_RxReady+0x44>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008090:	2bff      	cmp	r3, #255	@ 0xff
 8008092:	d00f      	beq.n	80080b4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80080a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	22ff      	movs	r2, #255	@ 0xff
 80080b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2243      	movs	r2, #67	@ 0x43
 80080cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80080ce:	4b03      	ldr	r3, [pc, #12]	@ (80080dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	200000a8 	.word	0x200000a8

080080e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2243      	movs	r2, #67	@ 0x43
 80080ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80080ee:	4b03      	ldr	r3, [pc, #12]	@ (80080fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	20000064 	.word	0x20000064

08008100 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2243      	movs	r2, #67	@ 0x43
 800810c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800810e:	4b03      	ldr	r3, [pc, #12]	@ (800811c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	bc80      	pop	{r7}
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	200000ec 	.word	0x200000ec

08008120 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	220a      	movs	r2, #10
 800812c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800812e:	4b03      	ldr	r3, [pc, #12]	@ (800813c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	20000020 	.word	0x20000020

08008140 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800814a:	2302      	movs	r3, #2
 800814c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d005      	beq.n	8008160 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	bc80      	pop	{r7}
 800816a:	4770      	bx	lr

0800816c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008180:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800818a:	88fa      	ldrh	r2, [r7, #6]
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	bc80      	pop	{r7}
 800819c:	4770      	bx	lr

0800819e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800819e:	b480      	push	{r7}
 80081a0:	b085      	sub	sp, #20
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	bc80      	pop	{r7}
 80081c2:	4770      	bx	lr

080081c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01c      	beq.n	8008218 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d115      	bne.n	8008214 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008206:	b29b      	uxth	r3, r3
 8008208:	2181      	movs	r1, #129	@ 0x81
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 fd14 	bl	8009c38 <USBD_LL_Transmit>

      return USBD_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	e002      	b.n	800821a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008214:	2301      	movs	r3, #1
 8008216:	e000      	b.n	800821a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008218:	2302      	movs	r3, #2
  }
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008230:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d017      	beq.n	800826c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	7c1b      	ldrb	r3, [r3, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d109      	bne.n	8008258 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800824a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800824e:	2101      	movs	r1, #1
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 fd14 	bl	8009c7e <USBD_LL_PrepareReceive>
 8008256:	e007      	b.n	8008268 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800825e:	2340      	movs	r3, #64	@ 0x40
 8008260:	2101      	movs	r1, #1
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f001 fd0b 	bl	8009c7e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	e000      	b.n	800826e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800826c:	2302      	movs	r3, #2
  }
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	4613      	mov	r3, r2
 8008282:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800828a:	2302      	movs	r3, #2
 800828c:	e01a      	b.n	80082c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d003      	beq.n	80082a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	79fa      	ldrb	r2, [r7, #7]
 80082ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f001 fb79 	bl	80099b4 <USBD_LL_Init>

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d006      	beq.n	80082ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
 80082ec:	e001      	b.n	80082f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80082ee:	2302      	movs	r3, #2
 80082f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr

080082fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 fbae 	bl	8009a68 <USBD_LL_Start>

  return USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	bc80      	pop	{r7}
 8008328:	4770      	bx	lr

0800832a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008336:	2302      	movs	r3, #2
 8008338:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00c      	beq.n	800835e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	4611      	mov	r1, r2
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800835e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	4611      	mov	r1, r2
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3

  return USBD_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fed8 	bl	8009156 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083b4:	461a      	mov	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80083c2:	f003 031f 	and.w	r3, r3, #31
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d016      	beq.n	80083f8 <USBD_LL_SetupStage+0x6a>
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d81c      	bhi.n	8008408 <USBD_LL_SetupStage+0x7a>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <USBD_LL_SetupStage+0x4a>
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d008      	beq.n	80083e8 <USBD_LL_SetupStage+0x5a>
 80083d6:	e017      	b.n	8008408 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f9cb 	bl	800877c <USBD_StdDevReq>
      break;
 80083e6:	e01a      	b.n	800841e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa2d 	bl	8008850 <USBD_StdItfReq>
      break;
 80083f6:	e012      	b.n	800841e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fa6d 	bl	80088e0 <USBD_StdEPReq>
      break;
 8008406:	e00a      	b.n	800841e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800840e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008412:	b2db      	uxtb	r3, r3
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 fb86 	bl	8009b28 <USBD_LL_StallEP>
      break;
 800841c:	bf00      	nop
  }

  return USBD_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	460b      	mov	r3, r1
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008436:	7afb      	ldrb	r3, [r7, #11]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d14b      	bne.n	80084d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008442:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800844a:	2b03      	cmp	r3, #3
 800844c:	d134      	bne.n	80084b8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	429a      	cmp	r2, r3
 8008458:	d919      	bls.n	800848e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	1ad2      	subs	r2, r2, r3
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008470:	429a      	cmp	r2, r3
 8008472:	d203      	bcs.n	800847c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008478:	b29b      	uxth	r3, r3
 800847a:	e002      	b.n	8008482 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008480:	b29b      	uxth	r3, r3
 8008482:	461a      	mov	r2, r3
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 ff54 	bl	8009334 <USBD_CtlContinueRx>
 800848c:	e038      	b.n	8008500 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d105      	bne.n	80084b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 ff51 	bl	8009358 <USBD_CtlSendStatus>
 80084b6:	e023      	b.n	8008500 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084be:	2b05      	cmp	r3, #5
 80084c0:	d11e      	bne.n	8008500 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80084ca:	2100      	movs	r1, #0
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f001 fb2b 	bl	8009b28 <USBD_LL_StallEP>
 80084d2:	e015      	b.n	8008500 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00d      	beq.n	80084fc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d108      	bne.n	80084fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	7afa      	ldrb	r2, [r7, #11]
 80084f4:	4611      	mov	r1, r2
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	4798      	blx	r3
 80084fa:	e001      	b.n	8008500 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084fc:	2302      	movs	r3, #2
 80084fe:	e000      	b.n	8008502 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	460b      	mov	r3, r1
 8008514:	607a      	str	r2, [r7, #4]
 8008516:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d17f      	bne.n	800861e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3314      	adds	r3, #20
 8008522:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800852a:	2b02      	cmp	r3, #2
 800852c:	d15c      	bne.n	80085e8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	68da      	ldr	r2, [r3, #12]
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	429a      	cmp	r2, r3
 8008538:	d915      	bls.n	8008566 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	b29b      	uxth	r3, r3
 800854e:	461a      	mov	r2, r3
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 febe 	bl	80092d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008558:	2300      	movs	r3, #0
 800855a:	2200      	movs	r2, #0
 800855c:	2100      	movs	r1, #0
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f001 fb8d 	bl	8009c7e <USBD_LL_PrepareReceive>
 8008564:	e04e      	b.n	8008604 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	6912      	ldr	r2, [r2, #16]
 800856e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008572:	fb01 f202 	mul.w	r2, r1, r2
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d11c      	bne.n	80085b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008584:	429a      	cmp	r2, r3
 8008586:	d316      	bcc.n	80085b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008592:	429a      	cmp	r2, r3
 8008594:	d20f      	bcs.n	80085b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008596:	2200      	movs	r2, #0
 8008598:	2100      	movs	r1, #0
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 fe9a 	bl	80092d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085a8:	2300      	movs	r3, #0
 80085aa:	2200      	movs	r2, #0
 80085ac:	2100      	movs	r1, #0
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f001 fb65 	bl	8009c7e <USBD_LL_PrepareReceive>
 80085b4:	e026      	b.n	8008604 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d105      	bne.n	80085d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80085d8:	2180      	movs	r1, #128	@ 0x80
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f001 faa4 	bl	8009b28 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 fecc 	bl	800937e <USBD_CtlReceiveStatus>
 80085e6:	e00d      	b.n	8008604 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d004      	beq.n	80085fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d103      	bne.n	8008604 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80085fc:	2180      	movs	r1, #128	@ 0x80
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f001 fa92 	bl	8009b28 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800860a:	2b01      	cmp	r3, #1
 800860c:	d11d      	bne.n	800864a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7ff fe81 	bl	8008316 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800861c:	e015      	b.n	800864a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00d      	beq.n	8008646 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008630:	2b03      	cmp	r3, #3
 8008632:	d108      	bne.n	8008646 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	7afa      	ldrb	r2, [r7, #11]
 800863e:	4611      	mov	r1, r2
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	4798      	blx	r3
 8008644:	e001      	b.n	800864a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008646:	2302      	movs	r3, #2
 8008648:	e000      	b.n	800864c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800865c:	2340      	movs	r3, #64	@ 0x40
 800865e:	2200      	movs	r2, #0
 8008660:	2100      	movs	r1, #0
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f001 fa1b 	bl	8009a9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2240      	movs	r2, #64	@ 0x40
 8008674:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008678:	2340      	movs	r3, #64	@ 0x40
 800867a:	2200      	movs	r2, #0
 800867c:	2180      	movs	r1, #128	@ 0x80
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fa0d 	bl	8009a9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2240      	movs	r2, #64	@ 0x40
 800868e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6852      	ldr	r2, [r2, #4]
 80086c4:	b2d2      	uxtb	r2, r2
 80086c6:	4611      	mov	r1, r2
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	4798      	blx	r3
  }

  return USBD_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	78fa      	ldrb	r2, [r7, #3]
 80086e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr

080086f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2204      	movs	r2, #4
 800870c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800872a:	2b04      	cmp	r3, #4
 800872c:	d105      	bne.n	800873a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr

08008746 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b082      	sub	sp, #8
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008754:	2b03      	cmp	r3, #3
 8008756:	d10b      	bne.n	8008770 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008792:	2b40      	cmp	r3, #64	@ 0x40
 8008794:	d005      	beq.n	80087a2 <USBD_StdDevReq+0x26>
 8008796:	2b40      	cmp	r3, #64	@ 0x40
 8008798:	d84f      	bhi.n	800883a <USBD_StdDevReq+0xbe>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <USBD_StdDevReq+0x36>
 800879e:	2b20      	cmp	r3, #32
 80087a0:	d14b      	bne.n	800883a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	4798      	blx	r3
      break;
 80087b0:	e048      	b.n	8008844 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	785b      	ldrb	r3, [r3, #1]
 80087b6:	2b09      	cmp	r3, #9
 80087b8:	d839      	bhi.n	800882e <USBD_StdDevReq+0xb2>
 80087ba:	a201      	add	r2, pc, #4	@ (adr r2, 80087c0 <USBD_StdDevReq+0x44>)
 80087bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c0:	08008811 	.word	0x08008811
 80087c4:	08008825 	.word	0x08008825
 80087c8:	0800882f 	.word	0x0800882f
 80087cc:	0800881b 	.word	0x0800881b
 80087d0:	0800882f 	.word	0x0800882f
 80087d4:	080087f3 	.word	0x080087f3
 80087d8:	080087e9 	.word	0x080087e9
 80087dc:	0800882f 	.word	0x0800882f
 80087e0:	08008807 	.word	0x08008807
 80087e4:	080087fd 	.word	0x080087fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f9dc 	bl	8008ba8 <USBD_GetDescriptor>
          break;
 80087f0:	e022      	b.n	8008838 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fb3f 	bl	8008e78 <USBD_SetAddress>
          break;
 80087fa:	e01d      	b.n	8008838 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fb7e 	bl	8008f00 <USBD_SetConfig>
          break;
 8008804:	e018      	b.n	8008838 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fc07 	bl	800901c <USBD_GetConfig>
          break;
 800880e:	e013      	b.n	8008838 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fc37 	bl	8009086 <USBD_GetStatus>
          break;
 8008818:	e00e      	b.n	8008838 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fc65 	bl	80090ec <USBD_SetFeature>
          break;
 8008822:	e009      	b.n	8008838 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fc74 	bl	8009114 <USBD_ClrFeature>
          break;
 800882c:	e004      	b.n	8008838 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fcc9 	bl	80091c8 <USBD_CtlError>
          break;
 8008836:	bf00      	nop
      }
      break;
 8008838:	e004      	b.n	8008844 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fcc3 	bl	80091c8 <USBD_CtlError>
      break;
 8008842:	bf00      	nop
  }

  return ret;
 8008844:	7bfb      	ldrb	r3, [r7, #15]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop

08008850 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008866:	2b40      	cmp	r3, #64	@ 0x40
 8008868:	d005      	beq.n	8008876 <USBD_StdItfReq+0x26>
 800886a:	2b40      	cmp	r3, #64	@ 0x40
 800886c:	d82e      	bhi.n	80088cc <USBD_StdItfReq+0x7c>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <USBD_StdItfReq+0x26>
 8008872:	2b20      	cmp	r3, #32
 8008874:	d12a      	bne.n	80088cc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800887c:	3b01      	subs	r3, #1
 800887e:	2b02      	cmp	r3, #2
 8008880:	d81d      	bhi.n	80088be <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	889b      	ldrh	r3, [r3, #4]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b01      	cmp	r3, #1
 800888a:	d813      	bhi.n	80088b4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	88db      	ldrh	r3, [r3, #6]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d110      	bne.n	80088c8 <USBD_StdItfReq+0x78>
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10d      	bne.n	80088c8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fd53 	bl	8009358 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088b2:	e009      	b.n	80088c8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fc86 	bl	80091c8 <USBD_CtlError>
          break;
 80088bc:	e004      	b.n	80088c8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fc81 	bl	80091c8 <USBD_CtlError>
          break;
 80088c6:	e000      	b.n	80088ca <USBD_StdItfReq+0x7a>
          break;
 80088c8:	bf00      	nop
      }
      break;
 80088ca:	e004      	b.n	80088d6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fc7a 	bl	80091c8 <USBD_CtlError>
      break;
 80088d4:	bf00      	nop
  }

  return USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	889b      	ldrh	r3, [r3, #4]
 80088f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088fc:	2b40      	cmp	r3, #64	@ 0x40
 80088fe:	d007      	beq.n	8008910 <USBD_StdEPReq+0x30>
 8008900:	2b40      	cmp	r3, #64	@ 0x40
 8008902:	f200 8146 	bhi.w	8008b92 <USBD_StdEPReq+0x2b2>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00a      	beq.n	8008920 <USBD_StdEPReq+0x40>
 800890a:	2b20      	cmp	r3, #32
 800890c:	f040 8141 	bne.w	8008b92 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3
      break;
 800891e:	e13d      	b.n	8008b9c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008928:	2b20      	cmp	r3, #32
 800892a:	d10a      	bne.n	8008942 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
 800893a:	4603      	mov	r3, r0
 800893c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	e12d      	b.n	8008b9e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	2b03      	cmp	r3, #3
 8008948:	d007      	beq.n	800895a <USBD_StdEPReq+0x7a>
 800894a:	2b03      	cmp	r3, #3
 800894c:	f300 811b 	bgt.w	8008b86 <USBD_StdEPReq+0x2a6>
 8008950:	2b00      	cmp	r3, #0
 8008952:	d072      	beq.n	8008a3a <USBD_StdEPReq+0x15a>
 8008954:	2b01      	cmp	r3, #1
 8008956:	d03a      	beq.n	80089ce <USBD_StdEPReq+0xee>
 8008958:	e115      	b.n	8008b86 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008960:	2b02      	cmp	r3, #2
 8008962:	d002      	beq.n	800896a <USBD_StdEPReq+0x8a>
 8008964:	2b03      	cmp	r3, #3
 8008966:	d015      	beq.n	8008994 <USBD_StdEPReq+0xb4>
 8008968:	e02b      	b.n	80089c2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00c      	beq.n	800898a <USBD_StdEPReq+0xaa>
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b80      	cmp	r3, #128	@ 0x80
 8008974:	d009      	beq.n	800898a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 f8d4 	bl	8009b28 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008980:	2180      	movs	r1, #128	@ 0x80
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 f8d0 	bl	8009b28 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008988:	e020      	b.n	80089cc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc1b 	bl	80091c8 <USBD_CtlError>
              break;
 8008992:	e01b      	b.n	80089cc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	885b      	ldrh	r3, [r3, #2]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10e      	bne.n	80089ba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00b      	beq.n	80089ba <USBD_StdEPReq+0xda>
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b80      	cmp	r3, #128	@ 0x80
 80089a6:	d008      	beq.n	80089ba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	88db      	ldrh	r3, [r3, #6]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d104      	bne.n	80089ba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 f8b7 	bl	8009b28 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fccc 	bl	8009358 <USBD_CtlSendStatus>

              break;
 80089c0:	e004      	b.n	80089cc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fbff 	bl	80091c8 <USBD_CtlError>
              break;
 80089ca:	bf00      	nop
          }
          break;
 80089cc:	e0e0      	b.n	8008b90 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d002      	beq.n	80089de <USBD_StdEPReq+0xfe>
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d015      	beq.n	8008a08 <USBD_StdEPReq+0x128>
 80089dc:	e026      	b.n	8008a2c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00c      	beq.n	80089fe <USBD_StdEPReq+0x11e>
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	2b80      	cmp	r3, #128	@ 0x80
 80089e8:	d009      	beq.n	80089fe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 f89a 	bl	8009b28 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80089f4:	2180      	movs	r1, #128	@ 0x80
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 f896 	bl	8009b28 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089fc:	e01c      	b.n	8008a38 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fbe1 	bl	80091c8 <USBD_CtlError>
              break;
 8008a06:	e017      	b.n	8008a38 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	885b      	ldrh	r3, [r3, #2]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d112      	bne.n	8008a36 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d004      	beq.n	8008a24 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f001 f8a1 	bl	8009b66 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fc97 	bl	8009358 <USBD_CtlSendStatus>
              }
              break;
 8008a2a:	e004      	b.n	8008a36 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fbca 	bl	80091c8 <USBD_CtlError>
              break;
 8008a34:	e000      	b.n	8008a38 <USBD_StdEPReq+0x158>
              break;
 8008a36:	bf00      	nop
          }
          break;
 8008a38:	e0aa      	b.n	8008b90 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d002      	beq.n	8008a4a <USBD_StdEPReq+0x16a>
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d032      	beq.n	8008aae <USBD_StdEPReq+0x1ce>
 8008a48:	e097      	b.n	8008b7a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d007      	beq.n	8008a60 <USBD_StdEPReq+0x180>
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	2b80      	cmp	r3, #128	@ 0x80
 8008a54:	d004      	beq.n	8008a60 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fbb5 	bl	80091c8 <USBD_CtlError>
                break;
 8008a5e:	e091      	b.n	8008b84 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da0b      	bge.n	8008a80 <USBD_StdEPReq+0x1a0>
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a6e:	4613      	mov	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	3310      	adds	r3, #16
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	e00b      	b.n	8008a98 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	4413      	add	r3, r2
 8008a96:	3304      	adds	r3, #4
 8008a98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fbf8 	bl	800929c <USBD_CtlSendData>
              break;
 8008aac:	e06a      	b.n	8008b84 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	da11      	bge.n	8008ada <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	f003 020f 	and.w	r2, r3, #15
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	440b      	add	r3, r1
 8008ac8:	3318      	adds	r3, #24
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d117      	bne.n	8008b00 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fb78 	bl	80091c8 <USBD_CtlError>
                  break;
 8008ad8:	e054      	b.n	8008b84 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	f003 020f 	and.w	r2, r3, #15
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	440b      	add	r3, r1
 8008aec:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d104      	bne.n	8008b00 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fb65 	bl	80091c8 <USBD_CtlError>
                  break;
 8008afe:	e041      	b.n	8008b84 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	da0b      	bge.n	8008b20 <USBD_StdEPReq+0x240>
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	3310      	adds	r3, #16
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	e00b      	b.n	8008b38 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	4413      	add	r3, r2
 8008b36:	3304      	adds	r3, #4
 8008b38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <USBD_StdEPReq+0x266>
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	2b80      	cmp	r3, #128	@ 0x80
 8008b44:	d103      	bne.n	8008b4e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	e00e      	b.n	8008b6c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 f826 	bl	8009ba4 <USBD_LL_IsStallEP>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2201      	movs	r2, #1
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	e002      	b.n	8008b6c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fb92 	bl	800929c <USBD_CtlSendData>
              break;
 8008b78:	e004      	b.n	8008b84 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fb23 	bl	80091c8 <USBD_CtlError>
              break;
 8008b82:	bf00      	nop
          }
          break;
 8008b84:	e004      	b.n	8008b90 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fb1d 	bl	80091c8 <USBD_CtlError>
          break;
 8008b8e:	bf00      	nop
      }
      break;
 8008b90:	e004      	b.n	8008b9c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fb17 	bl	80091c8 <USBD_CtlError>
      break;
 8008b9a:	bf00      	nop
  }

  return ret;
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	885b      	ldrh	r3, [r3, #2]
 8008bc2:	0a1b      	lsrs	r3, r3, #8
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	2b06      	cmp	r3, #6
 8008bca:	f200 8128 	bhi.w	8008e1e <USBD_GetDescriptor+0x276>
 8008bce:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd4 <USBD_GetDescriptor+0x2c>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008bf1 	.word	0x08008bf1
 8008bd8:	08008c09 	.word	0x08008c09
 8008bdc:	08008c49 	.word	0x08008c49
 8008be0:	08008e1f 	.word	0x08008e1f
 8008be4:	08008e1f 	.word	0x08008e1f
 8008be8:	08008dbf 	.word	0x08008dbf
 8008bec:	08008deb 	.word	0x08008deb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	7c12      	ldrb	r2, [r2, #16]
 8008bfc:	f107 0108 	add.w	r1, r7, #8
 8008c00:	4610      	mov	r0, r2
 8008c02:	4798      	blx	r3
 8008c04:	60f8      	str	r0, [r7, #12]
      break;
 8008c06:	e112      	b.n	8008e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	7c1b      	ldrb	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10d      	bne.n	8008c2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c18:	f107 0208 	add.w	r2, r7, #8
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4798      	blx	r3
 8008c20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3301      	adds	r3, #1
 8008c26:	2202      	movs	r2, #2
 8008c28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c2a:	e100      	b.n	8008e2e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	f107 0208 	add.w	r2, r7, #8
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4798      	blx	r3
 8008c3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3301      	adds	r3, #1
 8008c42:	2202      	movs	r2, #2
 8008c44:	701a      	strb	r2, [r3, #0]
      break;
 8008c46:	e0f2      	b.n	8008e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	885b      	ldrh	r3, [r3, #2]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b05      	cmp	r3, #5
 8008c50:	f200 80ac 	bhi.w	8008dac <USBD_GetDescriptor+0x204>
 8008c54:	a201      	add	r2, pc, #4	@ (adr r2, 8008c5c <USBD_GetDescriptor+0xb4>)
 8008c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5a:	bf00      	nop
 8008c5c:	08008c75 	.word	0x08008c75
 8008c60:	08008ca9 	.word	0x08008ca9
 8008c64:	08008cdd 	.word	0x08008cdd
 8008c68:	08008d11 	.word	0x08008d11
 8008c6c:	08008d45 	.word	0x08008d45
 8008c70:	08008d79 	.word	0x08008d79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00b      	beq.n	8008c98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	7c12      	ldrb	r2, [r2, #16]
 8008c8c:	f107 0108 	add.w	r1, r7, #8
 8008c90:	4610      	mov	r0, r2
 8008c92:	4798      	blx	r3
 8008c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c96:	e091      	b.n	8008dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa94 	bl	80091c8 <USBD_CtlError>
            err++;
 8008ca0:	7afb      	ldrb	r3, [r7, #11]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ca6:	e089      	b.n	8008dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00b      	beq.n	8008ccc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	7c12      	ldrb	r2, [r2, #16]
 8008cc0:	f107 0108 	add.w	r1, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cca:	e077      	b.n	8008dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fa7a 	bl	80091c8 <USBD_CtlError>
            err++;
 8008cd4:	7afb      	ldrb	r3, [r7, #11]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cda:	e06f      	b.n	8008dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00b      	beq.n	8008d00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	7c12      	ldrb	r2, [r2, #16]
 8008cf4:	f107 0108 	add.w	r1, r7, #8
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4798      	blx	r3
 8008cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cfe:	e05d      	b.n	8008dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fa60 	bl	80091c8 <USBD_CtlError>
            err++;
 8008d08:	7afb      	ldrb	r3, [r7, #11]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d0e:	e055      	b.n	8008dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00b      	beq.n	8008d34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	7c12      	ldrb	r2, [r2, #16]
 8008d28:	f107 0108 	add.w	r1, r7, #8
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4798      	blx	r3
 8008d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d32:	e043      	b.n	8008dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa46 	bl	80091c8 <USBD_CtlError>
            err++;
 8008d3c:	7afb      	ldrb	r3, [r7, #11]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	72fb      	strb	r3, [r7, #11]
          break;
 8008d42:	e03b      	b.n	8008dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00b      	beq.n	8008d68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	7c12      	ldrb	r2, [r2, #16]
 8008d5c:	f107 0108 	add.w	r1, r7, #8
 8008d60:	4610      	mov	r0, r2
 8008d62:	4798      	blx	r3
 8008d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d66:	e029      	b.n	8008dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa2c 	bl	80091c8 <USBD_CtlError>
            err++;
 8008d70:	7afb      	ldrb	r3, [r7, #11]
 8008d72:	3301      	adds	r3, #1
 8008d74:	72fb      	strb	r3, [r7, #11]
          break;
 8008d76:	e021      	b.n	8008dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00b      	beq.n	8008d9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7c12      	ldrb	r2, [r2, #16]
 8008d90:	f107 0108 	add.w	r1, r7, #8
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
 8008d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d9a:	e00f      	b.n	8008dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fa12 	bl	80091c8 <USBD_CtlError>
            err++;
 8008da4:	7afb      	ldrb	r3, [r7, #11]
 8008da6:	3301      	adds	r3, #1
 8008da8:	72fb      	strb	r3, [r7, #11]
          break;
 8008daa:	e007      	b.n	8008dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fa0a 	bl	80091c8 <USBD_CtlError>
          err++;
 8008db4:	7afb      	ldrb	r3, [r7, #11]
 8008db6:	3301      	adds	r3, #1
 8008db8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008dba:	e038      	b.n	8008e2e <USBD_GetDescriptor+0x286>
 8008dbc:	e037      	b.n	8008e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	7c1b      	ldrb	r3, [r3, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dce:	f107 0208 	add.w	r2, r7, #8
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4798      	blx	r3
 8008dd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dd8:	e029      	b.n	8008e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f9f3 	bl	80091c8 <USBD_CtlError>
        err++;
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	3301      	adds	r3, #1
 8008de6:	72fb      	strb	r3, [r7, #11]
      break;
 8008de8:	e021      	b.n	8008e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	7c1b      	ldrb	r3, [r3, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10d      	bne.n	8008e0e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfa:	f107 0208 	add.w	r2, r7, #8
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4798      	blx	r3
 8008e02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	2207      	movs	r2, #7
 8008e0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e0c:	e00f      	b.n	8008e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f9d9 	bl	80091c8 <USBD_CtlError>
        err++;
 8008e16:	7afb      	ldrb	r3, [r7, #11]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e1c:	e007      	b.n	8008e2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f9d1 	bl	80091c8 <USBD_CtlError>
      err++;
 8008e26:	7afb      	ldrb	r3, [r7, #11]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e2c:	bf00      	nop
  }

  if (err != 0U)
 8008e2e:	7afb      	ldrb	r3, [r7, #11]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d11c      	bne.n	8008e6e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008e34:	893b      	ldrh	r3, [r7, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d011      	beq.n	8008e5e <USBD_GetDescriptor+0x2b6>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	88db      	ldrh	r3, [r3, #6]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00d      	beq.n	8008e5e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	88da      	ldrh	r2, [r3, #6]
 8008e46:	893b      	ldrh	r3, [r7, #8]
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	bf28      	it	cs
 8008e4c:	4613      	movcs	r3, r2
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e52:	893b      	ldrh	r3, [r7, #8]
 8008e54:	461a      	mov	r2, r3
 8008e56:	68f9      	ldr	r1, [r7, #12]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fa1f 	bl	800929c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	88db      	ldrh	r3, [r3, #6]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa76 	bl	8009358 <USBD_CtlSendStatus>
 8008e6c:	e000      	b.n	8008e70 <USBD_GetDescriptor+0x2c8>
    return;
 8008e6e:	bf00      	nop
    }
  }
}
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop

08008e78 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	889b      	ldrh	r3, [r3, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d130      	bne.n	8008eec <USBD_SetAddress+0x74>
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	88db      	ldrh	r3, [r3, #6]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d12c      	bne.n	8008eec <USBD_SetAddress+0x74>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	885b      	ldrh	r3, [r3, #2]
 8008e96:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e98:	d828      	bhi.n	8008eec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	885b      	ldrh	r3, [r3, #2]
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ea4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d104      	bne.n	8008eba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f988 	bl	80091c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb8:	e01d      	b.n	8008ef6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7bfa      	ldrb	r2, [r7, #15]
 8008ebe:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fe97 	bl	8009bfa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fa43 	bl	8009358 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee0:	e009      	b.n	8008ef6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eea:	e004      	b.n	8008ef6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f96a 	bl	80091c8 <USBD_CtlError>
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	885b      	ldrh	r3, [r3, #2]
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	4b41      	ldr	r3, [pc, #260]	@ (8009018 <USBD_SetConfig+0x118>)
 8008f12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f14:	4b40      	ldr	r3, [pc, #256]	@ (8009018 <USBD_SetConfig+0x118>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d904      	bls.n	8008f26 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f952 	bl	80091c8 <USBD_CtlError>
 8008f24:	e075      	b.n	8009012 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d002      	beq.n	8008f36 <USBD_SetConfig+0x36>
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d023      	beq.n	8008f7c <USBD_SetConfig+0x7c>
 8008f34:	e062      	b.n	8008ffc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008f36:	4b38      	ldr	r3, [pc, #224]	@ (8009018 <USBD_SetConfig+0x118>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d01a      	beq.n	8008f74 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008f3e:	4b36      	ldr	r3, [pc, #216]	@ (8009018 <USBD_SetConfig+0x118>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2203      	movs	r2, #3
 8008f4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f50:	4b31      	ldr	r3, [pc, #196]	@ (8009018 <USBD_SetConfig+0x118>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff f9e7 	bl	800832a <USBD_SetClassConfig>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d104      	bne.n	8008f6c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008f62:	6839      	ldr	r1, [r7, #0]
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f92f 	bl	80091c8 <USBD_CtlError>
            return;
 8008f6a:	e052      	b.n	8009012 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f9f3 	bl	8009358 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f72:	e04e      	b.n	8009012 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f9ef 	bl	8009358 <USBD_CtlSendStatus>
        break;
 8008f7a:	e04a      	b.n	8009012 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008f7c:	4b26      	ldr	r3, [pc, #152]	@ (8009018 <USBD_SetConfig+0x118>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d112      	bne.n	8008faa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008f8c:	4b22      	ldr	r3, [pc, #136]	@ (8009018 <USBD_SetConfig+0x118>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f96:	4b20      	ldr	r3, [pc, #128]	@ (8009018 <USBD_SetConfig+0x118>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff f9e3 	bl	8008368 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f9d8 	bl	8009358 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008fa8:	e033      	b.n	8009012 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008faa:	4b1b      	ldr	r3, [pc, #108]	@ (8009018 <USBD_SetConfig+0x118>)
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d01d      	beq.n	8008ff4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff f9d1 	bl	8008368 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008fc6:	4b14      	ldr	r3, [pc, #80]	@ (8009018 <USBD_SetConfig+0x118>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008fd0:	4b11      	ldr	r3, [pc, #68]	@ (8009018 <USBD_SetConfig+0x118>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff f9a7 	bl	800832a <USBD_SetClassConfig>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d104      	bne.n	8008fec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f8ef 	bl	80091c8 <USBD_CtlError>
            return;
 8008fea:	e012      	b.n	8009012 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f9b3 	bl	8009358 <USBD_CtlSendStatus>
        break;
 8008ff2:	e00e      	b.n	8009012 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f9af 	bl	8009358 <USBD_CtlSendStatus>
        break;
 8008ffa:	e00a      	b.n	8009012 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f8e2 	bl	80091c8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009004:	4b04      	ldr	r3, [pc, #16]	@ (8009018 <USBD_SetConfig+0x118>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff f9ac 	bl	8008368 <USBD_ClrClassConfig>
        break;
 8009010:	bf00      	nop
    }
  }
}
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	20000598 	.word	0x20000598

0800901c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	88db      	ldrh	r3, [r3, #6]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d004      	beq.n	8009038 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f8c9 	bl	80091c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009036:	e022      	b.n	800907e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800903e:	2b02      	cmp	r3, #2
 8009040:	dc02      	bgt.n	8009048 <USBD_GetConfig+0x2c>
 8009042:	2b00      	cmp	r3, #0
 8009044:	dc03      	bgt.n	800904e <USBD_GetConfig+0x32>
 8009046:	e015      	b.n	8009074 <USBD_GetConfig+0x58>
 8009048:	2b03      	cmp	r3, #3
 800904a:	d00b      	beq.n	8009064 <USBD_GetConfig+0x48>
 800904c:	e012      	b.n	8009074 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	3308      	adds	r3, #8
 8009058:	2201      	movs	r2, #1
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f91d 	bl	800929c <USBD_CtlSendData>
        break;
 8009062:	e00c      	b.n	800907e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3304      	adds	r3, #4
 8009068:	2201      	movs	r2, #1
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f915 	bl	800929c <USBD_CtlSendData>
        break;
 8009072:	e004      	b.n	800907e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f8a6 	bl	80091c8 <USBD_CtlError>
        break;
 800907c:	bf00      	nop
}
 800907e:	bf00      	nop
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009096:	3b01      	subs	r3, #1
 8009098:	2b02      	cmp	r3, #2
 800909a:	d81e      	bhi.n	80090da <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	88db      	ldrh	r3, [r3, #6]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d004      	beq.n	80090ae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f88e 	bl	80091c8 <USBD_CtlError>
        break;
 80090ac:	e01a      	b.n	80090e4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d005      	beq.n	80090ca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f043 0202 	orr.w	r2, r3, #2
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	330c      	adds	r3, #12
 80090ce:	2202      	movs	r2, #2
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f8e2 	bl	800929c <USBD_CtlSendData>
      break;
 80090d8:	e004      	b.n	80090e4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f873 	bl	80091c8 <USBD_CtlError>
      break;
 80090e2:	bf00      	nop
  }
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	885b      	ldrh	r3, [r3, #2]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d106      	bne.n	800910c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f926 	bl	8009358 <USBD_CtlSendStatus>
  }
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009124:	3b01      	subs	r3, #1
 8009126:	2b02      	cmp	r3, #2
 8009128:	d80b      	bhi.n	8009142 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	885b      	ldrh	r3, [r3, #2]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d10c      	bne.n	800914c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f90c 	bl	8009358 <USBD_CtlSendStatus>
      }
      break;
 8009140:	e004      	b.n	800914c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f83f 	bl	80091c8 <USBD_CtlError>
      break;
 800914a:	e000      	b.n	800914e <USBD_ClrFeature+0x3a>
      break;
 800914c:	bf00      	nop
  }
}
 800914e:	bf00      	nop
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009156:	b480      	push	{r7}
 8009158:	b083      	sub	sp, #12
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781a      	ldrb	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	785a      	ldrb	r2, [r3, #1]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	3302      	adds	r3, #2
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	3303      	adds	r3, #3
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	021b      	lsls	r3, r3, #8
 8009180:	b29b      	uxth	r3, r3
 8009182:	4413      	add	r3, r2
 8009184:	b29a      	uxth	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	3304      	adds	r3, #4
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	3305      	adds	r3, #5
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	021b      	lsls	r3, r3, #8
 800919a:	b29b      	uxth	r3, r3
 800919c:	4413      	add	r3, r2
 800919e:	b29a      	uxth	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	3306      	adds	r3, #6
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	3307      	adds	r3, #7
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4413      	add	r3, r2
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	80da      	strh	r2, [r3, #6]

}
 80091be:	bf00      	nop
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bc80      	pop	{r7}
 80091c6:	4770      	bx	lr

080091c8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80091d2:	2180      	movs	r1, #128	@ 0x80
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fca7 	bl	8009b28 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80091da:	2100      	movs	r1, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fca3 	bl	8009b28 <USBD_LL_StallEP>
}
 80091e2:	bf00      	nop
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d032      	beq.n	8009266 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f000 f834 	bl	800926e <USBD_GetLen>
 8009206:	4603      	mov	r3, r0
 8009208:	3301      	adds	r3, #1
 800920a:	b29b      	uxth	r3, r3
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009214:	7dfb      	ldrb	r3, [r7, #23]
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	75fa      	strb	r2, [r7, #23]
 800921a:	461a      	mov	r2, r3
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4413      	add	r3, r2
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	7812      	ldrb	r2, [r2, #0]
 8009224:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	75fa      	strb	r2, [r7, #23]
 800922c:	461a      	mov	r2, r3
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	4413      	add	r3, r2
 8009232:	2203      	movs	r2, #3
 8009234:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009236:	e012      	b.n	800925e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	60fa      	str	r2, [r7, #12]
 800923e:	7dfa      	ldrb	r2, [r7, #23]
 8009240:	1c51      	adds	r1, r2, #1
 8009242:	75f9      	strb	r1, [r7, #23]
 8009244:	4611      	mov	r1, r2
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	440a      	add	r2, r1
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	75fa      	strb	r2, [r7, #23]
 8009254:	461a      	mov	r2, r3
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	4413      	add	r3, r2
 800925a:	2200      	movs	r2, #0
 800925c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e8      	bne.n	8009238 <USBD_GetString+0x4e>
    }
  }
}
 8009266:	bf00      	nop
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800926e:	b480      	push	{r7}
 8009270:	b085      	sub	sp, #20
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800927a:	e005      	b.n	8009288 <USBD_GetLen+0x1a>
  {
    len++;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	3301      	adds	r3, #1
 8009280:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3301      	adds	r3, #1
 8009286:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1f5      	bne.n	800927c <USBD_GetLen+0xe>
  }

  return len;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	bc80      	pop	{r7}
 800929a:	4770      	bx	lr

0800929c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	4613      	mov	r3, r2
 80092a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2202      	movs	r2, #2
 80092ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80092b2:	88fa      	ldrh	r2, [r7, #6]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80092b8:	88fa      	ldrh	r2, [r7, #6]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092be:	88fb      	ldrh	r3, [r7, #6]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	2100      	movs	r1, #0
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fcb7 	bl	8009c38 <USBD_LL_Transmit>

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092e2:	88fb      	ldrh	r3, [r7, #6]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	2100      	movs	r1, #0
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fca5 	bl	8009c38 <USBD_LL_Transmit>

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	4613      	mov	r3, r2
 8009304:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2203      	movs	r2, #3
 800930a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800930e:	88fa      	ldrh	r2, [r7, #6]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009316:	88fa      	ldrh	r2, [r7, #6]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800931e:	88fb      	ldrh	r3, [r7, #6]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	2100      	movs	r1, #0
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fcaa 	bl	8009c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	4613      	mov	r3, r2
 8009340:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	2100      	movs	r1, #0
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 fc98 	bl	8009c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2204      	movs	r2, #4
 8009364:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009368:	2300      	movs	r3, #0
 800936a:	2200      	movs	r2, #0
 800936c:	2100      	movs	r1, #0
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fc62 	bl	8009c38 <USBD_LL_Transmit>

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2205      	movs	r2, #5
 800938a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800938e:	2300      	movs	r3, #0
 8009390:	2200      	movs	r2, #0
 8009392:	2100      	movs	r1, #0
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc72 	bl	8009c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093a8:	2200      	movs	r2, #0
 80093aa:	4912      	ldr	r1, [pc, #72]	@ (80093f4 <MX_USB_DEVICE_Init+0x50>)
 80093ac:	4812      	ldr	r0, [pc, #72]	@ (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093ae:	f7fe ff62 	bl	8008276 <USBD_Init>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093b8:	f7f8 fe2c 	bl	8002014 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093bc:	490f      	ldr	r1, [pc, #60]	@ (80093fc <MX_USB_DEVICE_Init+0x58>)
 80093be:	480e      	ldr	r0, [pc, #56]	@ (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093c0:	f7fe ff84 	bl	80082cc <USBD_RegisterClass>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093ca:	f7f8 fe23 	bl	8002014 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093ce:	490c      	ldr	r1, [pc, #48]	@ (8009400 <MX_USB_DEVICE_Init+0x5c>)
 80093d0:	4809      	ldr	r0, [pc, #36]	@ (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093d2:	f7fe feb5 	bl	8008140 <USBD_CDC_RegisterInterface>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093dc:	f7f8 fe1a 	bl	8002014 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093e0:	4805      	ldr	r0, [pc, #20]	@ (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093e2:	f7fe ff8c 	bl	80082fe <USBD_Start>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093ec:	f7f8 fe12 	bl	8002014 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093f0:	bf00      	nop
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20000148 	.word	0x20000148
 80093f8:	2000059c 	.word	0x2000059c
 80093fc:	2000002c 	.word	0x2000002c
 8009400:	20000138 	.word	0x20000138

08009404 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009408:	2200      	movs	r2, #0
 800940a:	4905      	ldr	r1, [pc, #20]	@ (8009420 <CDC_Init_FS+0x1c>)
 800940c:	4805      	ldr	r0, [pc, #20]	@ (8009424 <CDC_Init_FS+0x20>)
 800940e:	f7fe fead 	bl	800816c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009412:	4905      	ldr	r1, [pc, #20]	@ (8009428 <CDC_Init_FS+0x24>)
 8009414:	4803      	ldr	r0, [pc, #12]	@ (8009424 <CDC_Init_FS+0x20>)
 8009416:	f7fe fec2 	bl	800819e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800941a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800941c:	4618      	mov	r0, r3
 800941e:	bd80      	pop	{r7, pc}
 8009420:	20000c60 	.word	0x20000c60
 8009424:	2000059c 	.word	0x2000059c
 8009428:	20000860 	.word	0x20000860

0800942c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009430:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009432:	4618      	mov	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	bc80      	pop	{r7}
 8009438:	4770      	bx	lr
	...

0800943c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
 8009448:	4613      	mov	r3, r2
 800944a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	2b23      	cmp	r3, #35	@ 0x23
 8009450:	f200 8098 	bhi.w	8009584 <CDC_Control_FS+0x148>
 8009454:	a201      	add	r2, pc, #4	@ (adr r2, 800945c <CDC_Control_FS+0x20>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	08009585 	.word	0x08009585
 8009460:	08009585 	.word	0x08009585
 8009464:	08009585 	.word	0x08009585
 8009468:	08009585 	.word	0x08009585
 800946c:	08009585 	.word	0x08009585
 8009470:	08009585 	.word	0x08009585
 8009474:	08009585 	.word	0x08009585
 8009478:	08009585 	.word	0x08009585
 800947c:	08009585 	.word	0x08009585
 8009480:	08009585 	.word	0x08009585
 8009484:	08009585 	.word	0x08009585
 8009488:	08009585 	.word	0x08009585
 800948c:	08009585 	.word	0x08009585
 8009490:	08009585 	.word	0x08009585
 8009494:	08009585 	.word	0x08009585
 8009498:	08009585 	.word	0x08009585
 800949c:	08009585 	.word	0x08009585
 80094a0:	08009585 	.word	0x08009585
 80094a4:	08009585 	.word	0x08009585
 80094a8:	08009585 	.word	0x08009585
 80094ac:	08009585 	.word	0x08009585
 80094b0:	08009585 	.word	0x08009585
 80094b4:	08009585 	.word	0x08009585
 80094b8:	08009585 	.word	0x08009585
 80094bc:	08009585 	.word	0x08009585
 80094c0:	08009585 	.word	0x08009585
 80094c4:	08009585 	.word	0x08009585
 80094c8:	08009585 	.word	0x08009585
 80094cc:	08009585 	.word	0x08009585
 80094d0:	08009585 	.word	0x08009585
 80094d4:	08009585 	.word	0x08009585
 80094d8:	08009585 	.word	0x08009585
 80094dc:	080094ed 	.word	0x080094ed
 80094e0:	08009531 	.word	0x08009531
 80094e4:	08009585 	.word	0x08009585
 80094e8:	08009585 	.word	0x08009585
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	3301      	adds	r3, #1
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	021b      	lsls	r3, r3, #8
 80094fa:	431a      	orrs	r2, r3
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	3302      	adds	r3, #2
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	041b      	lsls	r3, r3, #16
 8009504:	431a      	orrs	r2, r3
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	3303      	adds	r3, #3
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	061b      	lsls	r3, r3, #24
 800950e:	4313      	orrs	r3, r2
 8009510:	461a      	mov	r2, r3
 8009512:	4b20      	ldr	r3, [pc, #128]	@ (8009594 <CDC_Control_FS+0x158>)
 8009514:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	791a      	ldrb	r2, [r3, #4]
 800951a:	4b1e      	ldr	r3, [pc, #120]	@ (8009594 <CDC_Control_FS+0x158>)
 800951c:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	795a      	ldrb	r2, [r3, #5]
 8009522:	4b1c      	ldr	r3, [pc, #112]	@ (8009594 <CDC_Control_FS+0x158>)
 8009524:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	799a      	ldrb	r2, [r3, #6]
 800952a:	4b1a      	ldr	r3, [pc, #104]	@ (8009594 <CDC_Control_FS+0x158>)
 800952c:	719a      	strb	r2, [r3, #6]
    	break;
 800952e:	e02a      	b.n	8009586 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8009530:	4b18      	ldr	r3, [pc, #96]	@ (8009594 <CDC_Control_FS+0x158>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	b2da      	uxtb	r2, r3
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800953a:	4b16      	ldr	r3, [pc, #88]	@ (8009594 <CDC_Control_FS+0x158>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	0a1a      	lsrs	r2, r3, #8
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	3301      	adds	r3, #1
 8009544:	b2d2      	uxtb	r2, r2
 8009546:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8009548:	4b12      	ldr	r3, [pc, #72]	@ (8009594 <CDC_Control_FS+0x158>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	0c1a      	lsrs	r2, r3, #16
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	3302      	adds	r3, #2
 8009552:	b2d2      	uxtb	r2, r2
 8009554:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 8009556:	4b0f      	ldr	r3, [pc, #60]	@ (8009594 <CDC_Control_FS+0x158>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	0e1a      	lsrs	r2, r3, #24
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	3303      	adds	r3, #3
 8009560:	b2d2      	uxtb	r2, r2
 8009562:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	3304      	adds	r3, #4
 8009568:	4a0a      	ldr	r2, [pc, #40]	@ (8009594 <CDC_Control_FS+0x158>)
 800956a:	7912      	ldrb	r2, [r2, #4]
 800956c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	3305      	adds	r3, #5
 8009572:	4a08      	ldr	r2, [pc, #32]	@ (8009594 <CDC_Control_FS+0x158>)
 8009574:	7952      	ldrb	r2, [r2, #5]
 8009576:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	3306      	adds	r3, #6
 800957c:	4a05      	ldr	r2, [pc, #20]	@ (8009594 <CDC_Control_FS+0x158>)
 800957e:	7992      	ldrb	r2, [r2, #6]
 8009580:	701a      	strb	r2, [r3, #0]
    break;
 8009582:	e000      	b.n	8009586 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009584:	bf00      	nop
  }

  return (USBD_OK);
 8009586:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009588:	4618      	mov	r0, r3
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20000130 	.word	0x20000130

08009598 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_RX_Callback(Buf, Len);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7f7 fe25 	bl	80011f4 <USB_RX_Callback>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	4805      	ldr	r0, [pc, #20]	@ (80095c4 <CDC_Receive_FS+0x2c>)
 80095ae:	f7fe fdf6 	bl	800819e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80095b2:	4804      	ldr	r0, [pc, #16]	@ (80095c4 <CDC_Receive_FS+0x2c>)
 80095b4:	f7fe fe35 	bl	8008222 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80095b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	2000059c 	.word	0x2000059c

080095c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80095d8:	4b0d      	ldr	r3, [pc, #52]	@ (8009610 <CDC_Transmit_FS+0x48>)
 80095da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e00b      	b.n	8009606 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80095ee:	887b      	ldrh	r3, [r7, #2]
 80095f0:	461a      	mov	r2, r3
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	4806      	ldr	r0, [pc, #24]	@ (8009610 <CDC_Transmit_FS+0x48>)
 80095f6:	f7fe fdb9 	bl	800816c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80095fa:	4805      	ldr	r0, [pc, #20]	@ (8009610 <CDC_Transmit_FS+0x48>)
 80095fc:	f7fe fde2 	bl	80081c4 <USBD_CDC_TransmitPacket>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	2000059c 	.word	0x2000059c

08009614 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2212      	movs	r2, #18
 8009624:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009626:	4b03      	ldr	r3, [pc, #12]	@ (8009634 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	20000164 	.word	0x20000164

08009638 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2204      	movs	r2, #4
 8009648:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800964a:	4b03      	ldr	r3, [pc, #12]	@ (8009658 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	20000178 	.word	0x20000178

0800965c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	6039      	str	r1, [r7, #0]
 8009666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d105      	bne.n	800967a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	4907      	ldr	r1, [pc, #28]	@ (8009690 <USBD_FS_ProductStrDescriptor+0x34>)
 8009672:	4808      	ldr	r0, [pc, #32]	@ (8009694 <USBD_FS_ProductStrDescriptor+0x38>)
 8009674:	f7ff fdb9 	bl	80091ea <USBD_GetString>
 8009678:	e004      	b.n	8009684 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	4904      	ldr	r1, [pc, #16]	@ (8009690 <USBD_FS_ProductStrDescriptor+0x34>)
 800967e:	4805      	ldr	r0, [pc, #20]	@ (8009694 <USBD_FS_ProductStrDescriptor+0x38>)
 8009680:	f7ff fdb3 	bl	80091ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009684:	4b02      	ldr	r3, [pc, #8]	@ (8009690 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20001060 	.word	0x20001060
 8009694:	0800e1a4 	.word	0x0800e1a4

08009698 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	6039      	str	r1, [r7, #0]
 80096a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	4904      	ldr	r1, [pc, #16]	@ (80096b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80096a8:	4804      	ldr	r0, [pc, #16]	@ (80096bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80096aa:	f7ff fd9e 	bl	80091ea <USBD_GetString>
  return USBD_StrDesc;
 80096ae:	4b02      	ldr	r3, [pc, #8]	@ (80096b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	20001060 	.word	0x20001060
 80096bc:	0800e1bc 	.word	0x0800e1bc

080096c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	6039      	str	r1, [r7, #0]
 80096ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	221a      	movs	r2, #26
 80096d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096d2:	f000 f843 	bl	800975c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80096d6:	4b02      	ldr	r3, [pc, #8]	@ (80096e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	2000017c 	.word	0x2000017c

080096e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	4603      	mov	r3, r0
 80096ec:	6039      	str	r1, [r7, #0]
 80096ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d105      	bne.n	8009702 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	4907      	ldr	r1, [pc, #28]	@ (8009718 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096fa:	4808      	ldr	r0, [pc, #32]	@ (800971c <USBD_FS_ConfigStrDescriptor+0x38>)
 80096fc:	f7ff fd75 	bl	80091ea <USBD_GetString>
 8009700:	e004      	b.n	800970c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009702:	683a      	ldr	r2, [r7, #0]
 8009704:	4904      	ldr	r1, [pc, #16]	@ (8009718 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009706:	4805      	ldr	r0, [pc, #20]	@ (800971c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009708:	f7ff fd6f 	bl	80091ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800970c:	4b02      	ldr	r3, [pc, #8]	@ (8009718 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20001060 	.word	0x20001060
 800971c:	0800e1d0 	.word	0x0800e1d0

08009720 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	6039      	str	r1, [r7, #0]
 800972a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800972c:	79fb      	ldrb	r3, [r7, #7]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d105      	bne.n	800973e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	4907      	ldr	r1, [pc, #28]	@ (8009754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009736:	4808      	ldr	r0, [pc, #32]	@ (8009758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009738:	f7ff fd57 	bl	80091ea <USBD_GetString>
 800973c:	e004      	b.n	8009748 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	4904      	ldr	r1, [pc, #16]	@ (8009754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009742:	4805      	ldr	r0, [pc, #20]	@ (8009758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009744:	f7ff fd51 	bl	80091ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009748:	4b02      	ldr	r3, [pc, #8]	@ (8009754 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20001060 	.word	0x20001060
 8009758:	0800e1dc 	.word	0x0800e1dc

0800975c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009762:	4b0f      	ldr	r3, [pc, #60]	@ (80097a0 <Get_SerialNum+0x44>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009768:	4b0e      	ldr	r3, [pc, #56]	@ (80097a4 <Get_SerialNum+0x48>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800976e:	4b0e      	ldr	r3, [pc, #56]	@ (80097a8 <Get_SerialNum+0x4c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4413      	add	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d009      	beq.n	8009796 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009782:	2208      	movs	r2, #8
 8009784:	4909      	ldr	r1, [pc, #36]	@ (80097ac <Get_SerialNum+0x50>)
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 f814 	bl	80097b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800978c:	2204      	movs	r2, #4
 800978e:	4908      	ldr	r1, [pc, #32]	@ (80097b0 <Get_SerialNum+0x54>)
 8009790:	68b8      	ldr	r0, [r7, #8]
 8009792:	f000 f80f 	bl	80097b4 <IntToUnicode>
  }
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	1ffff7e8 	.word	0x1ffff7e8
 80097a4:	1ffff7ec 	.word	0x1ffff7ec
 80097a8:	1ffff7f0 	.word	0x1ffff7f0
 80097ac:	2000017e 	.word	0x2000017e
 80097b0:	2000018e 	.word	0x2000018e

080097b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]
 80097ca:	e027      	b.n	800981c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	0f1b      	lsrs	r3, r3, #28
 80097d0:	2b09      	cmp	r3, #9
 80097d2:	d80b      	bhi.n	80097ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	0f1b      	lsrs	r3, r3, #28
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	7dfb      	ldrb	r3, [r7, #23]
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	4619      	mov	r1, r3
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	440b      	add	r3, r1
 80097e4:	3230      	adds	r2, #48	@ 0x30
 80097e6:	b2d2      	uxtb	r2, r2
 80097e8:	701a      	strb	r2, [r3, #0]
 80097ea:	e00a      	b.n	8009802 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	0f1b      	lsrs	r3, r3, #28
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	4619      	mov	r1, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	440b      	add	r3, r1
 80097fc:	3237      	adds	r2, #55	@ 0x37
 80097fe:	b2d2      	uxtb	r2, r2
 8009800:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	011b      	lsls	r3, r3, #4
 8009806:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	005b      	lsls	r3, r3, #1
 800980c:	3301      	adds	r3, #1
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	4413      	add	r3, r2
 8009812:	2200      	movs	r2, #0
 8009814:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	3301      	adds	r3, #1
 800981a:	75fb      	strb	r3, [r7, #23]
 800981c:	7dfa      	ldrb	r2, [r7, #23]
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	429a      	cmp	r2, r3
 8009822:	d3d3      	bcc.n	80097cc <IntToUnicode+0x18>
  }
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop
 8009828:	371c      	adds	r7, #28
 800982a:	46bd      	mov	sp, r7
 800982c:	bc80      	pop	{r7}
 800982e:	4770      	bx	lr

08009830 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a0d      	ldr	r2, [pc, #52]	@ (8009874 <HAL_PCD_MspInit+0x44>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d113      	bne.n	800986a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009842:	4b0d      	ldr	r3, [pc, #52]	@ (8009878 <HAL_PCD_MspInit+0x48>)
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	4a0c      	ldr	r2, [pc, #48]	@ (8009878 <HAL_PCD_MspInit+0x48>)
 8009848:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800984c:	61d3      	str	r3, [r2, #28]
 800984e:	4b0a      	ldr	r3, [pc, #40]	@ (8009878 <HAL_PCD_MspInit+0x48>)
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800985a:	2200      	movs	r2, #0
 800985c:	2100      	movs	r1, #0
 800985e:	2014      	movs	r0, #20
 8009860:	f7f8 fe9b 	bl	800259a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009864:	2014      	movs	r0, #20
 8009866:	f7f8 feb4 	bl	80025d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	40005c00 	.word	0x40005c00
 8009878:	40021000 	.word	0x40021000

0800987c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	f7fe fd7b 	bl	800838e <USBD_LL_SetupStage>
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80098b2:	78fa      	ldrb	r2, [r7, #3]
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	440b      	add	r3, r1
 80098c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	78fb      	ldrb	r3, [r7, #3]
 80098c8:	4619      	mov	r1, r3
 80098ca:	f7fe fdad 	bl	8008428 <USBD_LL_DataOutStage>
}
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80098e8:	78fa      	ldrb	r2, [r7, #3]
 80098ea:	6879      	ldr	r1, [r7, #4]
 80098ec:	4613      	mov	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	440b      	add	r3, r1
 80098f6:	3324      	adds	r3, #36	@ 0x24
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	78fb      	ldrb	r3, [r7, #3]
 80098fc:	4619      	mov	r1, r3
 80098fe:	f7fe fe04 	bl	800850a <USBD_LL_DataInStage>
}
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe ff14 	bl	8008746 <USBD_LL_SOF>
}
 800991e:	bf00      	nop
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800992e:	2301      	movs	r3, #1
 8009930:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	799b      	ldrb	r3, [r3, #6]
 8009936:	2b02      	cmp	r3, #2
 8009938:	d001      	beq.n	800993e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800993a:	f7f8 fb6b 	bl	8002014 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009944:	7bfa      	ldrb	r2, [r7, #15]
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f7fe fec4 	bl	80086d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009954:	4618      	mov	r0, r3
 8009956:	f7fe fe7d 	bl	8008654 <USBD_LL_Reset>
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe febe 	bl	80086f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	7a9b      	ldrb	r3, [r3, #10]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009980:	4b04      	ldr	r3, [pc, #16]	@ (8009994 <HAL_PCD_SuspendCallback+0x30>)
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	4a03      	ldr	r2, [pc, #12]	@ (8009994 <HAL_PCD_SuspendCallback+0x30>)
 8009986:	f043 0306 	orr.w	r3, r3, #6
 800998a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	e000ed00 	.word	0xe000ed00

08009998 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe feb8 	bl	800871c <USBD_LL_Resume>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80099bc:	4a28      	ldr	r2, [pc, #160]	@ (8009a60 <USBD_LL_Init+0xac>)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a26      	ldr	r2, [pc, #152]	@ (8009a60 <USBD_LL_Init+0xac>)
 80099c8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80099cc:	4b24      	ldr	r3, [pc, #144]	@ (8009a60 <USBD_LL_Init+0xac>)
 80099ce:	4a25      	ldr	r2, [pc, #148]	@ (8009a64 <USBD_LL_Init+0xb0>)
 80099d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80099d2:	4b23      	ldr	r3, [pc, #140]	@ (8009a60 <USBD_LL_Init+0xac>)
 80099d4:	2208      	movs	r2, #8
 80099d6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80099d8:	4b21      	ldr	r3, [pc, #132]	@ (8009a60 <USBD_LL_Init+0xac>)
 80099da:	2202      	movs	r2, #2
 80099dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80099de:	4b20      	ldr	r3, [pc, #128]	@ (8009a60 <USBD_LL_Init+0xac>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80099e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009a60 <USBD_LL_Init+0xac>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80099ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009a60 <USBD_LL_Init+0xac>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80099f0:	481b      	ldr	r0, [pc, #108]	@ (8009a60 <USBD_LL_Init+0xac>)
 80099f2:	f7f8 ffa5 	bl	8002940 <HAL_PCD_Init>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80099fc:	f7f8 fb0a 	bl	8002014 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a06:	2318      	movs	r3, #24
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	f7fa fcb6 	bl	800437c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a16:	2358      	movs	r3, #88	@ 0x58
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2180      	movs	r1, #128	@ 0x80
 8009a1c:	f7fa fcae 	bl	800437c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a26:	23c0      	movs	r3, #192	@ 0xc0
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2181      	movs	r1, #129	@ 0x81
 8009a2c:	f7fa fca6 	bl	800437c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a36:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	f7fa fc9d 	bl	800437c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2182      	movs	r1, #130	@ 0x82
 8009a50:	f7fa fc94 	bl	800437c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20001260 	.word	0x20001260
 8009a64:	40005c00 	.word	0x40005c00

08009a68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7f9 f854 	bl	8002b2c <HAL_PCD_Start>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 f94e 	bl	8009d2c <USBD_Get_USB_Status>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	4608      	mov	r0, r1
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	461a      	mov	r2, r3
 8009aac:	4603      	mov	r3, r0
 8009aae:	70fb      	strb	r3, [r7, #3]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70bb      	strb	r3, [r7, #2]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ac6:	78bb      	ldrb	r3, [r7, #2]
 8009ac8:	883a      	ldrh	r2, [r7, #0]
 8009aca:	78f9      	ldrb	r1, [r7, #3]
 8009acc:	f7f9 f9a8 	bl	8002e20 <HAL_PCD_EP_Open>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 f928 	bl	8009d2c <USBD_Get_USB_Status>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	460b      	mov	r3, r1
 8009af4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b04:	78fa      	ldrb	r2, [r7, #3]
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7f9 f9e6 	bl	8002eda <HAL_PCD_EP_Close>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 f909 	bl	8009d2c <USBD_Get_USB_Status>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b42:	78fa      	ldrb	r2, [r7, #3]
 8009b44:	4611      	mov	r1, r2
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7f9 fa8e 	bl	8003068 <HAL_PCD_EP_SetStall>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 f8ea 	bl	8009d2c <USBD_Get_USB_Status>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b80:	78fa      	ldrb	r2, [r7, #3]
 8009b82:	4611      	mov	r1, r2
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7f9 facf 	bl	8003128 <HAL_PCD_EP_ClrStall>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 f8cb 	bl	8009d2c <USBD_Get_USB_Status>
 8009b96:	4603      	mov	r3, r0
 8009b98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	da0b      	bge.n	8009bd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bc6:	68f9      	ldr	r1, [r7, #12]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	440b      	add	r3, r1
 8009bd2:	3312      	adds	r3, #18
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	e00b      	b.n	8009bf0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bde:	68f9      	ldr	r1, [r7, #12]
 8009be0:	4613      	mov	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4413      	add	r3, r2
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	440b      	add	r3, r1
 8009bea:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009bee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bc80      	pop	{r7}
 8009bf8:	4770      	bx	lr

08009bfa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c14:	78fa      	ldrb	r2, [r7, #3]
 8009c16:	4611      	mov	r1, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7f9 f8dd 	bl	8002dd8 <HAL_PCD_SetAddress>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 f881 	bl	8009d2c <USBD_Get_USB_Status>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	607a      	str	r2, [r7, #4]
 8009c42:	461a      	mov	r2, r3
 8009c44:	460b      	mov	r3, r1
 8009c46:	72fb      	strb	r3, [r7, #11]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c5a:	893b      	ldrh	r3, [r7, #8]
 8009c5c:	7af9      	ldrb	r1, [r7, #11]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	f7f9 f9cb 	bl	8002ffa <HAL_PCD_EP_Transmit>
 8009c64:	4603      	mov	r3, r0
 8009c66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 f85e 	bl	8009d2c <USBD_Get_USB_Status>
 8009c70:	4603      	mov	r3, r0
 8009c72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c74:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b086      	sub	sp, #24
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	72fb      	strb	r3, [r7, #11]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ca0:	893b      	ldrh	r3, [r7, #8]
 8009ca2:	7af9      	ldrb	r1, [r7, #11]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	f7f9 f960 	bl	8002f6a <HAL_PCD_EP_Receive>
 8009caa:	4603      	mov	r3, r0
 8009cac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cae:	7dfb      	ldrb	r3, [r7, #23]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f000 f83b 	bl	8009d2c <USBD_Get_USB_Status>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cba:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cd6:	78fa      	ldrb	r2, [r7, #3]
 8009cd8:	4611      	mov	r1, r2
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7f9 f976 	bl	8002fcc <HAL_PCD_EP_GetRxCount>
 8009ce0:	4603      	mov	r3, r0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009cf4:	4b02      	ldr	r3, [pc, #8]	@ (8009d00 <USBD_static_malloc+0x14>)
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr
 8009d00:	20001538 	.word	0x20001538

08009d04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]

}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bc80      	pop	{r7}
 8009d14:	4770      	bx	lr

08009d16 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d16:	b480      	push	{r7}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009d22:	bf00      	nop
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bc80      	pop	{r7}
 8009d2a:	4770      	bx	lr

08009d2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d3a:	79fb      	ldrb	r3, [r7, #7]
 8009d3c:	2b03      	cmp	r3, #3
 8009d3e:	d817      	bhi.n	8009d70 <USBD_Get_USB_Status+0x44>
 8009d40:	a201      	add	r2, pc, #4	@ (adr r2, 8009d48 <USBD_Get_USB_Status+0x1c>)
 8009d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d46:	bf00      	nop
 8009d48:	08009d59 	.word	0x08009d59
 8009d4c:	08009d5f 	.word	0x08009d5f
 8009d50:	08009d65 	.word	0x08009d65
 8009d54:	08009d6b 	.word	0x08009d6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d5c:	e00b      	b.n	8009d76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d5e:	2302      	movs	r3, #2
 8009d60:	73fb      	strb	r3, [r7, #15]
    break;
 8009d62:	e008      	b.n	8009d76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d64:	2301      	movs	r3, #1
 8009d66:	73fb      	strb	r3, [r7, #15]
    break;
 8009d68:	e005      	b.n	8009d76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d6e:	e002      	b.n	8009d76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d70:	2302      	movs	r3, #2
 8009d72:	73fb      	strb	r3, [r7, #15]
    break;
 8009d74:	bf00      	nop
  }
  return usb_status;
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bc80      	pop	{r7}
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop

08009d84 <atoff>:
 8009d84:	2100      	movs	r1, #0
 8009d86:	f000 bdfb 	b.w	800a980 <strtof>

08009d8a <sulp>:
 8009d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8e:	460f      	mov	r7, r1
 8009d90:	4690      	mov	r8, r2
 8009d92:	f003 fb27 	bl	800d3e4 <__ulp>
 8009d96:	4604      	mov	r4, r0
 8009d98:	460d      	mov	r5, r1
 8009d9a:	f1b8 0f00 	cmp.w	r8, #0
 8009d9e:	d011      	beq.n	8009dc4 <sulp+0x3a>
 8009da0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009da4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	dd0b      	ble.n	8009dc4 <sulp+0x3a>
 8009dac:	2400      	movs	r4, #0
 8009dae:	051b      	lsls	r3, r3, #20
 8009db0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009db4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009db8:	4622      	mov	r2, r4
 8009dba:	462b      	mov	r3, r5
 8009dbc:	f7f6 fb8c 	bl	80004d8 <__aeabi_dmul>
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dcc:	0000      	movs	r0, r0
	...

08009dd0 <_strtod_l>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	b09f      	sub	sp, #124	@ 0x7c
 8009dd6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009dd8:	2200      	movs	r2, #0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	921a      	str	r2, [sp, #104]	@ 0x68
 8009dde:	f04f 0a00 	mov.w	sl, #0
 8009de2:	f04f 0b00 	mov.w	fp, #0
 8009de6:	460a      	mov	r2, r1
 8009de8:	9005      	str	r0, [sp, #20]
 8009dea:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dec:	7811      	ldrb	r1, [r2, #0]
 8009dee:	292b      	cmp	r1, #43	@ 0x2b
 8009df0:	d048      	beq.n	8009e84 <_strtod_l+0xb4>
 8009df2:	d836      	bhi.n	8009e62 <_strtod_l+0x92>
 8009df4:	290d      	cmp	r1, #13
 8009df6:	d830      	bhi.n	8009e5a <_strtod_l+0x8a>
 8009df8:	2908      	cmp	r1, #8
 8009dfa:	d830      	bhi.n	8009e5e <_strtod_l+0x8e>
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	d039      	beq.n	8009e74 <_strtod_l+0xa4>
 8009e00:	2200      	movs	r2, #0
 8009e02:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009e06:	782a      	ldrb	r2, [r5, #0]
 8009e08:	2a30      	cmp	r2, #48	@ 0x30
 8009e0a:	f040 80b0 	bne.w	8009f6e <_strtod_l+0x19e>
 8009e0e:	786a      	ldrb	r2, [r5, #1]
 8009e10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e14:	2a58      	cmp	r2, #88	@ 0x58
 8009e16:	d16c      	bne.n	8009ef2 <_strtod_l+0x122>
 8009e18:	9302      	str	r3, [sp, #8]
 8009e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e1c:	4a8f      	ldr	r2, [pc, #572]	@ (800a05c <_strtod_l+0x28c>)
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	ab1a      	add	r3, sp, #104	@ 0x68
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	9805      	ldr	r0, [sp, #20]
 8009e26:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009e28:	a919      	add	r1, sp, #100	@ 0x64
 8009e2a:	f002 fbd5 	bl	800c5d8 <__gethex>
 8009e2e:	f010 060f 	ands.w	r6, r0, #15
 8009e32:	4604      	mov	r4, r0
 8009e34:	d005      	beq.n	8009e42 <_strtod_l+0x72>
 8009e36:	2e06      	cmp	r6, #6
 8009e38:	d126      	bne.n	8009e88 <_strtod_l+0xb8>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	3501      	adds	r5, #1
 8009e3e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009e40:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f040 8582 	bne.w	800a94e <_strtod_l+0xb7e>
 8009e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e4c:	b1bb      	cbz	r3, 8009e7e <_strtod_l+0xae>
 8009e4e:	4650      	mov	r0, sl
 8009e50:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009e54:	b01f      	add	sp, #124	@ 0x7c
 8009e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5a:	2920      	cmp	r1, #32
 8009e5c:	d1d0      	bne.n	8009e00 <_strtod_l+0x30>
 8009e5e:	3201      	adds	r2, #1
 8009e60:	e7c3      	b.n	8009dea <_strtod_l+0x1a>
 8009e62:	292d      	cmp	r1, #45	@ 0x2d
 8009e64:	d1cc      	bne.n	8009e00 <_strtod_l+0x30>
 8009e66:	2101      	movs	r1, #1
 8009e68:	910e      	str	r1, [sp, #56]	@ 0x38
 8009e6a:	1c51      	adds	r1, r2, #1
 8009e6c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e6e:	7852      	ldrb	r2, [r2, #1]
 8009e70:	2a00      	cmp	r2, #0
 8009e72:	d1c7      	bne.n	8009e04 <_strtod_l+0x34>
 8009e74:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e76:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f040 8566 	bne.w	800a94a <_strtod_l+0xb7a>
 8009e7e:	4650      	mov	r0, sl
 8009e80:	4659      	mov	r1, fp
 8009e82:	e7e7      	b.n	8009e54 <_strtod_l+0x84>
 8009e84:	2100      	movs	r1, #0
 8009e86:	e7ef      	b.n	8009e68 <_strtod_l+0x98>
 8009e88:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e8a:	b13a      	cbz	r2, 8009e9c <_strtod_l+0xcc>
 8009e8c:	2135      	movs	r1, #53	@ 0x35
 8009e8e:	a81c      	add	r0, sp, #112	@ 0x70
 8009e90:	f003 fb98 	bl	800d5c4 <__copybits>
 8009e94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e96:	9805      	ldr	r0, [sp, #20]
 8009e98:	f002 ff78 	bl	800cd8c <_Bfree>
 8009e9c:	3e01      	subs	r6, #1
 8009e9e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009ea0:	2e04      	cmp	r6, #4
 8009ea2:	d806      	bhi.n	8009eb2 <_strtod_l+0xe2>
 8009ea4:	e8df f006 	tbb	[pc, r6]
 8009ea8:	201d0314 	.word	0x201d0314
 8009eac:	14          	.byte	0x14
 8009ead:	00          	.byte	0x00
 8009eae:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009eb2:	05e1      	lsls	r1, r4, #23
 8009eb4:	bf48      	it	mi
 8009eb6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009eba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ebe:	0d1b      	lsrs	r3, r3, #20
 8009ec0:	051b      	lsls	r3, r3, #20
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1bd      	bne.n	8009e42 <_strtod_l+0x72>
 8009ec6:	f001 fc09 	bl	800b6dc <__errno>
 8009eca:	2322      	movs	r3, #34	@ 0x22
 8009ecc:	6003      	str	r3, [r0, #0]
 8009ece:	e7b8      	b.n	8009e42 <_strtod_l+0x72>
 8009ed0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009ed4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009ed8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009edc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ee0:	e7e7      	b.n	8009eb2 <_strtod_l+0xe2>
 8009ee2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a060 <_strtod_l+0x290>
 8009ee6:	e7e4      	b.n	8009eb2 <_strtod_l+0xe2>
 8009ee8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009eec:	f04f 3aff 	mov.w	sl, #4294967295
 8009ef0:	e7df      	b.n	8009eb2 <_strtod_l+0xe2>
 8009ef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ef4:	1c5a      	adds	r2, r3, #1
 8009ef6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ef8:	785b      	ldrb	r3, [r3, #1]
 8009efa:	2b30      	cmp	r3, #48	@ 0x30
 8009efc:	d0f9      	beq.n	8009ef2 <_strtod_l+0x122>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d09f      	beq.n	8009e42 <_strtod_l+0x72>
 8009f02:	2301      	movs	r3, #1
 8009f04:	2700      	movs	r7, #0
 8009f06:	220a      	movs	r2, #10
 8009f08:	46b9      	mov	r9, r7
 8009f0a:	9308      	str	r3, [sp, #32]
 8009f0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f0e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009f10:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f12:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009f14:	7805      	ldrb	r5, [r0, #0]
 8009f16:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f1a:	b2d9      	uxtb	r1, r3
 8009f1c:	2909      	cmp	r1, #9
 8009f1e:	d928      	bls.n	8009f72 <_strtod_l+0x1a2>
 8009f20:	2201      	movs	r2, #1
 8009f22:	4950      	ldr	r1, [pc, #320]	@ (800a064 <_strtod_l+0x294>)
 8009f24:	f001 fb21 	bl	800b56a <strncmp>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d032      	beq.n	8009f92 <_strtod_l+0x1c2>
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	462a      	mov	r2, r5
 8009f30:	4603      	mov	r3, r0
 8009f32:	464d      	mov	r5, r9
 8009f34:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f36:	2a65      	cmp	r2, #101	@ 0x65
 8009f38:	d001      	beq.n	8009f3e <_strtod_l+0x16e>
 8009f3a:	2a45      	cmp	r2, #69	@ 0x45
 8009f3c:	d114      	bne.n	8009f68 <_strtod_l+0x198>
 8009f3e:	b91d      	cbnz	r5, 8009f48 <_strtod_l+0x178>
 8009f40:	9a08      	ldr	r2, [sp, #32]
 8009f42:	4302      	orrs	r2, r0
 8009f44:	d096      	beq.n	8009e74 <_strtod_l+0xa4>
 8009f46:	2500      	movs	r5, #0
 8009f48:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009f4a:	1c62      	adds	r2, r4, #1
 8009f4c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f4e:	7862      	ldrb	r2, [r4, #1]
 8009f50:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f52:	d07a      	beq.n	800a04a <_strtod_l+0x27a>
 8009f54:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f56:	d07e      	beq.n	800a056 <_strtod_l+0x286>
 8009f58:	f04f 0c00 	mov.w	ip, #0
 8009f5c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f60:	2909      	cmp	r1, #9
 8009f62:	f240 8085 	bls.w	800a070 <_strtod_l+0x2a0>
 8009f66:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f68:	f04f 0800 	mov.w	r8, #0
 8009f6c:	e0a5      	b.n	800a0ba <_strtod_l+0x2ea>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e7c8      	b.n	8009f04 <_strtod_l+0x134>
 8009f72:	f1b9 0f08 	cmp.w	r9, #8
 8009f76:	bfd8      	it	le
 8009f78:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009f7a:	f100 0001 	add.w	r0, r0, #1
 8009f7e:	bfd6      	itet	le
 8009f80:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f84:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009f88:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009f8a:	f109 0901 	add.w	r9, r9, #1
 8009f8e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f90:	e7bf      	b.n	8009f12 <_strtod_l+0x142>
 8009f92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f94:	1c5a      	adds	r2, r3, #1
 8009f96:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f98:	785a      	ldrb	r2, [r3, #1]
 8009f9a:	f1b9 0f00 	cmp.w	r9, #0
 8009f9e:	d03b      	beq.n	800a018 <_strtod_l+0x248>
 8009fa0:	464d      	mov	r5, r9
 8009fa2:	900a      	str	r0, [sp, #40]	@ 0x28
 8009fa4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009fa8:	2b09      	cmp	r3, #9
 8009faa:	d912      	bls.n	8009fd2 <_strtod_l+0x202>
 8009fac:	2301      	movs	r3, #1
 8009fae:	e7c2      	b.n	8009f36 <_strtod_l+0x166>
 8009fb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	1c5a      	adds	r2, r3, #1
 8009fb6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fb8:	785a      	ldrb	r2, [r3, #1]
 8009fba:	2a30      	cmp	r2, #48	@ 0x30
 8009fbc:	d0f8      	beq.n	8009fb0 <_strtod_l+0x1e0>
 8009fbe:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009fc2:	2b08      	cmp	r3, #8
 8009fc4:	f200 84c8 	bhi.w	800a958 <_strtod_l+0xb88>
 8009fc8:	900a      	str	r0, [sp, #40]	@ 0x28
 8009fca:	2000      	movs	r0, #0
 8009fcc:	4605      	mov	r5, r0
 8009fce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fd2:	3a30      	subs	r2, #48	@ 0x30
 8009fd4:	f100 0301 	add.w	r3, r0, #1
 8009fd8:	d018      	beq.n	800a00c <_strtod_l+0x23c>
 8009fda:	462e      	mov	r6, r5
 8009fdc:	f04f 0e0a 	mov.w	lr, #10
 8009fe0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009fe2:	4419      	add	r1, r3
 8009fe4:	910a      	str	r1, [sp, #40]	@ 0x28
 8009fe6:	1c71      	adds	r1, r6, #1
 8009fe8:	eba1 0c05 	sub.w	ip, r1, r5
 8009fec:	4563      	cmp	r3, ip
 8009fee:	dc15      	bgt.n	800a01c <_strtod_l+0x24c>
 8009ff0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009ff4:	182b      	adds	r3, r5, r0
 8009ff6:	2b08      	cmp	r3, #8
 8009ff8:	f105 0501 	add.w	r5, r5, #1
 8009ffc:	4405      	add	r5, r0
 8009ffe:	dc1a      	bgt.n	800a036 <_strtod_l+0x266>
 800a000:	230a      	movs	r3, #10
 800a002:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a004:	fb03 2301 	mla	r3, r3, r1, r2
 800a008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a00a:	2300      	movs	r3, #0
 800a00c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a00e:	4618      	mov	r0, r3
 800a010:	1c51      	adds	r1, r2, #1
 800a012:	9119      	str	r1, [sp, #100]	@ 0x64
 800a014:	7852      	ldrb	r2, [r2, #1]
 800a016:	e7c5      	b.n	8009fa4 <_strtod_l+0x1d4>
 800a018:	4648      	mov	r0, r9
 800a01a:	e7ce      	b.n	8009fba <_strtod_l+0x1ea>
 800a01c:	2e08      	cmp	r6, #8
 800a01e:	dc05      	bgt.n	800a02c <_strtod_l+0x25c>
 800a020:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a022:	fb0e f606 	mul.w	r6, lr, r6
 800a026:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a028:	460e      	mov	r6, r1
 800a02a:	e7dc      	b.n	8009fe6 <_strtod_l+0x216>
 800a02c:	2910      	cmp	r1, #16
 800a02e:	bfd8      	it	le
 800a030:	fb0e f707 	mulle.w	r7, lr, r7
 800a034:	e7f8      	b.n	800a028 <_strtod_l+0x258>
 800a036:	2b0f      	cmp	r3, #15
 800a038:	bfdc      	itt	le
 800a03a:	230a      	movle	r3, #10
 800a03c:	fb03 2707 	mlale	r7, r3, r7, r2
 800a040:	e7e3      	b.n	800a00a <_strtod_l+0x23a>
 800a042:	2300      	movs	r3, #0
 800a044:	930a      	str	r3, [sp, #40]	@ 0x28
 800a046:	2301      	movs	r3, #1
 800a048:	e77a      	b.n	8009f40 <_strtod_l+0x170>
 800a04a:	f04f 0c00 	mov.w	ip, #0
 800a04e:	1ca2      	adds	r2, r4, #2
 800a050:	9219      	str	r2, [sp, #100]	@ 0x64
 800a052:	78a2      	ldrb	r2, [r4, #2]
 800a054:	e782      	b.n	8009f5c <_strtod_l+0x18c>
 800a056:	f04f 0c01 	mov.w	ip, #1
 800a05a:	e7f8      	b.n	800a04e <_strtod_l+0x27e>
 800a05c:	0800e450 	.word	0x0800e450
 800a060:	7ff00000 	.word	0x7ff00000
 800a064:	0800e20e 	.word	0x0800e20e
 800a068:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a06a:	1c51      	adds	r1, r2, #1
 800a06c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a06e:	7852      	ldrb	r2, [r2, #1]
 800a070:	2a30      	cmp	r2, #48	@ 0x30
 800a072:	d0f9      	beq.n	800a068 <_strtod_l+0x298>
 800a074:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a078:	2908      	cmp	r1, #8
 800a07a:	f63f af75 	bhi.w	8009f68 <_strtod_l+0x198>
 800a07e:	f04f 080a 	mov.w	r8, #10
 800a082:	3a30      	subs	r2, #48	@ 0x30
 800a084:	9209      	str	r2, [sp, #36]	@ 0x24
 800a086:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a088:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a08a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a08c:	1c56      	adds	r6, r2, #1
 800a08e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a090:	7852      	ldrb	r2, [r2, #1]
 800a092:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a096:	f1be 0f09 	cmp.w	lr, #9
 800a09a:	d939      	bls.n	800a110 <_strtod_l+0x340>
 800a09c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a09e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a0a2:	1a76      	subs	r6, r6, r1
 800a0a4:	2e08      	cmp	r6, #8
 800a0a6:	dc03      	bgt.n	800a0b0 <_strtod_l+0x2e0>
 800a0a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0aa:	4588      	cmp	r8, r1
 800a0ac:	bfa8      	it	ge
 800a0ae:	4688      	movge	r8, r1
 800a0b0:	f1bc 0f00 	cmp.w	ip, #0
 800a0b4:	d001      	beq.n	800a0ba <_strtod_l+0x2ea>
 800a0b6:	f1c8 0800 	rsb	r8, r8, #0
 800a0ba:	2d00      	cmp	r5, #0
 800a0bc:	d14e      	bne.n	800a15c <_strtod_l+0x38c>
 800a0be:	9908      	ldr	r1, [sp, #32]
 800a0c0:	4308      	orrs	r0, r1
 800a0c2:	f47f aebe 	bne.w	8009e42 <_strtod_l+0x72>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f47f aed4 	bne.w	8009e74 <_strtod_l+0xa4>
 800a0cc:	2a69      	cmp	r2, #105	@ 0x69
 800a0ce:	d028      	beq.n	800a122 <_strtod_l+0x352>
 800a0d0:	dc25      	bgt.n	800a11e <_strtod_l+0x34e>
 800a0d2:	2a49      	cmp	r2, #73	@ 0x49
 800a0d4:	d025      	beq.n	800a122 <_strtod_l+0x352>
 800a0d6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a0d8:	f47f aecc 	bne.w	8009e74 <_strtod_l+0xa4>
 800a0dc:	4999      	ldr	r1, [pc, #612]	@ (800a344 <_strtod_l+0x574>)
 800a0de:	a819      	add	r0, sp, #100	@ 0x64
 800a0e0:	f002 fc9c 	bl	800ca1c <__match>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	f43f aec5 	beq.w	8009e74 <_strtod_l+0xa4>
 800a0ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b28      	cmp	r3, #40	@ 0x28
 800a0f0:	d12e      	bne.n	800a150 <_strtod_l+0x380>
 800a0f2:	4995      	ldr	r1, [pc, #596]	@ (800a348 <_strtod_l+0x578>)
 800a0f4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a0f6:	a819      	add	r0, sp, #100	@ 0x64
 800a0f8:	f002 fca4 	bl	800ca44 <__hexnan>
 800a0fc:	2805      	cmp	r0, #5
 800a0fe:	d127      	bne.n	800a150 <_strtod_l+0x380>
 800a100:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a102:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a106:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a10a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a10e:	e698      	b.n	8009e42 <_strtod_l+0x72>
 800a110:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a112:	fb08 2101 	mla	r1, r8, r1, r2
 800a116:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a11a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a11c:	e7b5      	b.n	800a08a <_strtod_l+0x2ba>
 800a11e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a120:	e7da      	b.n	800a0d8 <_strtod_l+0x308>
 800a122:	498a      	ldr	r1, [pc, #552]	@ (800a34c <_strtod_l+0x57c>)
 800a124:	a819      	add	r0, sp, #100	@ 0x64
 800a126:	f002 fc79 	bl	800ca1c <__match>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	f43f aea2 	beq.w	8009e74 <_strtod_l+0xa4>
 800a130:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a132:	4987      	ldr	r1, [pc, #540]	@ (800a350 <_strtod_l+0x580>)
 800a134:	3b01      	subs	r3, #1
 800a136:	a819      	add	r0, sp, #100	@ 0x64
 800a138:	9319      	str	r3, [sp, #100]	@ 0x64
 800a13a:	f002 fc6f 	bl	800ca1c <__match>
 800a13e:	b910      	cbnz	r0, 800a146 <_strtod_l+0x376>
 800a140:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a142:	3301      	adds	r3, #1
 800a144:	9319      	str	r3, [sp, #100]	@ 0x64
 800a146:	f04f 0a00 	mov.w	sl, #0
 800a14a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800a354 <_strtod_l+0x584>
 800a14e:	e678      	b.n	8009e42 <_strtod_l+0x72>
 800a150:	4881      	ldr	r0, [pc, #516]	@ (800a358 <_strtod_l+0x588>)
 800a152:	f001 fb0d 	bl	800b770 <nan>
 800a156:	4682      	mov	sl, r0
 800a158:	468b      	mov	fp, r1
 800a15a:	e672      	b.n	8009e42 <_strtod_l+0x72>
 800a15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a15e:	f1b9 0f00 	cmp.w	r9, #0
 800a162:	bf08      	it	eq
 800a164:	46a9      	moveq	r9, r5
 800a166:	eba8 0303 	sub.w	r3, r8, r3
 800a16a:	2d10      	cmp	r5, #16
 800a16c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a16e:	462c      	mov	r4, r5
 800a170:	9309      	str	r3, [sp, #36]	@ 0x24
 800a172:	bfa8      	it	ge
 800a174:	2410      	movge	r4, #16
 800a176:	f7f6 f935 	bl	80003e4 <__aeabi_ui2d>
 800a17a:	2d09      	cmp	r5, #9
 800a17c:	4682      	mov	sl, r0
 800a17e:	468b      	mov	fp, r1
 800a180:	dc11      	bgt.n	800a1a6 <_strtod_l+0x3d6>
 800a182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a184:	2b00      	cmp	r3, #0
 800a186:	f43f ae5c 	beq.w	8009e42 <_strtod_l+0x72>
 800a18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18c:	dd76      	ble.n	800a27c <_strtod_l+0x4ac>
 800a18e:	2b16      	cmp	r3, #22
 800a190:	dc5d      	bgt.n	800a24e <_strtod_l+0x47e>
 800a192:	4972      	ldr	r1, [pc, #456]	@ (800a35c <_strtod_l+0x58c>)
 800a194:	4652      	mov	r2, sl
 800a196:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a19a:	465b      	mov	r3, fp
 800a19c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1a0:	f7f6 f99a 	bl	80004d8 <__aeabi_dmul>
 800a1a4:	e7d7      	b.n	800a156 <_strtod_l+0x386>
 800a1a6:	4b6d      	ldr	r3, [pc, #436]	@ (800a35c <_strtod_l+0x58c>)
 800a1a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a1b0:	f7f6 f992 	bl	80004d8 <__aeabi_dmul>
 800a1b4:	4682      	mov	sl, r0
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	468b      	mov	fp, r1
 800a1ba:	f7f6 f913 	bl	80003e4 <__aeabi_ui2d>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4650      	mov	r0, sl
 800a1c4:	4659      	mov	r1, fp
 800a1c6:	f7f5 ffd1 	bl	800016c <__adddf3>
 800a1ca:	2d0f      	cmp	r5, #15
 800a1cc:	4682      	mov	sl, r0
 800a1ce:	468b      	mov	fp, r1
 800a1d0:	ddd7      	ble.n	800a182 <_strtod_l+0x3b2>
 800a1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d4:	1b2c      	subs	r4, r5, r4
 800a1d6:	441c      	add	r4, r3
 800a1d8:	2c00      	cmp	r4, #0
 800a1da:	f340 8093 	ble.w	800a304 <_strtod_l+0x534>
 800a1de:	f014 030f 	ands.w	r3, r4, #15
 800a1e2:	d00a      	beq.n	800a1fa <_strtod_l+0x42a>
 800a1e4:	495d      	ldr	r1, [pc, #372]	@ (800a35c <_strtod_l+0x58c>)
 800a1e6:	4652      	mov	r2, sl
 800a1e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1f0:	465b      	mov	r3, fp
 800a1f2:	f7f6 f971 	bl	80004d8 <__aeabi_dmul>
 800a1f6:	4682      	mov	sl, r0
 800a1f8:	468b      	mov	fp, r1
 800a1fa:	f034 040f 	bics.w	r4, r4, #15
 800a1fe:	d073      	beq.n	800a2e8 <_strtod_l+0x518>
 800a200:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a204:	dd49      	ble.n	800a29a <_strtod_l+0x4ca>
 800a206:	2400      	movs	r4, #0
 800a208:	46a0      	mov	r8, r4
 800a20a:	46a1      	mov	r9, r4
 800a20c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a20e:	2322      	movs	r3, #34	@ 0x22
 800a210:	f04f 0a00 	mov.w	sl, #0
 800a214:	9a05      	ldr	r2, [sp, #20]
 800a216:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800a354 <_strtod_l+0x584>
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f43f ae0f 	beq.w	8009e42 <_strtod_l+0x72>
 800a224:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a226:	9805      	ldr	r0, [sp, #20]
 800a228:	f002 fdb0 	bl	800cd8c <_Bfree>
 800a22c:	4649      	mov	r1, r9
 800a22e:	9805      	ldr	r0, [sp, #20]
 800a230:	f002 fdac 	bl	800cd8c <_Bfree>
 800a234:	4641      	mov	r1, r8
 800a236:	9805      	ldr	r0, [sp, #20]
 800a238:	f002 fda8 	bl	800cd8c <_Bfree>
 800a23c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a23e:	9805      	ldr	r0, [sp, #20]
 800a240:	f002 fda4 	bl	800cd8c <_Bfree>
 800a244:	4621      	mov	r1, r4
 800a246:	9805      	ldr	r0, [sp, #20]
 800a248:	f002 fda0 	bl	800cd8c <_Bfree>
 800a24c:	e5f9      	b.n	8009e42 <_strtod_l+0x72>
 800a24e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a250:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a254:	4293      	cmp	r3, r2
 800a256:	dbbc      	blt.n	800a1d2 <_strtod_l+0x402>
 800a258:	4c40      	ldr	r4, [pc, #256]	@ (800a35c <_strtod_l+0x58c>)
 800a25a:	f1c5 050f 	rsb	r5, r5, #15
 800a25e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a262:	4652      	mov	r2, sl
 800a264:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a268:	465b      	mov	r3, fp
 800a26a:	f7f6 f935 	bl	80004d8 <__aeabi_dmul>
 800a26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a270:	1b5d      	subs	r5, r3, r5
 800a272:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a276:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a27a:	e791      	b.n	800a1a0 <_strtod_l+0x3d0>
 800a27c:	3316      	adds	r3, #22
 800a27e:	dba8      	blt.n	800a1d2 <_strtod_l+0x402>
 800a280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a282:	4650      	mov	r0, sl
 800a284:	eba3 0808 	sub.w	r8, r3, r8
 800a288:	4b34      	ldr	r3, [pc, #208]	@ (800a35c <_strtod_l+0x58c>)
 800a28a:	4659      	mov	r1, fp
 800a28c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a290:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a294:	f7f6 fa4a 	bl	800072c <__aeabi_ddiv>
 800a298:	e75d      	b.n	800a156 <_strtod_l+0x386>
 800a29a:	2300      	movs	r3, #0
 800a29c:	4650      	mov	r0, sl
 800a29e:	4659      	mov	r1, fp
 800a2a0:	461e      	mov	r6, r3
 800a2a2:	4f2f      	ldr	r7, [pc, #188]	@ (800a360 <_strtod_l+0x590>)
 800a2a4:	1124      	asrs	r4, r4, #4
 800a2a6:	2c01      	cmp	r4, #1
 800a2a8:	dc21      	bgt.n	800a2ee <_strtod_l+0x51e>
 800a2aa:	b10b      	cbz	r3, 800a2b0 <_strtod_l+0x4e0>
 800a2ac:	4682      	mov	sl, r0
 800a2ae:	468b      	mov	fp, r1
 800a2b0:	492b      	ldr	r1, [pc, #172]	@ (800a360 <_strtod_l+0x590>)
 800a2b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a2b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a2ba:	4652      	mov	r2, sl
 800a2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2c0:	465b      	mov	r3, fp
 800a2c2:	f7f6 f909 	bl	80004d8 <__aeabi_dmul>
 800a2c6:	4b23      	ldr	r3, [pc, #140]	@ (800a354 <_strtod_l+0x584>)
 800a2c8:	460a      	mov	r2, r1
 800a2ca:	400b      	ands	r3, r1
 800a2cc:	4925      	ldr	r1, [pc, #148]	@ (800a364 <_strtod_l+0x594>)
 800a2ce:	4682      	mov	sl, r0
 800a2d0:	428b      	cmp	r3, r1
 800a2d2:	d898      	bhi.n	800a206 <_strtod_l+0x436>
 800a2d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a2d8:	428b      	cmp	r3, r1
 800a2da:	bf86      	itte	hi
 800a2dc:	f04f 3aff 	movhi.w	sl, #4294967295
 800a2e0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800a368 <_strtod_l+0x598>
 800a2e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9308      	str	r3, [sp, #32]
 800a2ec:	e076      	b.n	800a3dc <_strtod_l+0x60c>
 800a2ee:	07e2      	lsls	r2, r4, #31
 800a2f0:	d504      	bpl.n	800a2fc <_strtod_l+0x52c>
 800a2f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f6:	f7f6 f8ef 	bl	80004d8 <__aeabi_dmul>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	3601      	adds	r6, #1
 800a2fe:	1064      	asrs	r4, r4, #1
 800a300:	3708      	adds	r7, #8
 800a302:	e7d0      	b.n	800a2a6 <_strtod_l+0x4d6>
 800a304:	d0f0      	beq.n	800a2e8 <_strtod_l+0x518>
 800a306:	4264      	negs	r4, r4
 800a308:	f014 020f 	ands.w	r2, r4, #15
 800a30c:	d00a      	beq.n	800a324 <_strtod_l+0x554>
 800a30e:	4b13      	ldr	r3, [pc, #76]	@ (800a35c <_strtod_l+0x58c>)
 800a310:	4650      	mov	r0, sl
 800a312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a316:	4659      	mov	r1, fp
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f6 fa06 	bl	800072c <__aeabi_ddiv>
 800a320:	4682      	mov	sl, r0
 800a322:	468b      	mov	fp, r1
 800a324:	1124      	asrs	r4, r4, #4
 800a326:	d0df      	beq.n	800a2e8 <_strtod_l+0x518>
 800a328:	2c1f      	cmp	r4, #31
 800a32a:	dd1f      	ble.n	800a36c <_strtod_l+0x59c>
 800a32c:	2400      	movs	r4, #0
 800a32e:	46a0      	mov	r8, r4
 800a330:	46a1      	mov	r9, r4
 800a332:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a334:	2322      	movs	r3, #34	@ 0x22
 800a336:	9a05      	ldr	r2, [sp, #20]
 800a338:	f04f 0a00 	mov.w	sl, #0
 800a33c:	f04f 0b00 	mov.w	fp, #0
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	e76b      	b.n	800a21c <_strtod_l+0x44c>
 800a344:	0800e21d 	.word	0x0800e21d
 800a348:	0800e43c 	.word	0x0800e43c
 800a34c:	0800e215 	.word	0x0800e215
 800a350:	0800e2fc 	.word	0x0800e2fc
 800a354:	7ff00000 	.word	0x7ff00000
 800a358:	0800e2f8 	.word	0x0800e2f8
 800a35c:	0800e4c8 	.word	0x0800e4c8
 800a360:	0800e4a0 	.word	0x0800e4a0
 800a364:	7ca00000 	.word	0x7ca00000
 800a368:	7fefffff 	.word	0x7fefffff
 800a36c:	f014 0310 	ands.w	r3, r4, #16
 800a370:	bf18      	it	ne
 800a372:	236a      	movne	r3, #106	@ 0x6a
 800a374:	4650      	mov	r0, sl
 800a376:	9308      	str	r3, [sp, #32]
 800a378:	4659      	mov	r1, fp
 800a37a:	2300      	movs	r3, #0
 800a37c:	4e77      	ldr	r6, [pc, #476]	@ (800a55c <_strtod_l+0x78c>)
 800a37e:	07e7      	lsls	r7, r4, #31
 800a380:	d504      	bpl.n	800a38c <_strtod_l+0x5bc>
 800a382:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a386:	f7f6 f8a7 	bl	80004d8 <__aeabi_dmul>
 800a38a:	2301      	movs	r3, #1
 800a38c:	1064      	asrs	r4, r4, #1
 800a38e:	f106 0608 	add.w	r6, r6, #8
 800a392:	d1f4      	bne.n	800a37e <_strtod_l+0x5ae>
 800a394:	b10b      	cbz	r3, 800a39a <_strtod_l+0x5ca>
 800a396:	4682      	mov	sl, r0
 800a398:	468b      	mov	fp, r1
 800a39a:	9b08      	ldr	r3, [sp, #32]
 800a39c:	b1b3      	cbz	r3, 800a3cc <_strtod_l+0x5fc>
 800a39e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a3a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	4659      	mov	r1, fp
 800a3aa:	dd0f      	ble.n	800a3cc <_strtod_l+0x5fc>
 800a3ac:	2b1f      	cmp	r3, #31
 800a3ae:	dd58      	ble.n	800a462 <_strtod_l+0x692>
 800a3b0:	2b34      	cmp	r3, #52	@ 0x34
 800a3b2:	bfd8      	it	le
 800a3b4:	f04f 33ff 	movle.w	r3, #4294967295
 800a3b8:	f04f 0a00 	mov.w	sl, #0
 800a3bc:	bfcf      	iteee	gt
 800a3be:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a3c2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a3c6:	4093      	lslle	r3, r2
 800a3c8:	ea03 0b01 	andle.w	fp, r3, r1
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	4650      	mov	r0, sl
 800a3d2:	4659      	mov	r1, fp
 800a3d4:	f7f6 fae8 	bl	80009a8 <__aeabi_dcmpeq>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d1a7      	bne.n	800a32c <_strtod_l+0x55c>
 800a3dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3de:	464a      	mov	r2, r9
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	9805      	ldr	r0, [sp, #20]
 800a3e8:	f002 fd38 	bl	800ce5c <__s2b>
 800a3ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	f43f af09 	beq.w	800a206 <_strtod_l+0x436>
 800a3f4:	2400      	movs	r4, #0
 800a3f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3fa:	2a00      	cmp	r2, #0
 800a3fc:	eba3 0308 	sub.w	r3, r3, r8
 800a400:	bfa8      	it	ge
 800a402:	2300      	movge	r3, #0
 800a404:	46a0      	mov	r8, r4
 800a406:	9312      	str	r3, [sp, #72]	@ 0x48
 800a408:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a40c:	9316      	str	r3, [sp, #88]	@ 0x58
 800a40e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a410:	9805      	ldr	r0, [sp, #20]
 800a412:	6859      	ldr	r1, [r3, #4]
 800a414:	f002 fc7a 	bl	800cd0c <_Balloc>
 800a418:	4681      	mov	r9, r0
 800a41a:	2800      	cmp	r0, #0
 800a41c:	f43f aef7 	beq.w	800a20e <_strtod_l+0x43e>
 800a420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a422:	300c      	adds	r0, #12
 800a424:	691a      	ldr	r2, [r3, #16]
 800a426:	f103 010c 	add.w	r1, r3, #12
 800a42a:	3202      	adds	r2, #2
 800a42c:	0092      	lsls	r2, r2, #2
 800a42e:	f001 f990 	bl	800b752 <memcpy>
 800a432:	ab1c      	add	r3, sp, #112	@ 0x70
 800a434:	9301      	str	r3, [sp, #4]
 800a436:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	4652      	mov	r2, sl
 800a43c:	465b      	mov	r3, fp
 800a43e:	9805      	ldr	r0, [sp, #20]
 800a440:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a444:	f003 f836 	bl	800d4b4 <__d2b>
 800a448:	901a      	str	r0, [sp, #104]	@ 0x68
 800a44a:	2800      	cmp	r0, #0
 800a44c:	f43f aedf 	beq.w	800a20e <_strtod_l+0x43e>
 800a450:	2101      	movs	r1, #1
 800a452:	9805      	ldr	r0, [sp, #20]
 800a454:	f002 fd98 	bl	800cf88 <__i2b>
 800a458:	4680      	mov	r8, r0
 800a45a:	b948      	cbnz	r0, 800a470 <_strtod_l+0x6a0>
 800a45c:	f04f 0800 	mov.w	r8, #0
 800a460:	e6d5      	b.n	800a20e <_strtod_l+0x43e>
 800a462:	f04f 32ff 	mov.w	r2, #4294967295
 800a466:	fa02 f303 	lsl.w	r3, r2, r3
 800a46a:	ea03 0a0a 	and.w	sl, r3, sl
 800a46e:	e7ad      	b.n	800a3cc <_strtod_l+0x5fc>
 800a470:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a472:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a474:	2d00      	cmp	r5, #0
 800a476:	bfab      	itete	ge
 800a478:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a47a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a47c:	18ef      	addge	r7, r5, r3
 800a47e:	1b5e      	sublt	r6, r3, r5
 800a480:	9b08      	ldr	r3, [sp, #32]
 800a482:	bfa8      	it	ge
 800a484:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a486:	eba5 0503 	sub.w	r5, r5, r3
 800a48a:	4415      	add	r5, r2
 800a48c:	4b34      	ldr	r3, [pc, #208]	@ (800a560 <_strtod_l+0x790>)
 800a48e:	f105 35ff 	add.w	r5, r5, #4294967295
 800a492:	bfb8      	it	lt
 800a494:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a496:	429d      	cmp	r5, r3
 800a498:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a49c:	da50      	bge.n	800a540 <_strtod_l+0x770>
 800a49e:	1b5b      	subs	r3, r3, r5
 800a4a0:	2b1f      	cmp	r3, #31
 800a4a2:	f04f 0101 	mov.w	r1, #1
 800a4a6:	eba2 0203 	sub.w	r2, r2, r3
 800a4aa:	dc3d      	bgt.n	800a528 <_strtod_l+0x758>
 800a4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4b6:	18bd      	adds	r5, r7, r2
 800a4b8:	9b08      	ldr	r3, [sp, #32]
 800a4ba:	42af      	cmp	r7, r5
 800a4bc:	4416      	add	r6, r2
 800a4be:	441e      	add	r6, r3
 800a4c0:	463b      	mov	r3, r7
 800a4c2:	bfa8      	it	ge
 800a4c4:	462b      	movge	r3, r5
 800a4c6:	42b3      	cmp	r3, r6
 800a4c8:	bfa8      	it	ge
 800a4ca:	4633      	movge	r3, r6
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	bfc2      	ittt	gt
 800a4d0:	1aed      	subgt	r5, r5, r3
 800a4d2:	1af6      	subgt	r6, r6, r3
 800a4d4:	1aff      	subgt	r7, r7, r3
 800a4d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	dd16      	ble.n	800a50a <_strtod_l+0x73a>
 800a4dc:	4641      	mov	r1, r8
 800a4de:	461a      	mov	r2, r3
 800a4e0:	9805      	ldr	r0, [sp, #20]
 800a4e2:	f002 fe09 	bl	800d0f8 <__pow5mult>
 800a4e6:	4680      	mov	r8, r0
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d0b7      	beq.n	800a45c <_strtod_l+0x68c>
 800a4ec:	4601      	mov	r1, r0
 800a4ee:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4f0:	9805      	ldr	r0, [sp, #20]
 800a4f2:	f002 fd5f 	bl	800cfb4 <__multiply>
 800a4f6:	900a      	str	r0, [sp, #40]	@ 0x28
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	f43f ae88 	beq.w	800a20e <_strtod_l+0x43e>
 800a4fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a500:	9805      	ldr	r0, [sp, #20]
 800a502:	f002 fc43 	bl	800cd8c <_Bfree>
 800a506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a508:	931a      	str	r3, [sp, #104]	@ 0x68
 800a50a:	2d00      	cmp	r5, #0
 800a50c:	dc1d      	bgt.n	800a54a <_strtod_l+0x77a>
 800a50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a510:	2b00      	cmp	r3, #0
 800a512:	dd27      	ble.n	800a564 <_strtod_l+0x794>
 800a514:	4649      	mov	r1, r9
 800a516:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a518:	9805      	ldr	r0, [sp, #20]
 800a51a:	f002 fded 	bl	800d0f8 <__pow5mult>
 800a51e:	4681      	mov	r9, r0
 800a520:	bb00      	cbnz	r0, 800a564 <_strtod_l+0x794>
 800a522:	f04f 0900 	mov.w	r9, #0
 800a526:	e672      	b.n	800a20e <_strtod_l+0x43e>
 800a528:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a52c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a530:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a534:	35e2      	adds	r5, #226	@ 0xe2
 800a536:	fa01 f305 	lsl.w	r3, r1, r5
 800a53a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a53c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a53e:	e7ba      	b.n	800a4b6 <_strtod_l+0x6e6>
 800a540:	2300      	movs	r3, #0
 800a542:	9310      	str	r3, [sp, #64]	@ 0x40
 800a544:	2301      	movs	r3, #1
 800a546:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a548:	e7b5      	b.n	800a4b6 <_strtod_l+0x6e6>
 800a54a:	462a      	mov	r2, r5
 800a54c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a54e:	9805      	ldr	r0, [sp, #20]
 800a550:	f002 fe2c 	bl	800d1ac <__lshift>
 800a554:	901a      	str	r0, [sp, #104]	@ 0x68
 800a556:	2800      	cmp	r0, #0
 800a558:	d1d9      	bne.n	800a50e <_strtod_l+0x73e>
 800a55a:	e658      	b.n	800a20e <_strtod_l+0x43e>
 800a55c:	0800e468 	.word	0x0800e468
 800a560:	fffffc02 	.word	0xfffffc02
 800a564:	2e00      	cmp	r6, #0
 800a566:	dd07      	ble.n	800a578 <_strtod_l+0x7a8>
 800a568:	4649      	mov	r1, r9
 800a56a:	4632      	mov	r2, r6
 800a56c:	9805      	ldr	r0, [sp, #20]
 800a56e:	f002 fe1d 	bl	800d1ac <__lshift>
 800a572:	4681      	mov	r9, r0
 800a574:	2800      	cmp	r0, #0
 800a576:	d0d4      	beq.n	800a522 <_strtod_l+0x752>
 800a578:	2f00      	cmp	r7, #0
 800a57a:	dd08      	ble.n	800a58e <_strtod_l+0x7be>
 800a57c:	4641      	mov	r1, r8
 800a57e:	463a      	mov	r2, r7
 800a580:	9805      	ldr	r0, [sp, #20]
 800a582:	f002 fe13 	bl	800d1ac <__lshift>
 800a586:	4680      	mov	r8, r0
 800a588:	2800      	cmp	r0, #0
 800a58a:	f43f ae40 	beq.w	800a20e <_strtod_l+0x43e>
 800a58e:	464a      	mov	r2, r9
 800a590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a592:	9805      	ldr	r0, [sp, #20]
 800a594:	f002 fe92 	bl	800d2bc <__mdiff>
 800a598:	4604      	mov	r4, r0
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f43f ae37 	beq.w	800a20e <_strtod_l+0x43e>
 800a5a0:	68c3      	ldr	r3, [r0, #12]
 800a5a2:	4641      	mov	r1, r8
 800a5a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60c3      	str	r3, [r0, #12]
 800a5aa:	f002 fe6b 	bl	800d284 <__mcmp>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	da3d      	bge.n	800a62e <_strtod_l+0x85e>
 800a5b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5b4:	ea53 030a 	orrs.w	r3, r3, sl
 800a5b8:	d163      	bne.n	800a682 <_strtod_l+0x8b2>
 800a5ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d15f      	bne.n	800a682 <_strtod_l+0x8b2>
 800a5c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5c6:	0d1b      	lsrs	r3, r3, #20
 800a5c8:	051b      	lsls	r3, r3, #20
 800a5ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5ce:	d958      	bls.n	800a682 <_strtod_l+0x8b2>
 800a5d0:	6963      	ldr	r3, [r4, #20]
 800a5d2:	b913      	cbnz	r3, 800a5da <_strtod_l+0x80a>
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	dd53      	ble.n	800a682 <_strtod_l+0x8b2>
 800a5da:	4621      	mov	r1, r4
 800a5dc:	2201      	movs	r2, #1
 800a5de:	9805      	ldr	r0, [sp, #20]
 800a5e0:	f002 fde4 	bl	800d1ac <__lshift>
 800a5e4:	4641      	mov	r1, r8
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	f002 fe4c 	bl	800d284 <__mcmp>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	dd48      	ble.n	800a682 <_strtod_l+0x8b2>
 800a5f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5f4:	9a08      	ldr	r2, [sp, #32]
 800a5f6:	0d1b      	lsrs	r3, r3, #20
 800a5f8:	051b      	lsls	r3, r3, #20
 800a5fa:	2a00      	cmp	r2, #0
 800a5fc:	d062      	beq.n	800a6c4 <_strtod_l+0x8f4>
 800a5fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a602:	d85f      	bhi.n	800a6c4 <_strtod_l+0x8f4>
 800a604:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a608:	f67f ae94 	bls.w	800a334 <_strtod_l+0x564>
 800a60c:	4650      	mov	r0, sl
 800a60e:	4659      	mov	r1, fp
 800a610:	4ba3      	ldr	r3, [pc, #652]	@ (800a8a0 <_strtod_l+0xad0>)
 800a612:	2200      	movs	r2, #0
 800a614:	f7f5 ff60 	bl	80004d8 <__aeabi_dmul>
 800a618:	4ba2      	ldr	r3, [pc, #648]	@ (800a8a4 <_strtod_l+0xad4>)
 800a61a:	4682      	mov	sl, r0
 800a61c:	400b      	ands	r3, r1
 800a61e:	468b      	mov	fp, r1
 800a620:	2b00      	cmp	r3, #0
 800a622:	f47f adff 	bne.w	800a224 <_strtod_l+0x454>
 800a626:	2322      	movs	r3, #34	@ 0x22
 800a628:	9a05      	ldr	r2, [sp, #20]
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	e5fa      	b.n	800a224 <_strtod_l+0x454>
 800a62e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a632:	d165      	bne.n	800a700 <_strtod_l+0x930>
 800a634:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a636:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a63a:	b35a      	cbz	r2, 800a694 <_strtod_l+0x8c4>
 800a63c:	4a9a      	ldr	r2, [pc, #616]	@ (800a8a8 <_strtod_l+0xad8>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d12b      	bne.n	800a69a <_strtod_l+0x8ca>
 800a642:	9b08      	ldr	r3, [sp, #32]
 800a644:	4651      	mov	r1, sl
 800a646:	b303      	cbz	r3, 800a68a <_strtod_l+0x8ba>
 800a648:	465a      	mov	r2, fp
 800a64a:	4b96      	ldr	r3, [pc, #600]	@ (800a8a4 <_strtod_l+0xad4>)
 800a64c:	4013      	ands	r3, r2
 800a64e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a652:	f04f 32ff 	mov.w	r2, #4294967295
 800a656:	d81b      	bhi.n	800a690 <_strtod_l+0x8c0>
 800a658:	0d1b      	lsrs	r3, r3, #20
 800a65a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a65e:	fa02 f303 	lsl.w	r3, r2, r3
 800a662:	4299      	cmp	r1, r3
 800a664:	d119      	bne.n	800a69a <_strtod_l+0x8ca>
 800a666:	4b91      	ldr	r3, [pc, #580]	@ (800a8ac <_strtod_l+0xadc>)
 800a668:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d102      	bne.n	800a674 <_strtod_l+0x8a4>
 800a66e:	3101      	adds	r1, #1
 800a670:	f43f adcd 	beq.w	800a20e <_strtod_l+0x43e>
 800a674:	f04f 0a00 	mov.w	sl, #0
 800a678:	4b8a      	ldr	r3, [pc, #552]	@ (800a8a4 <_strtod_l+0xad4>)
 800a67a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a67c:	401a      	ands	r2, r3
 800a67e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a682:	9b08      	ldr	r3, [sp, #32]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1c1      	bne.n	800a60c <_strtod_l+0x83c>
 800a688:	e5cc      	b.n	800a224 <_strtod_l+0x454>
 800a68a:	f04f 33ff 	mov.w	r3, #4294967295
 800a68e:	e7e8      	b.n	800a662 <_strtod_l+0x892>
 800a690:	4613      	mov	r3, r2
 800a692:	e7e6      	b.n	800a662 <_strtod_l+0x892>
 800a694:	ea53 030a 	orrs.w	r3, r3, sl
 800a698:	d0aa      	beq.n	800a5f0 <_strtod_l+0x820>
 800a69a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a69c:	b1db      	cbz	r3, 800a6d6 <_strtod_l+0x906>
 800a69e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6a0:	4213      	tst	r3, r2
 800a6a2:	d0ee      	beq.n	800a682 <_strtod_l+0x8b2>
 800a6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6a6:	4650      	mov	r0, sl
 800a6a8:	4659      	mov	r1, fp
 800a6aa:	9a08      	ldr	r2, [sp, #32]
 800a6ac:	b1bb      	cbz	r3, 800a6de <_strtod_l+0x90e>
 800a6ae:	f7ff fb6c 	bl	8009d8a <sulp>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6ba:	f7f5 fd57 	bl	800016c <__adddf3>
 800a6be:	4682      	mov	sl, r0
 800a6c0:	468b      	mov	fp, r1
 800a6c2:	e7de      	b.n	800a682 <_strtod_l+0x8b2>
 800a6c4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a6c8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6cc:	f04f 3aff 	mov.w	sl, #4294967295
 800a6d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6d4:	e7d5      	b.n	800a682 <_strtod_l+0x8b2>
 800a6d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6d8:	ea13 0f0a 	tst.w	r3, sl
 800a6dc:	e7e1      	b.n	800a6a2 <_strtod_l+0x8d2>
 800a6de:	f7ff fb54 	bl	8009d8a <sulp>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6ea:	f7f5 fd3d 	bl	8000168 <__aeabi_dsub>
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	4682      	mov	sl, r0
 800a6f4:	468b      	mov	fp, r1
 800a6f6:	f7f6 f957 	bl	80009a8 <__aeabi_dcmpeq>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	d0c1      	beq.n	800a682 <_strtod_l+0x8b2>
 800a6fe:	e619      	b.n	800a334 <_strtod_l+0x564>
 800a700:	4641      	mov	r1, r8
 800a702:	4620      	mov	r0, r4
 800a704:	f002 ff2e 	bl	800d564 <__ratio>
 800a708:	2200      	movs	r2, #0
 800a70a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1
 800a712:	f7f6 f95d 	bl	80009d0 <__aeabi_dcmple>
 800a716:	2800      	cmp	r0, #0
 800a718:	d06d      	beq.n	800a7f6 <_strtod_l+0xa26>
 800a71a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d178      	bne.n	800a812 <_strtod_l+0xa42>
 800a720:	f1ba 0f00 	cmp.w	sl, #0
 800a724:	d156      	bne.n	800a7d4 <_strtod_l+0xa04>
 800a726:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d158      	bne.n	800a7e2 <_strtod_l+0xa12>
 800a730:	2200      	movs	r2, #0
 800a732:	4630      	mov	r0, r6
 800a734:	4639      	mov	r1, r7
 800a736:	4b5e      	ldr	r3, [pc, #376]	@ (800a8b0 <_strtod_l+0xae0>)
 800a738:	f7f6 f940 	bl	80009bc <__aeabi_dcmplt>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d157      	bne.n	800a7f0 <_strtod_l+0xa20>
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	2200      	movs	r2, #0
 800a746:	4b5b      	ldr	r3, [pc, #364]	@ (800a8b4 <_strtod_l+0xae4>)
 800a748:	f7f5 fec6 	bl	80004d8 <__aeabi_dmul>
 800a74c:	4606      	mov	r6, r0
 800a74e:	460f      	mov	r7, r1
 800a750:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a754:	9606      	str	r6, [sp, #24]
 800a756:	9307      	str	r3, [sp, #28]
 800a758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a75c:	4d51      	ldr	r5, [pc, #324]	@ (800a8a4 <_strtod_l+0xad4>)
 800a75e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a764:	401d      	ands	r5, r3
 800a766:	4b54      	ldr	r3, [pc, #336]	@ (800a8b8 <_strtod_l+0xae8>)
 800a768:	429d      	cmp	r5, r3
 800a76a:	f040 80ab 	bne.w	800a8c4 <_strtod_l+0xaf4>
 800a76e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a770:	4650      	mov	r0, sl
 800a772:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a776:	4659      	mov	r1, fp
 800a778:	f002 fe34 	bl	800d3e4 <__ulp>
 800a77c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a780:	f7f5 feaa 	bl	80004d8 <__aeabi_dmul>
 800a784:	4652      	mov	r2, sl
 800a786:	465b      	mov	r3, fp
 800a788:	f7f5 fcf0 	bl	800016c <__adddf3>
 800a78c:	460b      	mov	r3, r1
 800a78e:	4945      	ldr	r1, [pc, #276]	@ (800a8a4 <_strtod_l+0xad4>)
 800a790:	4a4a      	ldr	r2, [pc, #296]	@ (800a8bc <_strtod_l+0xaec>)
 800a792:	4019      	ands	r1, r3
 800a794:	4291      	cmp	r1, r2
 800a796:	4682      	mov	sl, r0
 800a798:	d942      	bls.n	800a820 <_strtod_l+0xa50>
 800a79a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a79c:	4b43      	ldr	r3, [pc, #268]	@ (800a8ac <_strtod_l+0xadc>)
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d103      	bne.n	800a7aa <_strtod_l+0x9da>
 800a7a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	f43f ad32 	beq.w	800a20e <_strtod_l+0x43e>
 800a7aa:	f04f 3aff 	mov.w	sl, #4294967295
 800a7ae:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800a8ac <_strtod_l+0xadc>
 800a7b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7b4:	9805      	ldr	r0, [sp, #20]
 800a7b6:	f002 fae9 	bl	800cd8c <_Bfree>
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	9805      	ldr	r0, [sp, #20]
 800a7be:	f002 fae5 	bl	800cd8c <_Bfree>
 800a7c2:	4641      	mov	r1, r8
 800a7c4:	9805      	ldr	r0, [sp, #20]
 800a7c6:	f002 fae1 	bl	800cd8c <_Bfree>
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	9805      	ldr	r0, [sp, #20]
 800a7ce:	f002 fadd 	bl	800cd8c <_Bfree>
 800a7d2:	e61c      	b.n	800a40e <_strtod_l+0x63e>
 800a7d4:	f1ba 0f01 	cmp.w	sl, #1
 800a7d8:	d103      	bne.n	800a7e2 <_strtod_l+0xa12>
 800a7da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f43f ada9 	beq.w	800a334 <_strtod_l+0x564>
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	4b36      	ldr	r3, [pc, #216]	@ (800a8c0 <_strtod_l+0xaf0>)
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7ec:	4f30      	ldr	r7, [pc, #192]	@ (800a8b0 <_strtod_l+0xae0>)
 800a7ee:	e7b3      	b.n	800a758 <_strtod_l+0x988>
 800a7f0:	2600      	movs	r6, #0
 800a7f2:	4f30      	ldr	r7, [pc, #192]	@ (800a8b4 <_strtod_l+0xae4>)
 800a7f4:	e7ac      	b.n	800a750 <_strtod_l+0x980>
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	4639      	mov	r1, r7
 800a7fa:	4b2e      	ldr	r3, [pc, #184]	@ (800a8b4 <_strtod_l+0xae4>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f7f5 fe6b 	bl	80004d8 <__aeabi_dmul>
 800a802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a804:	4606      	mov	r6, r0
 800a806:	460f      	mov	r7, r1
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0a1      	beq.n	800a750 <_strtod_l+0x980>
 800a80c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a810:	e7a2      	b.n	800a758 <_strtod_l+0x988>
 800a812:	2200      	movs	r2, #0
 800a814:	4b26      	ldr	r3, [pc, #152]	@ (800a8b0 <_strtod_l+0xae0>)
 800a816:	4616      	mov	r6, r2
 800a818:	461f      	mov	r7, r3
 800a81a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a81e:	e79b      	b.n	800a758 <_strtod_l+0x988>
 800a820:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a824:	9b08      	ldr	r3, [sp, #32]
 800a826:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1c1      	bne.n	800a7b2 <_strtod_l+0x9e2>
 800a82e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a832:	0d1b      	lsrs	r3, r3, #20
 800a834:	051b      	lsls	r3, r3, #20
 800a836:	429d      	cmp	r5, r3
 800a838:	d1bb      	bne.n	800a7b2 <_strtod_l+0x9e2>
 800a83a:	4630      	mov	r0, r6
 800a83c:	4639      	mov	r1, r7
 800a83e:	f7f6 fca3 	bl	8001188 <__aeabi_d2lz>
 800a842:	f7f5 fe1b 	bl	800047c <__aeabi_l2d>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f5 fc8b 	bl	8000168 <__aeabi_dsub>
 800a852:	460b      	mov	r3, r1
 800a854:	4602      	mov	r2, r0
 800a856:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a85a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a85e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a860:	ea46 060a 	orr.w	r6, r6, sl
 800a864:	431e      	orrs	r6, r3
 800a866:	d06a      	beq.n	800a93e <_strtod_l+0xb6e>
 800a868:	a309      	add	r3, pc, #36	@ (adr r3, 800a890 <_strtod_l+0xac0>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	f7f6 f8a5 	bl	80009bc <__aeabi_dcmplt>
 800a872:	2800      	cmp	r0, #0
 800a874:	f47f acd6 	bne.w	800a224 <_strtod_l+0x454>
 800a878:	a307      	add	r3, pc, #28	@ (adr r3, 800a898 <_strtod_l+0xac8>)
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a882:	f7f6 f8b9 	bl	80009f8 <__aeabi_dcmpgt>
 800a886:	2800      	cmp	r0, #0
 800a888:	d093      	beq.n	800a7b2 <_strtod_l+0x9e2>
 800a88a:	e4cb      	b.n	800a224 <_strtod_l+0x454>
 800a88c:	f3af 8000 	nop.w
 800a890:	94a03595 	.word	0x94a03595
 800a894:	3fdfffff 	.word	0x3fdfffff
 800a898:	35afe535 	.word	0x35afe535
 800a89c:	3fe00000 	.word	0x3fe00000
 800a8a0:	39500000 	.word	0x39500000
 800a8a4:	7ff00000 	.word	0x7ff00000
 800a8a8:	000fffff 	.word	0x000fffff
 800a8ac:	7fefffff 	.word	0x7fefffff
 800a8b0:	3ff00000 	.word	0x3ff00000
 800a8b4:	3fe00000 	.word	0x3fe00000
 800a8b8:	7fe00000 	.word	0x7fe00000
 800a8bc:	7c9fffff 	.word	0x7c9fffff
 800a8c0:	bff00000 	.word	0xbff00000
 800a8c4:	9b08      	ldr	r3, [sp, #32]
 800a8c6:	b323      	cbz	r3, 800a912 <_strtod_l+0xb42>
 800a8c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a8cc:	d821      	bhi.n	800a912 <_strtod_l+0xb42>
 800a8ce:	a328      	add	r3, pc, #160	@ (adr r3, 800a970 <_strtod_l+0xba0>)
 800a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	f7f6 f87a 	bl	80009d0 <__aeabi_dcmple>
 800a8dc:	b1a0      	cbz	r0, 800a908 <_strtod_l+0xb38>
 800a8de:	4639      	mov	r1, r7
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f7f6 f8d1 	bl	8000a88 <__aeabi_d2uiz>
 800a8e6:	2801      	cmp	r0, #1
 800a8e8:	bf38      	it	cc
 800a8ea:	2001      	movcc	r0, #1
 800a8ec:	f7f5 fd7a 	bl	80003e4 <__aeabi_ui2d>
 800a8f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	460f      	mov	r7, r1
 800a8f6:	b9fb      	cbnz	r3, 800a938 <_strtod_l+0xb68>
 800a8f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8fc:	9014      	str	r0, [sp, #80]	@ 0x50
 800a8fe:	9315      	str	r3, [sp, #84]	@ 0x54
 800a900:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a904:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a908:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a90a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a90e:	1b5b      	subs	r3, r3, r5
 800a910:	9311      	str	r3, [sp, #68]	@ 0x44
 800a912:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a916:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a91a:	f002 fd63 	bl	800d3e4 <__ulp>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	4650      	mov	r0, sl
 800a924:	4659      	mov	r1, fp
 800a926:	f7f5 fdd7 	bl	80004d8 <__aeabi_dmul>
 800a92a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a92e:	f7f5 fc1d 	bl	800016c <__adddf3>
 800a932:	4682      	mov	sl, r0
 800a934:	468b      	mov	fp, r1
 800a936:	e775      	b.n	800a824 <_strtod_l+0xa54>
 800a938:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a93c:	e7e0      	b.n	800a900 <_strtod_l+0xb30>
 800a93e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a978 <_strtod_l+0xba8>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f7f6 f83a 	bl	80009bc <__aeabi_dcmplt>
 800a948:	e79d      	b.n	800a886 <_strtod_l+0xab6>
 800a94a:	2300      	movs	r3, #0
 800a94c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a94e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a950:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	f7ff ba79 	b.w	8009e4a <_strtod_l+0x7a>
 800a958:	2a65      	cmp	r2, #101	@ 0x65
 800a95a:	f43f ab72 	beq.w	800a042 <_strtod_l+0x272>
 800a95e:	2a45      	cmp	r2, #69	@ 0x45
 800a960:	f43f ab6f 	beq.w	800a042 <_strtod_l+0x272>
 800a964:	2301      	movs	r3, #1
 800a966:	f7ff bbaa 	b.w	800a0be <_strtod_l+0x2ee>
 800a96a:	bf00      	nop
 800a96c:	f3af 8000 	nop.w
 800a970:	ffc00000 	.word	0xffc00000
 800a974:	41dfffff 	.word	0x41dfffff
 800a978:	94a03595 	.word	0x94a03595
 800a97c:	3fcfffff 	.word	0x3fcfffff

0800a980 <strtof>:
 800a980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a984:	4d24      	ldr	r5, [pc, #144]	@ (800aa18 <strtof+0x98>)
 800a986:	460a      	mov	r2, r1
 800a988:	4b24      	ldr	r3, [pc, #144]	@ (800aa1c <strtof+0x9c>)
 800a98a:	4601      	mov	r1, r0
 800a98c:	6828      	ldr	r0, [r5, #0]
 800a98e:	f7ff fa1f 	bl	8009dd0 <_strtod_l>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4606      	mov	r6, r0
 800a998:	460f      	mov	r7, r1
 800a99a:	f7f6 f837 	bl	8000a0c <__aeabi_dcmpun>
 800a99e:	b168      	cbz	r0, 800a9bc <strtof+0x3c>
 800a9a0:	2f00      	cmp	r7, #0
 800a9a2:	481f      	ldr	r0, [pc, #124]	@ (800aa20 <strtof+0xa0>)
 800a9a4:	da06      	bge.n	800a9b4 <strtof+0x34>
 800a9a6:	f000 fee9 	bl	800b77c <nanf>
 800a9aa:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b8:	f000 bee0 	b.w	800b77c <nanf>
 800a9bc:	4639      	mov	r1, r7
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f7f6 f882 	bl	8000ac8 <__aeabi_d2f>
 800a9c4:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	4916      	ldr	r1, [pc, #88]	@ (800aa24 <strtof+0xa4>)
 800a9cc:	4640      	mov	r0, r8
 800a9ce:	f7f6 fb9f 	bl	8001110 <__aeabi_fcmpun>
 800a9d2:	b9b0      	cbnz	r0, 800aa02 <strtof+0x82>
 800a9d4:	4640      	mov	r0, r8
 800a9d6:	4913      	ldr	r1, [pc, #76]	@ (800aa24 <strtof+0xa4>)
 800a9d8:	f7f6 fb7c 	bl	80010d4 <__aeabi_fcmple>
 800a9dc:	b988      	cbnz	r0, 800aa02 <strtof+0x82>
 800a9de:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800a9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	4649      	mov	r1, r9
 800a9ea:	4b0f      	ldr	r3, [pc, #60]	@ (800aa28 <strtof+0xa8>)
 800a9ec:	f7f6 f80e 	bl	8000a0c <__aeabi_dcmpun>
 800a9f0:	b970      	cbnz	r0, 800aa10 <strtof+0x90>
 800a9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800aa28 <strtof+0xa8>)
 800a9fc:	f7f5 ffe8 	bl	80009d0 <__aeabi_dcmple>
 800aa00:	b930      	cbnz	r0, 800aa10 <strtof+0x90>
 800aa02:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800aa06:	d1d2      	bne.n	800a9ae <strtof+0x2e>
 800aa08:	4b08      	ldr	r3, [pc, #32]	@ (800aa2c <strtof+0xac>)
 800aa0a:	403b      	ands	r3, r7
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0ce      	beq.n	800a9ae <strtof+0x2e>
 800aa10:	2222      	movs	r2, #34	@ 0x22
 800aa12:	682b      	ldr	r3, [r5, #0]
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	e7ca      	b.n	800a9ae <strtof+0x2e>
 800aa18:	20000310 	.word	0x20000310
 800aa1c:	200001a4 	.word	0x200001a4
 800aa20:	0800e2f8 	.word	0x0800e2f8
 800aa24:	7f7fffff 	.word	0x7f7fffff
 800aa28:	7fefffff 	.word	0x7fefffff
 800aa2c:	7ff00000 	.word	0x7ff00000

0800aa30 <__cvt>:
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa36:	461d      	mov	r5, r3
 800aa38:	bfbb      	ittet	lt
 800aa3a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800aa3e:	461d      	movlt	r5, r3
 800aa40:	2300      	movge	r3, #0
 800aa42:	232d      	movlt	r3, #45	@ 0x2d
 800aa44:	b088      	sub	sp, #32
 800aa46:	4614      	mov	r4, r2
 800aa48:	bfb8      	it	lt
 800aa4a:	4614      	movlt	r4, r2
 800aa4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aa4e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800aa50:	7013      	strb	r3, [r2, #0]
 800aa52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa54:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800aa58:	f023 0820 	bic.w	r8, r3, #32
 800aa5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa60:	d005      	beq.n	800aa6e <__cvt+0x3e>
 800aa62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aa66:	d100      	bne.n	800aa6a <__cvt+0x3a>
 800aa68:	3601      	adds	r6, #1
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	e000      	b.n	800aa70 <__cvt+0x40>
 800aa6e:	2303      	movs	r3, #3
 800aa70:	aa07      	add	r2, sp, #28
 800aa72:	9204      	str	r2, [sp, #16]
 800aa74:	aa06      	add	r2, sp, #24
 800aa76:	e9cd a202 	strd	sl, r2, [sp, #8]
 800aa7a:	e9cd 3600 	strd	r3, r6, [sp]
 800aa7e:	4622      	mov	r2, r4
 800aa80:	462b      	mov	r3, r5
 800aa82:	f000 ff25 	bl	800b8d0 <_dtoa_r>
 800aa86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aa8a:	4607      	mov	r7, r0
 800aa8c:	d119      	bne.n	800aac2 <__cvt+0x92>
 800aa8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa90:	07db      	lsls	r3, r3, #31
 800aa92:	d50e      	bpl.n	800aab2 <__cvt+0x82>
 800aa94:	eb00 0906 	add.w	r9, r0, r6
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	f7f5 ff82 	bl	80009a8 <__aeabi_dcmpeq>
 800aaa4:	b108      	cbz	r0, 800aaaa <__cvt+0x7a>
 800aaa6:	f8cd 901c 	str.w	r9, [sp, #28]
 800aaaa:	2230      	movs	r2, #48	@ 0x30
 800aaac:	9b07      	ldr	r3, [sp, #28]
 800aaae:	454b      	cmp	r3, r9
 800aab0:	d31e      	bcc.n	800aaf0 <__cvt+0xc0>
 800aab2:	4638      	mov	r0, r7
 800aab4:	9b07      	ldr	r3, [sp, #28]
 800aab6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800aab8:	1bdb      	subs	r3, r3, r7
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	b008      	add	sp, #32
 800aabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aac6:	eb00 0906 	add.w	r9, r0, r6
 800aaca:	d1e5      	bne.n	800aa98 <__cvt+0x68>
 800aacc:	7803      	ldrb	r3, [r0, #0]
 800aace:	2b30      	cmp	r3, #48	@ 0x30
 800aad0:	d10a      	bne.n	800aae8 <__cvt+0xb8>
 800aad2:	2200      	movs	r2, #0
 800aad4:	2300      	movs	r3, #0
 800aad6:	4620      	mov	r0, r4
 800aad8:	4629      	mov	r1, r5
 800aada:	f7f5 ff65 	bl	80009a8 <__aeabi_dcmpeq>
 800aade:	b918      	cbnz	r0, 800aae8 <__cvt+0xb8>
 800aae0:	f1c6 0601 	rsb	r6, r6, #1
 800aae4:	f8ca 6000 	str.w	r6, [sl]
 800aae8:	f8da 3000 	ldr.w	r3, [sl]
 800aaec:	4499      	add	r9, r3
 800aaee:	e7d3      	b.n	800aa98 <__cvt+0x68>
 800aaf0:	1c59      	adds	r1, r3, #1
 800aaf2:	9107      	str	r1, [sp, #28]
 800aaf4:	701a      	strb	r2, [r3, #0]
 800aaf6:	e7d9      	b.n	800aaac <__cvt+0x7c>

0800aaf8 <__exponent>:
 800aaf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aafa:	2900      	cmp	r1, #0
 800aafc:	bfb6      	itet	lt
 800aafe:	232d      	movlt	r3, #45	@ 0x2d
 800ab00:	232b      	movge	r3, #43	@ 0x2b
 800ab02:	4249      	neglt	r1, r1
 800ab04:	2909      	cmp	r1, #9
 800ab06:	7002      	strb	r2, [r0, #0]
 800ab08:	7043      	strb	r3, [r0, #1]
 800ab0a:	dd29      	ble.n	800ab60 <__exponent+0x68>
 800ab0c:	f10d 0307 	add.w	r3, sp, #7
 800ab10:	461d      	mov	r5, r3
 800ab12:	270a      	movs	r7, #10
 800ab14:	fbb1 f6f7 	udiv	r6, r1, r7
 800ab18:	461a      	mov	r2, r3
 800ab1a:	fb07 1416 	mls	r4, r7, r6, r1
 800ab1e:	3430      	adds	r4, #48	@ 0x30
 800ab20:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ab24:	460c      	mov	r4, r1
 800ab26:	2c63      	cmp	r4, #99	@ 0x63
 800ab28:	4631      	mov	r1, r6
 800ab2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab2e:	dcf1      	bgt.n	800ab14 <__exponent+0x1c>
 800ab30:	3130      	adds	r1, #48	@ 0x30
 800ab32:	1e94      	subs	r4, r2, #2
 800ab34:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ab38:	4623      	mov	r3, r4
 800ab3a:	1c41      	adds	r1, r0, #1
 800ab3c:	42ab      	cmp	r3, r5
 800ab3e:	d30a      	bcc.n	800ab56 <__exponent+0x5e>
 800ab40:	f10d 0309 	add.w	r3, sp, #9
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	42ac      	cmp	r4, r5
 800ab48:	bf88      	it	hi
 800ab4a:	2300      	movhi	r3, #0
 800ab4c:	3302      	adds	r3, #2
 800ab4e:	4403      	add	r3, r0
 800ab50:	1a18      	subs	r0, r3, r0
 800ab52:	b003      	add	sp, #12
 800ab54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab56:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab5e:	e7ed      	b.n	800ab3c <__exponent+0x44>
 800ab60:	2330      	movs	r3, #48	@ 0x30
 800ab62:	3130      	adds	r1, #48	@ 0x30
 800ab64:	7083      	strb	r3, [r0, #2]
 800ab66:	70c1      	strb	r1, [r0, #3]
 800ab68:	1d03      	adds	r3, r0, #4
 800ab6a:	e7f1      	b.n	800ab50 <__exponent+0x58>

0800ab6c <_printf_float>:
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	b091      	sub	sp, #68	@ 0x44
 800ab72:	460c      	mov	r4, r1
 800ab74:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800ab78:	4616      	mov	r6, r2
 800ab7a:	461f      	mov	r7, r3
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	f000 fd63 	bl	800b648 <_localeconv_r>
 800ab82:	6803      	ldr	r3, [r0, #0]
 800ab84:	4618      	mov	r0, r3
 800ab86:	9308      	str	r3, [sp, #32]
 800ab88:	f7f5 fae2 	bl	8000150 <strlen>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	930e      	str	r3, [sp, #56]	@ 0x38
 800ab90:	f8d8 3000 	ldr.w	r3, [r8]
 800ab94:	9009      	str	r0, [sp, #36]	@ 0x24
 800ab96:	3307      	adds	r3, #7
 800ab98:	f023 0307 	bic.w	r3, r3, #7
 800ab9c:	f103 0208 	add.w	r2, r3, #8
 800aba0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aba4:	f8d4 b000 	ldr.w	fp, [r4]
 800aba8:	f8c8 2000 	str.w	r2, [r8]
 800abac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800abb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abb6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800abba:	f04f 32ff 	mov.w	r2, #4294967295
 800abbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800abc6:	4b9c      	ldr	r3, [pc, #624]	@ (800ae38 <_printf_float+0x2cc>)
 800abc8:	f7f5 ff20 	bl	8000a0c <__aeabi_dcmpun>
 800abcc:	bb70      	cbnz	r0, 800ac2c <_printf_float+0xc0>
 800abce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abd2:	f04f 32ff 	mov.w	r2, #4294967295
 800abd6:	4b98      	ldr	r3, [pc, #608]	@ (800ae38 <_printf_float+0x2cc>)
 800abd8:	f7f5 fefa 	bl	80009d0 <__aeabi_dcmple>
 800abdc:	bb30      	cbnz	r0, 800ac2c <_printf_float+0xc0>
 800abde:	2200      	movs	r2, #0
 800abe0:	2300      	movs	r3, #0
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f7f5 fee9 	bl	80009bc <__aeabi_dcmplt>
 800abea:	b110      	cbz	r0, 800abf2 <_printf_float+0x86>
 800abec:	232d      	movs	r3, #45	@ 0x2d
 800abee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abf2:	4a92      	ldr	r2, [pc, #584]	@ (800ae3c <_printf_float+0x2d0>)
 800abf4:	4b92      	ldr	r3, [pc, #584]	@ (800ae40 <_printf_float+0x2d4>)
 800abf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800abfa:	bf8c      	ite	hi
 800abfc:	4690      	movhi	r8, r2
 800abfe:	4698      	movls	r8, r3
 800ac00:	2303      	movs	r3, #3
 800ac02:	f04f 0900 	mov.w	r9, #0
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	f02b 0304 	bic.w	r3, fp, #4
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	4633      	mov	r3, r6
 800ac10:	4621      	mov	r1, r4
 800ac12:	4628      	mov	r0, r5
 800ac14:	9700      	str	r7, [sp, #0]
 800ac16:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ac18:	f000 f9d4 	bl	800afc4 <_printf_common>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f040 8090 	bne.w	800ad42 <_printf_float+0x1d6>
 800ac22:	f04f 30ff 	mov.w	r0, #4294967295
 800ac26:	b011      	add	sp, #68	@ 0x44
 800ac28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2c:	4642      	mov	r2, r8
 800ac2e:	464b      	mov	r3, r9
 800ac30:	4640      	mov	r0, r8
 800ac32:	4649      	mov	r1, r9
 800ac34:	f7f5 feea 	bl	8000a0c <__aeabi_dcmpun>
 800ac38:	b148      	cbz	r0, 800ac4e <_printf_float+0xe2>
 800ac3a:	464b      	mov	r3, r9
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	bfb8      	it	lt
 800ac40:	232d      	movlt	r3, #45	@ 0x2d
 800ac42:	4a80      	ldr	r2, [pc, #512]	@ (800ae44 <_printf_float+0x2d8>)
 800ac44:	bfb8      	it	lt
 800ac46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ac4a:	4b7f      	ldr	r3, [pc, #508]	@ (800ae48 <_printf_float+0x2dc>)
 800ac4c:	e7d3      	b.n	800abf6 <_printf_float+0x8a>
 800ac4e:	6863      	ldr	r3, [r4, #4]
 800ac50:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	d13f      	bne.n	800acd8 <_printf_float+0x16c>
 800ac58:	2306      	movs	r3, #6
 800ac5a:	6063      	str	r3, [r4, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	9206      	str	r2, [sp, #24]
 800ac66:	aa0e      	add	r2, sp, #56	@ 0x38
 800ac68:	e9cd a204 	strd	sl, r2, [sp, #16]
 800ac6c:	aa0d      	add	r2, sp, #52	@ 0x34
 800ac6e:	9203      	str	r2, [sp, #12]
 800ac70:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800ac74:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ac78:	6863      	ldr	r3, [r4, #4]
 800ac7a:	4642      	mov	r2, r8
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	4628      	mov	r0, r5
 800ac80:	464b      	mov	r3, r9
 800ac82:	910a      	str	r1, [sp, #40]	@ 0x28
 800ac84:	f7ff fed4 	bl	800aa30 <__cvt>
 800ac88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	2947      	cmp	r1, #71	@ 0x47
 800ac8e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ac90:	d128      	bne.n	800ace4 <_printf_float+0x178>
 800ac92:	1cc8      	adds	r0, r1, #3
 800ac94:	db02      	blt.n	800ac9c <_printf_float+0x130>
 800ac96:	6863      	ldr	r3, [r4, #4]
 800ac98:	4299      	cmp	r1, r3
 800ac9a:	dd40      	ble.n	800ad1e <_printf_float+0x1b2>
 800ac9c:	f1aa 0a02 	sub.w	sl, sl, #2
 800aca0:	fa5f fa8a 	uxtb.w	sl, sl
 800aca4:	4652      	mov	r2, sl
 800aca6:	3901      	subs	r1, #1
 800aca8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800acac:	910d      	str	r1, [sp, #52]	@ 0x34
 800acae:	f7ff ff23 	bl	800aaf8 <__exponent>
 800acb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acb4:	4681      	mov	r9, r0
 800acb6:	1813      	adds	r3, r2, r0
 800acb8:	2a01      	cmp	r2, #1
 800acba:	6123      	str	r3, [r4, #16]
 800acbc:	dc02      	bgt.n	800acc4 <_printf_float+0x158>
 800acbe:	6822      	ldr	r2, [r4, #0]
 800acc0:	07d2      	lsls	r2, r2, #31
 800acc2:	d501      	bpl.n	800acc8 <_printf_float+0x15c>
 800acc4:	3301      	adds	r3, #1
 800acc6:	6123      	str	r3, [r4, #16]
 800acc8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800accc:	2b00      	cmp	r3, #0
 800acce:	d09e      	beq.n	800ac0e <_printf_float+0xa2>
 800acd0:	232d      	movs	r3, #45	@ 0x2d
 800acd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acd6:	e79a      	b.n	800ac0e <_printf_float+0xa2>
 800acd8:	2947      	cmp	r1, #71	@ 0x47
 800acda:	d1bf      	bne.n	800ac5c <_printf_float+0xf0>
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1bd      	bne.n	800ac5c <_printf_float+0xf0>
 800ace0:	2301      	movs	r3, #1
 800ace2:	e7ba      	b.n	800ac5a <_printf_float+0xee>
 800ace4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ace8:	d9dc      	bls.n	800aca4 <_printf_float+0x138>
 800acea:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800acee:	d118      	bne.n	800ad22 <_printf_float+0x1b6>
 800acf0:	2900      	cmp	r1, #0
 800acf2:	6863      	ldr	r3, [r4, #4]
 800acf4:	dd0b      	ble.n	800ad0e <_printf_float+0x1a2>
 800acf6:	6121      	str	r1, [r4, #16]
 800acf8:	b913      	cbnz	r3, 800ad00 <_printf_float+0x194>
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	07d0      	lsls	r0, r2, #31
 800acfe:	d502      	bpl.n	800ad06 <_printf_float+0x19a>
 800ad00:	3301      	adds	r3, #1
 800ad02:	440b      	add	r3, r1
 800ad04:	6123      	str	r3, [r4, #16]
 800ad06:	f04f 0900 	mov.w	r9, #0
 800ad0a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ad0c:	e7dc      	b.n	800acc8 <_printf_float+0x15c>
 800ad0e:	b913      	cbnz	r3, 800ad16 <_printf_float+0x1aa>
 800ad10:	6822      	ldr	r2, [r4, #0]
 800ad12:	07d2      	lsls	r2, r2, #31
 800ad14:	d501      	bpl.n	800ad1a <_printf_float+0x1ae>
 800ad16:	3302      	adds	r3, #2
 800ad18:	e7f4      	b.n	800ad04 <_printf_float+0x198>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e7f2      	b.n	800ad04 <_printf_float+0x198>
 800ad1e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ad22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad24:	4299      	cmp	r1, r3
 800ad26:	db05      	blt.n	800ad34 <_printf_float+0x1c8>
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	6121      	str	r1, [r4, #16]
 800ad2c:	07d8      	lsls	r0, r3, #31
 800ad2e:	d5ea      	bpl.n	800ad06 <_printf_float+0x19a>
 800ad30:	1c4b      	adds	r3, r1, #1
 800ad32:	e7e7      	b.n	800ad04 <_printf_float+0x198>
 800ad34:	2900      	cmp	r1, #0
 800ad36:	bfcc      	ite	gt
 800ad38:	2201      	movgt	r2, #1
 800ad3a:	f1c1 0202 	rsble	r2, r1, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	e7e0      	b.n	800ad04 <_printf_float+0x198>
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	055a      	lsls	r2, r3, #21
 800ad46:	d407      	bmi.n	800ad58 <_printf_float+0x1ec>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	4642      	mov	r2, r8
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b8      	blx	r7
 800ad52:	3001      	adds	r0, #1
 800ad54:	d12b      	bne.n	800adae <_printf_float+0x242>
 800ad56:	e764      	b.n	800ac22 <_printf_float+0xb6>
 800ad58:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad5c:	f240 80dc 	bls.w	800af18 <_printf_float+0x3ac>
 800ad60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad64:	2200      	movs	r2, #0
 800ad66:	2300      	movs	r3, #0
 800ad68:	f7f5 fe1e 	bl	80009a8 <__aeabi_dcmpeq>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d033      	beq.n	800add8 <_printf_float+0x26c>
 800ad70:	2301      	movs	r3, #1
 800ad72:	4631      	mov	r1, r6
 800ad74:	4628      	mov	r0, r5
 800ad76:	4a35      	ldr	r2, [pc, #212]	@ (800ae4c <_printf_float+0x2e0>)
 800ad78:	47b8      	blx	r7
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	f43f af51 	beq.w	800ac22 <_printf_float+0xb6>
 800ad80:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800ad84:	4543      	cmp	r3, r8
 800ad86:	db02      	blt.n	800ad8e <_printf_float+0x222>
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	07d8      	lsls	r0, r3, #31
 800ad8c:	d50f      	bpl.n	800adae <_printf_float+0x242>
 800ad8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad92:	4631      	mov	r1, r6
 800ad94:	4628      	mov	r0, r5
 800ad96:	47b8      	blx	r7
 800ad98:	3001      	adds	r0, #1
 800ad9a:	f43f af42 	beq.w	800ac22 <_printf_float+0xb6>
 800ad9e:	f04f 0900 	mov.w	r9, #0
 800ada2:	f108 38ff 	add.w	r8, r8, #4294967295
 800ada6:	f104 0a1a 	add.w	sl, r4, #26
 800adaa:	45c8      	cmp	r8, r9
 800adac:	dc09      	bgt.n	800adc2 <_printf_float+0x256>
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	079b      	lsls	r3, r3, #30
 800adb2:	f100 8102 	bmi.w	800afba <_printf_float+0x44e>
 800adb6:	68e0      	ldr	r0, [r4, #12]
 800adb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adba:	4298      	cmp	r0, r3
 800adbc:	bfb8      	it	lt
 800adbe:	4618      	movlt	r0, r3
 800adc0:	e731      	b.n	800ac26 <_printf_float+0xba>
 800adc2:	2301      	movs	r3, #1
 800adc4:	4652      	mov	r2, sl
 800adc6:	4631      	mov	r1, r6
 800adc8:	4628      	mov	r0, r5
 800adca:	47b8      	blx	r7
 800adcc:	3001      	adds	r0, #1
 800adce:	f43f af28 	beq.w	800ac22 <_printf_float+0xb6>
 800add2:	f109 0901 	add.w	r9, r9, #1
 800add6:	e7e8      	b.n	800adaa <_printf_float+0x23e>
 800add8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adda:	2b00      	cmp	r3, #0
 800addc:	dc38      	bgt.n	800ae50 <_printf_float+0x2e4>
 800adde:	2301      	movs	r3, #1
 800ade0:	4631      	mov	r1, r6
 800ade2:	4628      	mov	r0, r5
 800ade4:	4a19      	ldr	r2, [pc, #100]	@ (800ae4c <_printf_float+0x2e0>)
 800ade6:	47b8      	blx	r7
 800ade8:	3001      	adds	r0, #1
 800adea:	f43f af1a 	beq.w	800ac22 <_printf_float+0xb6>
 800adee:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800adf2:	ea59 0303 	orrs.w	r3, r9, r3
 800adf6:	d102      	bne.n	800adfe <_printf_float+0x292>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	07d9      	lsls	r1, r3, #31
 800adfc:	d5d7      	bpl.n	800adae <_printf_float+0x242>
 800adfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ae02:	4631      	mov	r1, r6
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b8      	blx	r7
 800ae08:	3001      	adds	r0, #1
 800ae0a:	f43f af0a 	beq.w	800ac22 <_printf_float+0xb6>
 800ae0e:	f04f 0a00 	mov.w	sl, #0
 800ae12:	f104 0b1a 	add.w	fp, r4, #26
 800ae16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae18:	425b      	negs	r3, r3
 800ae1a:	4553      	cmp	r3, sl
 800ae1c:	dc01      	bgt.n	800ae22 <_printf_float+0x2b6>
 800ae1e:	464b      	mov	r3, r9
 800ae20:	e793      	b.n	800ad4a <_printf_float+0x1de>
 800ae22:	2301      	movs	r3, #1
 800ae24:	465a      	mov	r2, fp
 800ae26:	4631      	mov	r1, r6
 800ae28:	4628      	mov	r0, r5
 800ae2a:	47b8      	blx	r7
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	f43f aef8 	beq.w	800ac22 <_printf_float+0xb6>
 800ae32:	f10a 0a01 	add.w	sl, sl, #1
 800ae36:	e7ee      	b.n	800ae16 <_printf_float+0x2aa>
 800ae38:	7fefffff 	.word	0x7fefffff
 800ae3c:	0800e214 	.word	0x0800e214
 800ae40:	0800e210 	.word	0x0800e210
 800ae44:	0800e21c 	.word	0x0800e21c
 800ae48:	0800e218 	.word	0x0800e218
 800ae4c:	0800e220 	.word	0x0800e220
 800ae50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae52:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ae56:	4553      	cmp	r3, sl
 800ae58:	bfa8      	it	ge
 800ae5a:	4653      	movge	r3, sl
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	4699      	mov	r9, r3
 800ae60:	dc36      	bgt.n	800aed0 <_printf_float+0x364>
 800ae62:	f04f 0b00 	mov.w	fp, #0
 800ae66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae6a:	f104 021a 	add.w	r2, r4, #26
 800ae6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae70:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae72:	eba3 0309 	sub.w	r3, r3, r9
 800ae76:	455b      	cmp	r3, fp
 800ae78:	dc31      	bgt.n	800aede <_printf_float+0x372>
 800ae7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae7c:	459a      	cmp	sl, r3
 800ae7e:	dc3a      	bgt.n	800aef6 <_printf_float+0x38a>
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	07da      	lsls	r2, r3, #31
 800ae84:	d437      	bmi.n	800aef6 <_printf_float+0x38a>
 800ae86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae88:	ebaa 0903 	sub.w	r9, sl, r3
 800ae8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae8e:	ebaa 0303 	sub.w	r3, sl, r3
 800ae92:	4599      	cmp	r9, r3
 800ae94:	bfa8      	it	ge
 800ae96:	4699      	movge	r9, r3
 800ae98:	f1b9 0f00 	cmp.w	r9, #0
 800ae9c:	dc33      	bgt.n	800af06 <_printf_float+0x39a>
 800ae9e:	f04f 0800 	mov.w	r8, #0
 800aea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aea6:	f104 0b1a 	add.w	fp, r4, #26
 800aeaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aeac:	ebaa 0303 	sub.w	r3, sl, r3
 800aeb0:	eba3 0309 	sub.w	r3, r3, r9
 800aeb4:	4543      	cmp	r3, r8
 800aeb6:	f77f af7a 	ble.w	800adae <_printf_float+0x242>
 800aeba:	2301      	movs	r3, #1
 800aebc:	465a      	mov	r2, fp
 800aebe:	4631      	mov	r1, r6
 800aec0:	4628      	mov	r0, r5
 800aec2:	47b8      	blx	r7
 800aec4:	3001      	adds	r0, #1
 800aec6:	f43f aeac 	beq.w	800ac22 <_printf_float+0xb6>
 800aeca:	f108 0801 	add.w	r8, r8, #1
 800aece:	e7ec      	b.n	800aeaa <_printf_float+0x33e>
 800aed0:	4642      	mov	r2, r8
 800aed2:	4631      	mov	r1, r6
 800aed4:	4628      	mov	r0, r5
 800aed6:	47b8      	blx	r7
 800aed8:	3001      	adds	r0, #1
 800aeda:	d1c2      	bne.n	800ae62 <_printf_float+0x2f6>
 800aedc:	e6a1      	b.n	800ac22 <_printf_float+0xb6>
 800aede:	2301      	movs	r3, #1
 800aee0:	4631      	mov	r1, r6
 800aee2:	4628      	mov	r0, r5
 800aee4:	920a      	str	r2, [sp, #40]	@ 0x28
 800aee6:	47b8      	blx	r7
 800aee8:	3001      	adds	r0, #1
 800aeea:	f43f ae9a 	beq.w	800ac22 <_printf_float+0xb6>
 800aeee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aef0:	f10b 0b01 	add.w	fp, fp, #1
 800aef4:	e7bb      	b.n	800ae6e <_printf_float+0x302>
 800aef6:	4631      	mov	r1, r6
 800aef8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aefc:	4628      	mov	r0, r5
 800aefe:	47b8      	blx	r7
 800af00:	3001      	adds	r0, #1
 800af02:	d1c0      	bne.n	800ae86 <_printf_float+0x31a>
 800af04:	e68d      	b.n	800ac22 <_printf_float+0xb6>
 800af06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af08:	464b      	mov	r3, r9
 800af0a:	4631      	mov	r1, r6
 800af0c:	4628      	mov	r0, r5
 800af0e:	4442      	add	r2, r8
 800af10:	47b8      	blx	r7
 800af12:	3001      	adds	r0, #1
 800af14:	d1c3      	bne.n	800ae9e <_printf_float+0x332>
 800af16:	e684      	b.n	800ac22 <_printf_float+0xb6>
 800af18:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800af1c:	f1ba 0f01 	cmp.w	sl, #1
 800af20:	dc01      	bgt.n	800af26 <_printf_float+0x3ba>
 800af22:	07db      	lsls	r3, r3, #31
 800af24:	d536      	bpl.n	800af94 <_printf_float+0x428>
 800af26:	2301      	movs	r3, #1
 800af28:	4642      	mov	r2, r8
 800af2a:	4631      	mov	r1, r6
 800af2c:	4628      	mov	r0, r5
 800af2e:	47b8      	blx	r7
 800af30:	3001      	adds	r0, #1
 800af32:	f43f ae76 	beq.w	800ac22 <_printf_float+0xb6>
 800af36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800af3a:	4631      	mov	r1, r6
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b8      	blx	r7
 800af40:	3001      	adds	r0, #1
 800af42:	f43f ae6e 	beq.w	800ac22 <_printf_float+0xb6>
 800af46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af4a:	2200      	movs	r2, #0
 800af4c:	2300      	movs	r3, #0
 800af4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af52:	f7f5 fd29 	bl	80009a8 <__aeabi_dcmpeq>
 800af56:	b9c0      	cbnz	r0, 800af8a <_printf_float+0x41e>
 800af58:	4653      	mov	r3, sl
 800af5a:	f108 0201 	add.w	r2, r8, #1
 800af5e:	4631      	mov	r1, r6
 800af60:	4628      	mov	r0, r5
 800af62:	47b8      	blx	r7
 800af64:	3001      	adds	r0, #1
 800af66:	d10c      	bne.n	800af82 <_printf_float+0x416>
 800af68:	e65b      	b.n	800ac22 <_printf_float+0xb6>
 800af6a:	2301      	movs	r3, #1
 800af6c:	465a      	mov	r2, fp
 800af6e:	4631      	mov	r1, r6
 800af70:	4628      	mov	r0, r5
 800af72:	47b8      	blx	r7
 800af74:	3001      	adds	r0, #1
 800af76:	f43f ae54 	beq.w	800ac22 <_printf_float+0xb6>
 800af7a:	f108 0801 	add.w	r8, r8, #1
 800af7e:	45d0      	cmp	r8, sl
 800af80:	dbf3      	blt.n	800af6a <_printf_float+0x3fe>
 800af82:	464b      	mov	r3, r9
 800af84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af88:	e6e0      	b.n	800ad4c <_printf_float+0x1e0>
 800af8a:	f04f 0800 	mov.w	r8, #0
 800af8e:	f104 0b1a 	add.w	fp, r4, #26
 800af92:	e7f4      	b.n	800af7e <_printf_float+0x412>
 800af94:	2301      	movs	r3, #1
 800af96:	4642      	mov	r2, r8
 800af98:	e7e1      	b.n	800af5e <_printf_float+0x3f2>
 800af9a:	2301      	movs	r3, #1
 800af9c:	464a      	mov	r2, r9
 800af9e:	4631      	mov	r1, r6
 800afa0:	4628      	mov	r0, r5
 800afa2:	47b8      	blx	r7
 800afa4:	3001      	adds	r0, #1
 800afa6:	f43f ae3c 	beq.w	800ac22 <_printf_float+0xb6>
 800afaa:	f108 0801 	add.w	r8, r8, #1
 800afae:	68e3      	ldr	r3, [r4, #12]
 800afb0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800afb2:	1a5b      	subs	r3, r3, r1
 800afb4:	4543      	cmp	r3, r8
 800afb6:	dcf0      	bgt.n	800af9a <_printf_float+0x42e>
 800afb8:	e6fd      	b.n	800adb6 <_printf_float+0x24a>
 800afba:	f04f 0800 	mov.w	r8, #0
 800afbe:	f104 0919 	add.w	r9, r4, #25
 800afc2:	e7f4      	b.n	800afae <_printf_float+0x442>

0800afc4 <_printf_common>:
 800afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc8:	4616      	mov	r6, r2
 800afca:	4698      	mov	r8, r3
 800afcc:	688a      	ldr	r2, [r1, #8]
 800afce:	690b      	ldr	r3, [r1, #16]
 800afd0:	4607      	mov	r7, r0
 800afd2:	4293      	cmp	r3, r2
 800afd4:	bfb8      	it	lt
 800afd6:	4613      	movlt	r3, r2
 800afd8:	6033      	str	r3, [r6, #0]
 800afda:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afde:	460c      	mov	r4, r1
 800afe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afe4:	b10a      	cbz	r2, 800afea <_printf_common+0x26>
 800afe6:	3301      	adds	r3, #1
 800afe8:	6033      	str	r3, [r6, #0]
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	0699      	lsls	r1, r3, #26
 800afee:	bf42      	ittt	mi
 800aff0:	6833      	ldrmi	r3, [r6, #0]
 800aff2:	3302      	addmi	r3, #2
 800aff4:	6033      	strmi	r3, [r6, #0]
 800aff6:	6825      	ldr	r5, [r4, #0]
 800aff8:	f015 0506 	ands.w	r5, r5, #6
 800affc:	d106      	bne.n	800b00c <_printf_common+0x48>
 800affe:	f104 0a19 	add.w	sl, r4, #25
 800b002:	68e3      	ldr	r3, [r4, #12]
 800b004:	6832      	ldr	r2, [r6, #0]
 800b006:	1a9b      	subs	r3, r3, r2
 800b008:	42ab      	cmp	r3, r5
 800b00a:	dc2b      	bgt.n	800b064 <_printf_common+0xa0>
 800b00c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b010:	6822      	ldr	r2, [r4, #0]
 800b012:	3b00      	subs	r3, #0
 800b014:	bf18      	it	ne
 800b016:	2301      	movne	r3, #1
 800b018:	0692      	lsls	r2, r2, #26
 800b01a:	d430      	bmi.n	800b07e <_printf_common+0xba>
 800b01c:	4641      	mov	r1, r8
 800b01e:	4638      	mov	r0, r7
 800b020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b024:	47c8      	blx	r9
 800b026:	3001      	adds	r0, #1
 800b028:	d023      	beq.n	800b072 <_printf_common+0xae>
 800b02a:	6823      	ldr	r3, [r4, #0]
 800b02c:	6922      	ldr	r2, [r4, #16]
 800b02e:	f003 0306 	and.w	r3, r3, #6
 800b032:	2b04      	cmp	r3, #4
 800b034:	bf14      	ite	ne
 800b036:	2500      	movne	r5, #0
 800b038:	6833      	ldreq	r3, [r6, #0]
 800b03a:	f04f 0600 	mov.w	r6, #0
 800b03e:	bf08      	it	eq
 800b040:	68e5      	ldreq	r5, [r4, #12]
 800b042:	f104 041a 	add.w	r4, r4, #26
 800b046:	bf08      	it	eq
 800b048:	1aed      	subeq	r5, r5, r3
 800b04a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b04e:	bf08      	it	eq
 800b050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b054:	4293      	cmp	r3, r2
 800b056:	bfc4      	itt	gt
 800b058:	1a9b      	subgt	r3, r3, r2
 800b05a:	18ed      	addgt	r5, r5, r3
 800b05c:	42b5      	cmp	r5, r6
 800b05e:	d11a      	bne.n	800b096 <_printf_common+0xd2>
 800b060:	2000      	movs	r0, #0
 800b062:	e008      	b.n	800b076 <_printf_common+0xb2>
 800b064:	2301      	movs	r3, #1
 800b066:	4652      	mov	r2, sl
 800b068:	4641      	mov	r1, r8
 800b06a:	4638      	mov	r0, r7
 800b06c:	47c8      	blx	r9
 800b06e:	3001      	adds	r0, #1
 800b070:	d103      	bne.n	800b07a <_printf_common+0xb6>
 800b072:	f04f 30ff 	mov.w	r0, #4294967295
 800b076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07a:	3501      	adds	r5, #1
 800b07c:	e7c1      	b.n	800b002 <_printf_common+0x3e>
 800b07e:	2030      	movs	r0, #48	@ 0x30
 800b080:	18e1      	adds	r1, r4, r3
 800b082:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b08c:	4422      	add	r2, r4
 800b08e:	3302      	adds	r3, #2
 800b090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b094:	e7c2      	b.n	800b01c <_printf_common+0x58>
 800b096:	2301      	movs	r3, #1
 800b098:	4622      	mov	r2, r4
 800b09a:	4641      	mov	r1, r8
 800b09c:	4638      	mov	r0, r7
 800b09e:	47c8      	blx	r9
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	d0e6      	beq.n	800b072 <_printf_common+0xae>
 800b0a4:	3601      	adds	r6, #1
 800b0a6:	e7d9      	b.n	800b05c <_printf_common+0x98>

0800b0a8 <_printf_i>:
 800b0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ac:	7e0f      	ldrb	r7, [r1, #24]
 800b0ae:	4691      	mov	r9, r2
 800b0b0:	2f78      	cmp	r7, #120	@ 0x78
 800b0b2:	4680      	mov	r8, r0
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	469a      	mov	sl, r3
 800b0b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b0ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b0be:	d807      	bhi.n	800b0d0 <_printf_i+0x28>
 800b0c0:	2f62      	cmp	r7, #98	@ 0x62
 800b0c2:	d80a      	bhi.n	800b0da <_printf_i+0x32>
 800b0c4:	2f00      	cmp	r7, #0
 800b0c6:	f000 80d1 	beq.w	800b26c <_printf_i+0x1c4>
 800b0ca:	2f58      	cmp	r7, #88	@ 0x58
 800b0cc:	f000 80b8 	beq.w	800b240 <_printf_i+0x198>
 800b0d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b0d8:	e03a      	b.n	800b150 <_printf_i+0xa8>
 800b0da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b0de:	2b15      	cmp	r3, #21
 800b0e0:	d8f6      	bhi.n	800b0d0 <_printf_i+0x28>
 800b0e2:	a101      	add	r1, pc, #4	@ (adr r1, 800b0e8 <_printf_i+0x40>)
 800b0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0e8:	0800b141 	.word	0x0800b141
 800b0ec:	0800b155 	.word	0x0800b155
 800b0f0:	0800b0d1 	.word	0x0800b0d1
 800b0f4:	0800b0d1 	.word	0x0800b0d1
 800b0f8:	0800b0d1 	.word	0x0800b0d1
 800b0fc:	0800b0d1 	.word	0x0800b0d1
 800b100:	0800b155 	.word	0x0800b155
 800b104:	0800b0d1 	.word	0x0800b0d1
 800b108:	0800b0d1 	.word	0x0800b0d1
 800b10c:	0800b0d1 	.word	0x0800b0d1
 800b110:	0800b0d1 	.word	0x0800b0d1
 800b114:	0800b253 	.word	0x0800b253
 800b118:	0800b17f 	.word	0x0800b17f
 800b11c:	0800b20d 	.word	0x0800b20d
 800b120:	0800b0d1 	.word	0x0800b0d1
 800b124:	0800b0d1 	.word	0x0800b0d1
 800b128:	0800b275 	.word	0x0800b275
 800b12c:	0800b0d1 	.word	0x0800b0d1
 800b130:	0800b17f 	.word	0x0800b17f
 800b134:	0800b0d1 	.word	0x0800b0d1
 800b138:	0800b0d1 	.word	0x0800b0d1
 800b13c:	0800b215 	.word	0x0800b215
 800b140:	6833      	ldr	r3, [r6, #0]
 800b142:	1d1a      	adds	r2, r3, #4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	6032      	str	r2, [r6, #0]
 800b148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b14c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b150:	2301      	movs	r3, #1
 800b152:	e09c      	b.n	800b28e <_printf_i+0x1e6>
 800b154:	6833      	ldr	r3, [r6, #0]
 800b156:	6820      	ldr	r0, [r4, #0]
 800b158:	1d19      	adds	r1, r3, #4
 800b15a:	6031      	str	r1, [r6, #0]
 800b15c:	0606      	lsls	r6, r0, #24
 800b15e:	d501      	bpl.n	800b164 <_printf_i+0xbc>
 800b160:	681d      	ldr	r5, [r3, #0]
 800b162:	e003      	b.n	800b16c <_printf_i+0xc4>
 800b164:	0645      	lsls	r5, r0, #25
 800b166:	d5fb      	bpl.n	800b160 <_printf_i+0xb8>
 800b168:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b16c:	2d00      	cmp	r5, #0
 800b16e:	da03      	bge.n	800b178 <_printf_i+0xd0>
 800b170:	232d      	movs	r3, #45	@ 0x2d
 800b172:	426d      	negs	r5, r5
 800b174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b178:	230a      	movs	r3, #10
 800b17a:	4858      	ldr	r0, [pc, #352]	@ (800b2dc <_printf_i+0x234>)
 800b17c:	e011      	b.n	800b1a2 <_printf_i+0xfa>
 800b17e:	6821      	ldr	r1, [r4, #0]
 800b180:	6833      	ldr	r3, [r6, #0]
 800b182:	0608      	lsls	r0, r1, #24
 800b184:	f853 5b04 	ldr.w	r5, [r3], #4
 800b188:	d402      	bmi.n	800b190 <_printf_i+0xe8>
 800b18a:	0649      	lsls	r1, r1, #25
 800b18c:	bf48      	it	mi
 800b18e:	b2ad      	uxthmi	r5, r5
 800b190:	2f6f      	cmp	r7, #111	@ 0x6f
 800b192:	6033      	str	r3, [r6, #0]
 800b194:	bf14      	ite	ne
 800b196:	230a      	movne	r3, #10
 800b198:	2308      	moveq	r3, #8
 800b19a:	4850      	ldr	r0, [pc, #320]	@ (800b2dc <_printf_i+0x234>)
 800b19c:	2100      	movs	r1, #0
 800b19e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1a2:	6866      	ldr	r6, [r4, #4]
 800b1a4:	2e00      	cmp	r6, #0
 800b1a6:	60a6      	str	r6, [r4, #8]
 800b1a8:	db05      	blt.n	800b1b6 <_printf_i+0x10e>
 800b1aa:	6821      	ldr	r1, [r4, #0]
 800b1ac:	432e      	orrs	r6, r5
 800b1ae:	f021 0104 	bic.w	r1, r1, #4
 800b1b2:	6021      	str	r1, [r4, #0]
 800b1b4:	d04b      	beq.n	800b24e <_printf_i+0x1a6>
 800b1b6:	4616      	mov	r6, r2
 800b1b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1bc:	fb03 5711 	mls	r7, r3, r1, r5
 800b1c0:	5dc7      	ldrb	r7, [r0, r7]
 800b1c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1c6:	462f      	mov	r7, r5
 800b1c8:	42bb      	cmp	r3, r7
 800b1ca:	460d      	mov	r5, r1
 800b1cc:	d9f4      	bls.n	800b1b8 <_printf_i+0x110>
 800b1ce:	2b08      	cmp	r3, #8
 800b1d0:	d10b      	bne.n	800b1ea <_printf_i+0x142>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	07df      	lsls	r7, r3, #31
 800b1d6:	d508      	bpl.n	800b1ea <_printf_i+0x142>
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	6861      	ldr	r1, [r4, #4]
 800b1dc:	4299      	cmp	r1, r3
 800b1de:	bfde      	ittt	le
 800b1e0:	2330      	movle	r3, #48	@ 0x30
 800b1e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1ea:	1b92      	subs	r2, r2, r6
 800b1ec:	6122      	str	r2, [r4, #16]
 800b1ee:	464b      	mov	r3, r9
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	f8cd a000 	str.w	sl, [sp]
 800b1f8:	aa03      	add	r2, sp, #12
 800b1fa:	f7ff fee3 	bl	800afc4 <_printf_common>
 800b1fe:	3001      	adds	r0, #1
 800b200:	d14a      	bne.n	800b298 <_printf_i+0x1f0>
 800b202:	f04f 30ff 	mov.w	r0, #4294967295
 800b206:	b004      	add	sp, #16
 800b208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	f043 0320 	orr.w	r3, r3, #32
 800b212:	6023      	str	r3, [r4, #0]
 800b214:	2778      	movs	r7, #120	@ 0x78
 800b216:	4832      	ldr	r0, [pc, #200]	@ (800b2e0 <_printf_i+0x238>)
 800b218:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	6831      	ldr	r1, [r6, #0]
 800b220:	061f      	lsls	r7, r3, #24
 800b222:	f851 5b04 	ldr.w	r5, [r1], #4
 800b226:	d402      	bmi.n	800b22e <_printf_i+0x186>
 800b228:	065f      	lsls	r7, r3, #25
 800b22a:	bf48      	it	mi
 800b22c:	b2ad      	uxthmi	r5, r5
 800b22e:	6031      	str	r1, [r6, #0]
 800b230:	07d9      	lsls	r1, r3, #31
 800b232:	bf44      	itt	mi
 800b234:	f043 0320 	orrmi.w	r3, r3, #32
 800b238:	6023      	strmi	r3, [r4, #0]
 800b23a:	b11d      	cbz	r5, 800b244 <_printf_i+0x19c>
 800b23c:	2310      	movs	r3, #16
 800b23e:	e7ad      	b.n	800b19c <_printf_i+0xf4>
 800b240:	4826      	ldr	r0, [pc, #152]	@ (800b2dc <_printf_i+0x234>)
 800b242:	e7e9      	b.n	800b218 <_printf_i+0x170>
 800b244:	6823      	ldr	r3, [r4, #0]
 800b246:	f023 0320 	bic.w	r3, r3, #32
 800b24a:	6023      	str	r3, [r4, #0]
 800b24c:	e7f6      	b.n	800b23c <_printf_i+0x194>
 800b24e:	4616      	mov	r6, r2
 800b250:	e7bd      	b.n	800b1ce <_printf_i+0x126>
 800b252:	6833      	ldr	r3, [r6, #0]
 800b254:	6825      	ldr	r5, [r4, #0]
 800b256:	1d18      	adds	r0, r3, #4
 800b258:	6961      	ldr	r1, [r4, #20]
 800b25a:	6030      	str	r0, [r6, #0]
 800b25c:	062e      	lsls	r6, r5, #24
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	d501      	bpl.n	800b266 <_printf_i+0x1be>
 800b262:	6019      	str	r1, [r3, #0]
 800b264:	e002      	b.n	800b26c <_printf_i+0x1c4>
 800b266:	0668      	lsls	r0, r5, #25
 800b268:	d5fb      	bpl.n	800b262 <_printf_i+0x1ba>
 800b26a:	8019      	strh	r1, [r3, #0]
 800b26c:	2300      	movs	r3, #0
 800b26e:	4616      	mov	r6, r2
 800b270:	6123      	str	r3, [r4, #16]
 800b272:	e7bc      	b.n	800b1ee <_printf_i+0x146>
 800b274:	6833      	ldr	r3, [r6, #0]
 800b276:	2100      	movs	r1, #0
 800b278:	1d1a      	adds	r2, r3, #4
 800b27a:	6032      	str	r2, [r6, #0]
 800b27c:	681e      	ldr	r6, [r3, #0]
 800b27e:	6862      	ldr	r2, [r4, #4]
 800b280:	4630      	mov	r0, r6
 800b282:	f000 fa58 	bl	800b736 <memchr>
 800b286:	b108      	cbz	r0, 800b28c <_printf_i+0x1e4>
 800b288:	1b80      	subs	r0, r0, r6
 800b28a:	6060      	str	r0, [r4, #4]
 800b28c:	6863      	ldr	r3, [r4, #4]
 800b28e:	6123      	str	r3, [r4, #16]
 800b290:	2300      	movs	r3, #0
 800b292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b296:	e7aa      	b.n	800b1ee <_printf_i+0x146>
 800b298:	4632      	mov	r2, r6
 800b29a:	4649      	mov	r1, r9
 800b29c:	4640      	mov	r0, r8
 800b29e:	6923      	ldr	r3, [r4, #16]
 800b2a0:	47d0      	blx	sl
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	d0ad      	beq.n	800b202 <_printf_i+0x15a>
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	079b      	lsls	r3, r3, #30
 800b2aa:	d413      	bmi.n	800b2d4 <_printf_i+0x22c>
 800b2ac:	68e0      	ldr	r0, [r4, #12]
 800b2ae:	9b03      	ldr	r3, [sp, #12]
 800b2b0:	4298      	cmp	r0, r3
 800b2b2:	bfb8      	it	lt
 800b2b4:	4618      	movlt	r0, r3
 800b2b6:	e7a6      	b.n	800b206 <_printf_i+0x15e>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	4632      	mov	r2, r6
 800b2bc:	4649      	mov	r1, r9
 800b2be:	4640      	mov	r0, r8
 800b2c0:	47d0      	blx	sl
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	d09d      	beq.n	800b202 <_printf_i+0x15a>
 800b2c6:	3501      	adds	r5, #1
 800b2c8:	68e3      	ldr	r3, [r4, #12]
 800b2ca:	9903      	ldr	r1, [sp, #12]
 800b2cc:	1a5b      	subs	r3, r3, r1
 800b2ce:	42ab      	cmp	r3, r5
 800b2d0:	dcf2      	bgt.n	800b2b8 <_printf_i+0x210>
 800b2d2:	e7eb      	b.n	800b2ac <_printf_i+0x204>
 800b2d4:	2500      	movs	r5, #0
 800b2d6:	f104 0619 	add.w	r6, r4, #25
 800b2da:	e7f5      	b.n	800b2c8 <_printf_i+0x220>
 800b2dc:	0800e222 	.word	0x0800e222
 800b2e0:	0800e233 	.word	0x0800e233

0800b2e4 <std>:
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b2ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2f2:	6083      	str	r3, [r0, #8]
 800b2f4:	8181      	strh	r1, [r0, #12]
 800b2f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b2f8:	81c2      	strh	r2, [r0, #14]
 800b2fa:	6183      	str	r3, [r0, #24]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	2208      	movs	r2, #8
 800b300:	305c      	adds	r0, #92	@ 0x5c
 800b302:	f000 f92a 	bl	800b55a <memset>
 800b306:	4b0d      	ldr	r3, [pc, #52]	@ (800b33c <std+0x58>)
 800b308:	6224      	str	r4, [r4, #32]
 800b30a:	6263      	str	r3, [r4, #36]	@ 0x24
 800b30c:	4b0c      	ldr	r3, [pc, #48]	@ (800b340 <std+0x5c>)
 800b30e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b310:	4b0c      	ldr	r3, [pc, #48]	@ (800b344 <std+0x60>)
 800b312:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b314:	4b0c      	ldr	r3, [pc, #48]	@ (800b348 <std+0x64>)
 800b316:	6323      	str	r3, [r4, #48]	@ 0x30
 800b318:	4b0c      	ldr	r3, [pc, #48]	@ (800b34c <std+0x68>)
 800b31a:	429c      	cmp	r4, r3
 800b31c:	d006      	beq.n	800b32c <std+0x48>
 800b31e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b322:	4294      	cmp	r4, r2
 800b324:	d002      	beq.n	800b32c <std+0x48>
 800b326:	33d0      	adds	r3, #208	@ 0xd0
 800b328:	429c      	cmp	r4, r3
 800b32a:	d105      	bne.n	800b338 <std+0x54>
 800b32c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b334:	f000 b9fc 	b.w	800b730 <__retarget_lock_init_recursive>
 800b338:	bd10      	pop	{r4, pc}
 800b33a:	bf00      	nop
 800b33c:	0800b4d5 	.word	0x0800b4d5
 800b340:	0800b4f7 	.word	0x0800b4f7
 800b344:	0800b52f 	.word	0x0800b52f
 800b348:	0800b553 	.word	0x0800b553
 800b34c:	20001758 	.word	0x20001758

0800b350 <stdio_exit_handler>:
 800b350:	4a02      	ldr	r2, [pc, #8]	@ (800b35c <stdio_exit_handler+0xc>)
 800b352:	4903      	ldr	r1, [pc, #12]	@ (800b360 <stdio_exit_handler+0x10>)
 800b354:	4803      	ldr	r0, [pc, #12]	@ (800b364 <stdio_exit_handler+0x14>)
 800b356:	f000 b869 	b.w	800b42c <_fwalk_sglue>
 800b35a:	bf00      	nop
 800b35c:	20000198 	.word	0x20000198
 800b360:	0800da15 	.word	0x0800da15
 800b364:	20000314 	.word	0x20000314

0800b368 <cleanup_stdio>:
 800b368:	6841      	ldr	r1, [r0, #4]
 800b36a:	4b0c      	ldr	r3, [pc, #48]	@ (800b39c <cleanup_stdio+0x34>)
 800b36c:	b510      	push	{r4, lr}
 800b36e:	4299      	cmp	r1, r3
 800b370:	4604      	mov	r4, r0
 800b372:	d001      	beq.n	800b378 <cleanup_stdio+0x10>
 800b374:	f002 fb4e 	bl	800da14 <_fflush_r>
 800b378:	68a1      	ldr	r1, [r4, #8]
 800b37a:	4b09      	ldr	r3, [pc, #36]	@ (800b3a0 <cleanup_stdio+0x38>)
 800b37c:	4299      	cmp	r1, r3
 800b37e:	d002      	beq.n	800b386 <cleanup_stdio+0x1e>
 800b380:	4620      	mov	r0, r4
 800b382:	f002 fb47 	bl	800da14 <_fflush_r>
 800b386:	68e1      	ldr	r1, [r4, #12]
 800b388:	4b06      	ldr	r3, [pc, #24]	@ (800b3a4 <cleanup_stdio+0x3c>)
 800b38a:	4299      	cmp	r1, r3
 800b38c:	d004      	beq.n	800b398 <cleanup_stdio+0x30>
 800b38e:	4620      	mov	r0, r4
 800b390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b394:	f002 bb3e 	b.w	800da14 <_fflush_r>
 800b398:	bd10      	pop	{r4, pc}
 800b39a:	bf00      	nop
 800b39c:	20001758 	.word	0x20001758
 800b3a0:	200017c0 	.word	0x200017c0
 800b3a4:	20001828 	.word	0x20001828

0800b3a8 <global_stdio_init.part.0>:
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d8 <global_stdio_init.part.0+0x30>)
 800b3ac:	4c0b      	ldr	r4, [pc, #44]	@ (800b3dc <global_stdio_init.part.0+0x34>)
 800b3ae:	4a0c      	ldr	r2, [pc, #48]	@ (800b3e0 <global_stdio_init.part.0+0x38>)
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	2104      	movs	r1, #4
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f7ff ff94 	bl	800b2e4 <std>
 800b3bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	2109      	movs	r1, #9
 800b3c4:	f7ff ff8e 	bl	800b2e4 <std>
 800b3c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d2:	2112      	movs	r1, #18
 800b3d4:	f7ff bf86 	b.w	800b2e4 <std>
 800b3d8:	20001890 	.word	0x20001890
 800b3dc:	20001758 	.word	0x20001758
 800b3e0:	0800b351 	.word	0x0800b351

0800b3e4 <__sfp_lock_acquire>:
 800b3e4:	4801      	ldr	r0, [pc, #4]	@ (800b3ec <__sfp_lock_acquire+0x8>)
 800b3e6:	f000 b9a4 	b.w	800b732 <__retarget_lock_acquire_recursive>
 800b3ea:	bf00      	nop
 800b3ec:	20001899 	.word	0x20001899

0800b3f0 <__sfp_lock_release>:
 800b3f0:	4801      	ldr	r0, [pc, #4]	@ (800b3f8 <__sfp_lock_release+0x8>)
 800b3f2:	f000 b99f 	b.w	800b734 <__retarget_lock_release_recursive>
 800b3f6:	bf00      	nop
 800b3f8:	20001899 	.word	0x20001899

0800b3fc <__sinit>:
 800b3fc:	b510      	push	{r4, lr}
 800b3fe:	4604      	mov	r4, r0
 800b400:	f7ff fff0 	bl	800b3e4 <__sfp_lock_acquire>
 800b404:	6a23      	ldr	r3, [r4, #32]
 800b406:	b11b      	cbz	r3, 800b410 <__sinit+0x14>
 800b408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b40c:	f7ff bff0 	b.w	800b3f0 <__sfp_lock_release>
 800b410:	4b04      	ldr	r3, [pc, #16]	@ (800b424 <__sinit+0x28>)
 800b412:	6223      	str	r3, [r4, #32]
 800b414:	4b04      	ldr	r3, [pc, #16]	@ (800b428 <__sinit+0x2c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1f5      	bne.n	800b408 <__sinit+0xc>
 800b41c:	f7ff ffc4 	bl	800b3a8 <global_stdio_init.part.0>
 800b420:	e7f2      	b.n	800b408 <__sinit+0xc>
 800b422:	bf00      	nop
 800b424:	0800b369 	.word	0x0800b369
 800b428:	20001890 	.word	0x20001890

0800b42c <_fwalk_sglue>:
 800b42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b430:	4607      	mov	r7, r0
 800b432:	4688      	mov	r8, r1
 800b434:	4614      	mov	r4, r2
 800b436:	2600      	movs	r6, #0
 800b438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b43c:	f1b9 0901 	subs.w	r9, r9, #1
 800b440:	d505      	bpl.n	800b44e <_fwalk_sglue+0x22>
 800b442:	6824      	ldr	r4, [r4, #0]
 800b444:	2c00      	cmp	r4, #0
 800b446:	d1f7      	bne.n	800b438 <_fwalk_sglue+0xc>
 800b448:	4630      	mov	r0, r6
 800b44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b44e:	89ab      	ldrh	r3, [r5, #12]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d907      	bls.n	800b464 <_fwalk_sglue+0x38>
 800b454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b458:	3301      	adds	r3, #1
 800b45a:	d003      	beq.n	800b464 <_fwalk_sglue+0x38>
 800b45c:	4629      	mov	r1, r5
 800b45e:	4638      	mov	r0, r7
 800b460:	47c0      	blx	r8
 800b462:	4306      	orrs	r6, r0
 800b464:	3568      	adds	r5, #104	@ 0x68
 800b466:	e7e9      	b.n	800b43c <_fwalk_sglue+0x10>

0800b468 <sniprintf>:
 800b468:	b40c      	push	{r2, r3}
 800b46a:	b530      	push	{r4, r5, lr}
 800b46c:	4b18      	ldr	r3, [pc, #96]	@ (800b4d0 <sniprintf+0x68>)
 800b46e:	1e0c      	subs	r4, r1, #0
 800b470:	681d      	ldr	r5, [r3, #0]
 800b472:	b09d      	sub	sp, #116	@ 0x74
 800b474:	da08      	bge.n	800b488 <sniprintf+0x20>
 800b476:	238b      	movs	r3, #139	@ 0x8b
 800b478:	f04f 30ff 	mov.w	r0, #4294967295
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	b01d      	add	sp, #116	@ 0x74
 800b480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b484:	b002      	add	sp, #8
 800b486:	4770      	bx	lr
 800b488:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b48c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b490:	f04f 0300 	mov.w	r3, #0
 800b494:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b496:	bf0c      	ite	eq
 800b498:	4623      	moveq	r3, r4
 800b49a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b49e:	9304      	str	r3, [sp, #16]
 800b4a0:	9307      	str	r3, [sp, #28]
 800b4a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b4a6:	9002      	str	r0, [sp, #8]
 800b4a8:	9006      	str	r0, [sp, #24]
 800b4aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	ab21      	add	r3, sp, #132	@ 0x84
 800b4b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b4b4:	a902      	add	r1, sp, #8
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	f002 f930 	bl	800d71c <_svfiprintf_r>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	bfbc      	itt	lt
 800b4c0:	238b      	movlt	r3, #139	@ 0x8b
 800b4c2:	602b      	strlt	r3, [r5, #0]
 800b4c4:	2c00      	cmp	r4, #0
 800b4c6:	d0da      	beq.n	800b47e <sniprintf+0x16>
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	9b02      	ldr	r3, [sp, #8]
 800b4cc:	701a      	strb	r2, [r3, #0]
 800b4ce:	e7d6      	b.n	800b47e <sniprintf+0x16>
 800b4d0:	20000310 	.word	0x20000310

0800b4d4 <__sread>:
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4dc:	f000 f8da 	bl	800b694 <_read_r>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	bfab      	itete	ge
 800b4e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b4e6:	89a3      	ldrhlt	r3, [r4, #12]
 800b4e8:	181b      	addge	r3, r3, r0
 800b4ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b4ee:	bfac      	ite	ge
 800b4f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b4f2:	81a3      	strhlt	r3, [r4, #12]
 800b4f4:	bd10      	pop	{r4, pc}

0800b4f6 <__swrite>:
 800b4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fa:	461f      	mov	r7, r3
 800b4fc:	898b      	ldrh	r3, [r1, #12]
 800b4fe:	4605      	mov	r5, r0
 800b500:	05db      	lsls	r3, r3, #23
 800b502:	460c      	mov	r4, r1
 800b504:	4616      	mov	r6, r2
 800b506:	d505      	bpl.n	800b514 <__swrite+0x1e>
 800b508:	2302      	movs	r3, #2
 800b50a:	2200      	movs	r2, #0
 800b50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b510:	f000 f8ae 	bl	800b670 <_lseek_r>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	4632      	mov	r2, r6
 800b518:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b51c:	81a3      	strh	r3, [r4, #12]
 800b51e:	4628      	mov	r0, r5
 800b520:	463b      	mov	r3, r7
 800b522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b52a:	f000 b8c5 	b.w	800b6b8 <_write_r>

0800b52e <__sseek>:
 800b52e:	b510      	push	{r4, lr}
 800b530:	460c      	mov	r4, r1
 800b532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b536:	f000 f89b 	bl	800b670 <_lseek_r>
 800b53a:	1c43      	adds	r3, r0, #1
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	bf15      	itete	ne
 800b540:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b542:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b546:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b54a:	81a3      	strheq	r3, [r4, #12]
 800b54c:	bf18      	it	ne
 800b54e:	81a3      	strhne	r3, [r4, #12]
 800b550:	bd10      	pop	{r4, pc}

0800b552 <__sclose>:
 800b552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b556:	f000 b87b 	b.w	800b650 <_close_r>

0800b55a <memset>:
 800b55a:	4603      	mov	r3, r0
 800b55c:	4402      	add	r2, r0
 800b55e:	4293      	cmp	r3, r2
 800b560:	d100      	bne.n	800b564 <memset+0xa>
 800b562:	4770      	bx	lr
 800b564:	f803 1b01 	strb.w	r1, [r3], #1
 800b568:	e7f9      	b.n	800b55e <memset+0x4>

0800b56a <strncmp>:
 800b56a:	b510      	push	{r4, lr}
 800b56c:	b16a      	cbz	r2, 800b58a <strncmp+0x20>
 800b56e:	3901      	subs	r1, #1
 800b570:	1884      	adds	r4, r0, r2
 800b572:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b576:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d103      	bne.n	800b586 <strncmp+0x1c>
 800b57e:	42a0      	cmp	r0, r4
 800b580:	d001      	beq.n	800b586 <strncmp+0x1c>
 800b582:	2a00      	cmp	r2, #0
 800b584:	d1f5      	bne.n	800b572 <strncmp+0x8>
 800b586:	1ad0      	subs	r0, r2, r3
 800b588:	bd10      	pop	{r4, pc}
 800b58a:	4610      	mov	r0, r2
 800b58c:	e7fc      	b.n	800b588 <strncmp+0x1e>
	...

0800b590 <strtok>:
 800b590:	4b16      	ldr	r3, [pc, #88]	@ (800b5ec <strtok+0x5c>)
 800b592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b596:	681f      	ldr	r7, [r3, #0]
 800b598:	4605      	mov	r5, r0
 800b59a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b59c:	460e      	mov	r6, r1
 800b59e:	b9ec      	cbnz	r4, 800b5dc <strtok+0x4c>
 800b5a0:	2050      	movs	r0, #80	@ 0x50
 800b5a2:	f001 faeb 	bl	800cb7c <malloc>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	6478      	str	r0, [r7, #68]	@ 0x44
 800b5aa:	b920      	cbnz	r0, 800b5b6 <strtok+0x26>
 800b5ac:	215b      	movs	r1, #91	@ 0x5b
 800b5ae:	4b10      	ldr	r3, [pc, #64]	@ (800b5f0 <strtok+0x60>)
 800b5b0:	4810      	ldr	r0, [pc, #64]	@ (800b5f4 <strtok+0x64>)
 800b5b2:	f000 f8e7 	bl	800b784 <__assert_func>
 800b5b6:	e9c0 4400 	strd	r4, r4, [r0]
 800b5ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b5be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b5c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b5c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b5ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b5ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b5d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b5d6:	6184      	str	r4, [r0, #24]
 800b5d8:	7704      	strb	r4, [r0, #28]
 800b5da:	6244      	str	r4, [r0, #36]	@ 0x24
 800b5dc:	4631      	mov	r1, r6
 800b5de:	4628      	mov	r0, r5
 800b5e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	f000 b806 	b.w	800b5f8 <__strtok_r>
 800b5ec:	20000310 	.word	0x20000310
 800b5f0:	0800e244 	.word	0x0800e244
 800b5f4:	0800e25b 	.word	0x0800e25b

0800b5f8 <__strtok_r>:
 800b5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	b908      	cbnz	r0, 800b602 <__strtok_r+0xa>
 800b5fe:	6814      	ldr	r4, [r2, #0]
 800b600:	b144      	cbz	r4, 800b614 <__strtok_r+0x1c>
 800b602:	460f      	mov	r7, r1
 800b604:	4620      	mov	r0, r4
 800b606:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b60a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b60e:	b91e      	cbnz	r6, 800b618 <__strtok_r+0x20>
 800b610:	b965      	cbnz	r5, 800b62c <__strtok_r+0x34>
 800b612:	6015      	str	r5, [r2, #0]
 800b614:	2000      	movs	r0, #0
 800b616:	e005      	b.n	800b624 <__strtok_r+0x2c>
 800b618:	42b5      	cmp	r5, r6
 800b61a:	d1f6      	bne.n	800b60a <__strtok_r+0x12>
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1f0      	bne.n	800b602 <__strtok_r+0xa>
 800b620:	6014      	str	r4, [r2, #0]
 800b622:	7003      	strb	r3, [r0, #0]
 800b624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b626:	461c      	mov	r4, r3
 800b628:	e00c      	b.n	800b644 <__strtok_r+0x4c>
 800b62a:	b91d      	cbnz	r5, 800b634 <__strtok_r+0x3c>
 800b62c:	460e      	mov	r6, r1
 800b62e:	4627      	mov	r7, r4
 800b630:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b634:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b638:	42ab      	cmp	r3, r5
 800b63a:	d1f6      	bne.n	800b62a <__strtok_r+0x32>
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d0f2      	beq.n	800b626 <__strtok_r+0x2e>
 800b640:	2300      	movs	r3, #0
 800b642:	703b      	strb	r3, [r7, #0]
 800b644:	6014      	str	r4, [r2, #0]
 800b646:	e7ed      	b.n	800b624 <__strtok_r+0x2c>

0800b648 <_localeconv_r>:
 800b648:	4800      	ldr	r0, [pc, #0]	@ (800b64c <_localeconv_r+0x4>)
 800b64a:	4770      	bx	lr
 800b64c:	20000294 	.word	0x20000294

0800b650 <_close_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	2300      	movs	r3, #0
 800b654:	4d05      	ldr	r5, [pc, #20]	@ (800b66c <_close_r+0x1c>)
 800b656:	4604      	mov	r4, r0
 800b658:	4608      	mov	r0, r1
 800b65a:	602b      	str	r3, [r5, #0]
 800b65c:	f7f6 fdd1 	bl	8002202 <_close>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d102      	bne.n	800b66a <_close_r+0x1a>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b103      	cbz	r3, 800b66a <_close_r+0x1a>
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	20001894 	.word	0x20001894

0800b670 <_lseek_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4604      	mov	r4, r0
 800b674:	4608      	mov	r0, r1
 800b676:	4611      	mov	r1, r2
 800b678:	2200      	movs	r2, #0
 800b67a:	4d05      	ldr	r5, [pc, #20]	@ (800b690 <_lseek_r+0x20>)
 800b67c:	602a      	str	r2, [r5, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	f7f6 fde3 	bl	800224a <_lseek>
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d102      	bne.n	800b68e <_lseek_r+0x1e>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	b103      	cbz	r3, 800b68e <_lseek_r+0x1e>
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
 800b690:	20001894 	.word	0x20001894

0800b694 <_read_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	4611      	mov	r1, r2
 800b69c:	2200      	movs	r2, #0
 800b69e:	4d05      	ldr	r5, [pc, #20]	@ (800b6b4 <_read_r+0x20>)
 800b6a0:	602a      	str	r2, [r5, #0]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	f7f6 fd74 	bl	8002190 <_read>
 800b6a8:	1c43      	adds	r3, r0, #1
 800b6aa:	d102      	bne.n	800b6b2 <_read_r+0x1e>
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	b103      	cbz	r3, 800b6b2 <_read_r+0x1e>
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	bd38      	pop	{r3, r4, r5, pc}
 800b6b4:	20001894 	.word	0x20001894

0800b6b8 <_write_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	4608      	mov	r0, r1
 800b6be:	4611      	mov	r1, r2
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4d05      	ldr	r5, [pc, #20]	@ (800b6d8 <_write_r+0x20>)
 800b6c4:	602a      	str	r2, [r5, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	f7f6 fd7f 	bl	80021ca <_write>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	d102      	bne.n	800b6d6 <_write_r+0x1e>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	b103      	cbz	r3, 800b6d6 <_write_r+0x1e>
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	20001894 	.word	0x20001894

0800b6dc <__errno>:
 800b6dc:	4b01      	ldr	r3, [pc, #4]	@ (800b6e4 <__errno+0x8>)
 800b6de:	6818      	ldr	r0, [r3, #0]
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	20000310 	.word	0x20000310

0800b6e8 <__libc_init_array>:
 800b6e8:	b570      	push	{r4, r5, r6, lr}
 800b6ea:	2600      	movs	r6, #0
 800b6ec:	4d0c      	ldr	r5, [pc, #48]	@ (800b720 <__libc_init_array+0x38>)
 800b6ee:	4c0d      	ldr	r4, [pc, #52]	@ (800b724 <__libc_init_array+0x3c>)
 800b6f0:	1b64      	subs	r4, r4, r5
 800b6f2:	10a4      	asrs	r4, r4, #2
 800b6f4:	42a6      	cmp	r6, r4
 800b6f6:	d109      	bne.n	800b70c <__libc_init_array+0x24>
 800b6f8:	f002 fd20 	bl	800e13c <_init>
 800b6fc:	2600      	movs	r6, #0
 800b6fe:	4d0a      	ldr	r5, [pc, #40]	@ (800b728 <__libc_init_array+0x40>)
 800b700:	4c0a      	ldr	r4, [pc, #40]	@ (800b72c <__libc_init_array+0x44>)
 800b702:	1b64      	subs	r4, r4, r5
 800b704:	10a4      	asrs	r4, r4, #2
 800b706:	42a6      	cmp	r6, r4
 800b708:	d105      	bne.n	800b716 <__libc_init_array+0x2e>
 800b70a:	bd70      	pop	{r4, r5, r6, pc}
 800b70c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b710:	4798      	blx	r3
 800b712:	3601      	adds	r6, #1
 800b714:	e7ee      	b.n	800b6f4 <__libc_init_array+0xc>
 800b716:	f855 3b04 	ldr.w	r3, [r5], #4
 800b71a:	4798      	blx	r3
 800b71c:	3601      	adds	r6, #1
 800b71e:	e7f2      	b.n	800b706 <__libc_init_array+0x1e>
 800b720:	0800e69c 	.word	0x0800e69c
 800b724:	0800e69c 	.word	0x0800e69c
 800b728:	0800e69c 	.word	0x0800e69c
 800b72c:	0800e6a0 	.word	0x0800e6a0

0800b730 <__retarget_lock_init_recursive>:
 800b730:	4770      	bx	lr

0800b732 <__retarget_lock_acquire_recursive>:
 800b732:	4770      	bx	lr

0800b734 <__retarget_lock_release_recursive>:
 800b734:	4770      	bx	lr

0800b736 <memchr>:
 800b736:	4603      	mov	r3, r0
 800b738:	b510      	push	{r4, lr}
 800b73a:	b2c9      	uxtb	r1, r1
 800b73c:	4402      	add	r2, r0
 800b73e:	4293      	cmp	r3, r2
 800b740:	4618      	mov	r0, r3
 800b742:	d101      	bne.n	800b748 <memchr+0x12>
 800b744:	2000      	movs	r0, #0
 800b746:	e003      	b.n	800b750 <memchr+0x1a>
 800b748:	7804      	ldrb	r4, [r0, #0]
 800b74a:	3301      	adds	r3, #1
 800b74c:	428c      	cmp	r4, r1
 800b74e:	d1f6      	bne.n	800b73e <memchr+0x8>
 800b750:	bd10      	pop	{r4, pc}

0800b752 <memcpy>:
 800b752:	440a      	add	r2, r1
 800b754:	4291      	cmp	r1, r2
 800b756:	f100 33ff 	add.w	r3, r0, #4294967295
 800b75a:	d100      	bne.n	800b75e <memcpy+0xc>
 800b75c:	4770      	bx	lr
 800b75e:	b510      	push	{r4, lr}
 800b760:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b764:	4291      	cmp	r1, r2
 800b766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b76a:	d1f9      	bne.n	800b760 <memcpy+0xe>
 800b76c:	bd10      	pop	{r4, pc}
	...

0800b770 <nan>:
 800b770:	2000      	movs	r0, #0
 800b772:	4901      	ldr	r1, [pc, #4]	@ (800b778 <nan+0x8>)
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	7ff80000 	.word	0x7ff80000

0800b77c <nanf>:
 800b77c:	4800      	ldr	r0, [pc, #0]	@ (800b780 <nanf+0x4>)
 800b77e:	4770      	bx	lr
 800b780:	7fc00000 	.word	0x7fc00000

0800b784 <__assert_func>:
 800b784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b786:	4614      	mov	r4, r2
 800b788:	461a      	mov	r2, r3
 800b78a:	4b09      	ldr	r3, [pc, #36]	@ (800b7b0 <__assert_func+0x2c>)
 800b78c:	4605      	mov	r5, r0
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68d8      	ldr	r0, [r3, #12]
 800b792:	b14c      	cbz	r4, 800b7a8 <__assert_func+0x24>
 800b794:	4b07      	ldr	r3, [pc, #28]	@ (800b7b4 <__assert_func+0x30>)
 800b796:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b79a:	9100      	str	r1, [sp, #0]
 800b79c:	462b      	mov	r3, r5
 800b79e:	4906      	ldr	r1, [pc, #24]	@ (800b7b8 <__assert_func+0x34>)
 800b7a0:	f002 f960 	bl	800da64 <fiprintf>
 800b7a4:	f002 f99a 	bl	800dadc <abort>
 800b7a8:	4b04      	ldr	r3, [pc, #16]	@ (800b7bc <__assert_func+0x38>)
 800b7aa:	461c      	mov	r4, r3
 800b7ac:	e7f3      	b.n	800b796 <__assert_func+0x12>
 800b7ae:	bf00      	nop
 800b7b0:	20000310 	.word	0x20000310
 800b7b4:	0800e2bd 	.word	0x0800e2bd
 800b7b8:	0800e2ca 	.word	0x0800e2ca
 800b7bc:	0800e2f8 	.word	0x0800e2f8

0800b7c0 <quorem>:
 800b7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	6903      	ldr	r3, [r0, #16]
 800b7c6:	690c      	ldr	r4, [r1, #16]
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	42a3      	cmp	r3, r4
 800b7cc:	db7e      	blt.n	800b8cc <quorem+0x10c>
 800b7ce:	3c01      	subs	r4, #1
 800b7d0:	00a3      	lsls	r3, r4, #2
 800b7d2:	f100 0514 	add.w	r5, r0, #20
 800b7d6:	f101 0814 	add.w	r8, r1, #20
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7f6:	d32e      	bcc.n	800b856 <quorem+0x96>
 800b7f8:	f04f 0a00 	mov.w	sl, #0
 800b7fc:	46c4      	mov	ip, r8
 800b7fe:	46ae      	mov	lr, r5
 800b800:	46d3      	mov	fp, sl
 800b802:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b806:	b298      	uxth	r0, r3
 800b808:	fb06 a000 	mla	r0, r6, r0, sl
 800b80c:	0c1b      	lsrs	r3, r3, #16
 800b80e:	0c02      	lsrs	r2, r0, #16
 800b810:	fb06 2303 	mla	r3, r6, r3, r2
 800b814:	f8de 2000 	ldr.w	r2, [lr]
 800b818:	b280      	uxth	r0, r0
 800b81a:	b292      	uxth	r2, r2
 800b81c:	1a12      	subs	r2, r2, r0
 800b81e:	445a      	add	r2, fp
 800b820:	f8de 0000 	ldr.w	r0, [lr]
 800b824:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b828:	b29b      	uxth	r3, r3
 800b82a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b82e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b832:	b292      	uxth	r2, r2
 800b834:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b838:	45e1      	cmp	r9, ip
 800b83a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b83e:	f84e 2b04 	str.w	r2, [lr], #4
 800b842:	d2de      	bcs.n	800b802 <quorem+0x42>
 800b844:	9b00      	ldr	r3, [sp, #0]
 800b846:	58eb      	ldr	r3, [r5, r3]
 800b848:	b92b      	cbnz	r3, 800b856 <quorem+0x96>
 800b84a:	9b01      	ldr	r3, [sp, #4]
 800b84c:	3b04      	subs	r3, #4
 800b84e:	429d      	cmp	r5, r3
 800b850:	461a      	mov	r2, r3
 800b852:	d32f      	bcc.n	800b8b4 <quorem+0xf4>
 800b854:	613c      	str	r4, [r7, #16]
 800b856:	4638      	mov	r0, r7
 800b858:	f001 fd14 	bl	800d284 <__mcmp>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	db25      	blt.n	800b8ac <quorem+0xec>
 800b860:	4629      	mov	r1, r5
 800b862:	2000      	movs	r0, #0
 800b864:	f858 2b04 	ldr.w	r2, [r8], #4
 800b868:	f8d1 c000 	ldr.w	ip, [r1]
 800b86c:	fa1f fe82 	uxth.w	lr, r2
 800b870:	fa1f f38c 	uxth.w	r3, ip
 800b874:	eba3 030e 	sub.w	r3, r3, lr
 800b878:	4403      	add	r3, r0
 800b87a:	0c12      	lsrs	r2, r2, #16
 800b87c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b880:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b884:	b29b      	uxth	r3, r3
 800b886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b88a:	45c1      	cmp	r9, r8
 800b88c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b890:	f841 3b04 	str.w	r3, [r1], #4
 800b894:	d2e6      	bcs.n	800b864 <quorem+0xa4>
 800b896:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b89a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b89e:	b922      	cbnz	r2, 800b8aa <quorem+0xea>
 800b8a0:	3b04      	subs	r3, #4
 800b8a2:	429d      	cmp	r5, r3
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	d30b      	bcc.n	800b8c0 <quorem+0x100>
 800b8a8:	613c      	str	r4, [r7, #16]
 800b8aa:	3601      	adds	r6, #1
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	b003      	add	sp, #12
 800b8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b4:	6812      	ldr	r2, [r2, #0]
 800b8b6:	3b04      	subs	r3, #4
 800b8b8:	2a00      	cmp	r2, #0
 800b8ba:	d1cb      	bne.n	800b854 <quorem+0x94>
 800b8bc:	3c01      	subs	r4, #1
 800b8be:	e7c6      	b.n	800b84e <quorem+0x8e>
 800b8c0:	6812      	ldr	r2, [r2, #0]
 800b8c2:	3b04      	subs	r3, #4
 800b8c4:	2a00      	cmp	r2, #0
 800b8c6:	d1ef      	bne.n	800b8a8 <quorem+0xe8>
 800b8c8:	3c01      	subs	r4, #1
 800b8ca:	e7ea      	b.n	800b8a2 <quorem+0xe2>
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	e7ee      	b.n	800b8ae <quorem+0xee>

0800b8d0 <_dtoa_r>:
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	4614      	mov	r4, r2
 800b8d6:	461d      	mov	r5, r3
 800b8d8:	69c7      	ldr	r7, [r0, #28]
 800b8da:	b097      	sub	sp, #92	@ 0x5c
 800b8dc:	4681      	mov	r9, r0
 800b8de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b8e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b8e4:	b97f      	cbnz	r7, 800b906 <_dtoa_r+0x36>
 800b8e6:	2010      	movs	r0, #16
 800b8e8:	f001 f948 	bl	800cb7c <malloc>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	f8c9 001c 	str.w	r0, [r9, #28]
 800b8f2:	b920      	cbnz	r0, 800b8fe <_dtoa_r+0x2e>
 800b8f4:	21ef      	movs	r1, #239	@ 0xef
 800b8f6:	4bac      	ldr	r3, [pc, #688]	@ (800bba8 <_dtoa_r+0x2d8>)
 800b8f8:	48ac      	ldr	r0, [pc, #688]	@ (800bbac <_dtoa_r+0x2dc>)
 800b8fa:	f7ff ff43 	bl	800b784 <__assert_func>
 800b8fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b902:	6007      	str	r7, [r0, #0]
 800b904:	60c7      	str	r7, [r0, #12]
 800b906:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b90a:	6819      	ldr	r1, [r3, #0]
 800b90c:	b159      	cbz	r1, 800b926 <_dtoa_r+0x56>
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	2301      	movs	r3, #1
 800b912:	4093      	lsls	r3, r2
 800b914:	604a      	str	r2, [r1, #4]
 800b916:	608b      	str	r3, [r1, #8]
 800b918:	4648      	mov	r0, r9
 800b91a:	f001 fa37 	bl	800cd8c <_Bfree>
 800b91e:	2200      	movs	r2, #0
 800b920:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	1e2b      	subs	r3, r5, #0
 800b928:	bfaf      	iteee	ge
 800b92a:	2300      	movge	r3, #0
 800b92c:	2201      	movlt	r2, #1
 800b92e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b932:	9307      	strlt	r3, [sp, #28]
 800b934:	bfa8      	it	ge
 800b936:	6033      	strge	r3, [r6, #0]
 800b938:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800b93c:	4b9c      	ldr	r3, [pc, #624]	@ (800bbb0 <_dtoa_r+0x2e0>)
 800b93e:	bfb8      	it	lt
 800b940:	6032      	strlt	r2, [r6, #0]
 800b942:	ea33 0308 	bics.w	r3, r3, r8
 800b946:	d112      	bne.n	800b96e <_dtoa_r+0x9e>
 800b948:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b94c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b94e:	6013      	str	r3, [r2, #0]
 800b950:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b954:	4323      	orrs	r3, r4
 800b956:	f000 855e 	beq.w	800c416 <_dtoa_r+0xb46>
 800b95a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b95c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bbb4 <_dtoa_r+0x2e4>
 800b960:	2b00      	cmp	r3, #0
 800b962:	f000 8560 	beq.w	800c426 <_dtoa_r+0xb56>
 800b966:	f10a 0303 	add.w	r3, sl, #3
 800b96a:	f000 bd5a 	b.w	800c422 <_dtoa_r+0xb52>
 800b96e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b972:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b97a:	2200      	movs	r2, #0
 800b97c:	2300      	movs	r3, #0
 800b97e:	f7f5 f813 	bl	80009a8 <__aeabi_dcmpeq>
 800b982:	4607      	mov	r7, r0
 800b984:	b158      	cbz	r0, 800b99e <_dtoa_r+0xce>
 800b986:	2301      	movs	r3, #1
 800b988:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b98a:	6013      	str	r3, [r2, #0]
 800b98c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b98e:	b113      	cbz	r3, 800b996 <_dtoa_r+0xc6>
 800b990:	4b89      	ldr	r3, [pc, #548]	@ (800bbb8 <_dtoa_r+0x2e8>)
 800b992:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b994:	6013      	str	r3, [r2, #0]
 800b996:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800bbbc <_dtoa_r+0x2ec>
 800b99a:	f000 bd44 	b.w	800c426 <_dtoa_r+0xb56>
 800b99e:	ab14      	add	r3, sp, #80	@ 0x50
 800b9a0:	9301      	str	r3, [sp, #4]
 800b9a2:	ab15      	add	r3, sp, #84	@ 0x54
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	4648      	mov	r0, r9
 800b9a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b9ac:	f001 fd82 	bl	800d4b4 <__d2b>
 800b9b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b9b4:	9003      	str	r0, [sp, #12]
 800b9b6:	2e00      	cmp	r6, #0
 800b9b8:	d078      	beq.n	800baac <_dtoa_r+0x1dc>
 800b9ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b9c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b9cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b9d0:	9712      	str	r7, [sp, #72]	@ 0x48
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	4b7a      	ldr	r3, [pc, #488]	@ (800bbc0 <_dtoa_r+0x2f0>)
 800b9d8:	f7f4 fbc6 	bl	8000168 <__aeabi_dsub>
 800b9dc:	a36c      	add	r3, pc, #432	@ (adr r3, 800bb90 <_dtoa_r+0x2c0>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f4 fd79 	bl	80004d8 <__aeabi_dmul>
 800b9e6:	a36c      	add	r3, pc, #432	@ (adr r3, 800bb98 <_dtoa_r+0x2c8>)
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	f7f4 fbbe 	bl	800016c <__adddf3>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	460d      	mov	r5, r1
 800b9f6:	f7f4 fd05 	bl	8000404 <__aeabi_i2d>
 800b9fa:	a369      	add	r3, pc, #420	@ (adr r3, 800bba0 <_dtoa_r+0x2d0>)
 800b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba00:	f7f4 fd6a 	bl	80004d8 <__aeabi_dmul>
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	4620      	mov	r0, r4
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	f7f4 fbae 	bl	800016c <__adddf3>
 800ba10:	4604      	mov	r4, r0
 800ba12:	460d      	mov	r5, r1
 800ba14:	f7f5 f810 	bl	8000a38 <__aeabi_d2iz>
 800ba18:	2200      	movs	r2, #0
 800ba1a:	4607      	mov	r7, r0
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	4620      	mov	r0, r4
 800ba20:	4629      	mov	r1, r5
 800ba22:	f7f4 ffcb 	bl	80009bc <__aeabi_dcmplt>
 800ba26:	b140      	cbz	r0, 800ba3a <_dtoa_r+0x16a>
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7f4 fceb 	bl	8000404 <__aeabi_i2d>
 800ba2e:	4622      	mov	r2, r4
 800ba30:	462b      	mov	r3, r5
 800ba32:	f7f4 ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 800ba36:	b900      	cbnz	r0, 800ba3a <_dtoa_r+0x16a>
 800ba38:	3f01      	subs	r7, #1
 800ba3a:	2f16      	cmp	r7, #22
 800ba3c:	d854      	bhi.n	800bae8 <_dtoa_r+0x218>
 800ba3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba42:	4b60      	ldr	r3, [pc, #384]	@ (800bbc4 <_dtoa_r+0x2f4>)
 800ba44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f7f4 ffb6 	bl	80009bc <__aeabi_dcmplt>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d04b      	beq.n	800baec <_dtoa_r+0x21c>
 800ba54:	2300      	movs	r3, #0
 800ba56:	3f01      	subs	r7, #1
 800ba58:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba5c:	1b9b      	subs	r3, r3, r6
 800ba5e:	1e5a      	subs	r2, r3, #1
 800ba60:	bf49      	itett	mi
 800ba62:	f1c3 0301 	rsbmi	r3, r3, #1
 800ba66:	2300      	movpl	r3, #0
 800ba68:	9304      	strmi	r3, [sp, #16]
 800ba6a:	2300      	movmi	r3, #0
 800ba6c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba6e:	bf54      	ite	pl
 800ba70:	9304      	strpl	r3, [sp, #16]
 800ba72:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800ba74:	2f00      	cmp	r7, #0
 800ba76:	db3b      	blt.n	800baf0 <_dtoa_r+0x220>
 800ba78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7a:	970e      	str	r7, [sp, #56]	@ 0x38
 800ba7c:	443b      	add	r3, r7
 800ba7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba80:	2300      	movs	r3, #0
 800ba82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba86:	2b09      	cmp	r3, #9
 800ba88:	d865      	bhi.n	800bb56 <_dtoa_r+0x286>
 800ba8a:	2b05      	cmp	r3, #5
 800ba8c:	bfc4      	itt	gt
 800ba8e:	3b04      	subgt	r3, #4
 800ba90:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800ba92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba94:	bfc8      	it	gt
 800ba96:	2400      	movgt	r4, #0
 800ba98:	f1a3 0302 	sub.w	r3, r3, #2
 800ba9c:	bfd8      	it	le
 800ba9e:	2401      	movle	r4, #1
 800baa0:	2b03      	cmp	r3, #3
 800baa2:	d864      	bhi.n	800bb6e <_dtoa_r+0x29e>
 800baa4:	e8df f003 	tbb	[pc, r3]
 800baa8:	2c385553 	.word	0x2c385553
 800baac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bab0:	441e      	add	r6, r3
 800bab2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bab6:	2b20      	cmp	r3, #32
 800bab8:	bfc1      	itttt	gt
 800baba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800babe:	fa08 f803 	lslgt.w	r8, r8, r3
 800bac2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bac6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800baca:	bfd6      	itet	le
 800bacc:	f1c3 0320 	rsble	r3, r3, #32
 800bad0:	ea48 0003 	orrgt.w	r0, r8, r3
 800bad4:	fa04 f003 	lslle.w	r0, r4, r3
 800bad8:	f7f4 fc84 	bl	80003e4 <__aeabi_ui2d>
 800badc:	2201      	movs	r2, #1
 800bade:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bae2:	3e01      	subs	r6, #1
 800bae4:	9212      	str	r2, [sp, #72]	@ 0x48
 800bae6:	e774      	b.n	800b9d2 <_dtoa_r+0x102>
 800bae8:	2301      	movs	r3, #1
 800baea:	e7b5      	b.n	800ba58 <_dtoa_r+0x188>
 800baec:	900f      	str	r0, [sp, #60]	@ 0x3c
 800baee:	e7b4      	b.n	800ba5a <_dtoa_r+0x18a>
 800baf0:	9b04      	ldr	r3, [sp, #16]
 800baf2:	1bdb      	subs	r3, r3, r7
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	427b      	negs	r3, r7
 800baf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bafa:	2300      	movs	r3, #0
 800bafc:	930e      	str	r3, [sp, #56]	@ 0x38
 800bafe:	e7c1      	b.n	800ba84 <_dtoa_r+0x1b4>
 800bb00:	2301      	movs	r3, #1
 800bb02:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb06:	eb07 0b03 	add.w	fp, r7, r3
 800bb0a:	f10b 0301 	add.w	r3, fp, #1
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	9308      	str	r3, [sp, #32]
 800bb12:	bfb8      	it	lt
 800bb14:	2301      	movlt	r3, #1
 800bb16:	e006      	b.n	800bb26 <_dtoa_r+0x256>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	dd28      	ble.n	800bb74 <_dtoa_r+0x2a4>
 800bb22:	469b      	mov	fp, r3
 800bb24:	9308      	str	r3, [sp, #32]
 800bb26:	2100      	movs	r1, #0
 800bb28:	2204      	movs	r2, #4
 800bb2a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bb2e:	f102 0514 	add.w	r5, r2, #20
 800bb32:	429d      	cmp	r5, r3
 800bb34:	d926      	bls.n	800bb84 <_dtoa_r+0x2b4>
 800bb36:	6041      	str	r1, [r0, #4]
 800bb38:	4648      	mov	r0, r9
 800bb3a:	f001 f8e7 	bl	800cd0c <_Balloc>
 800bb3e:	4682      	mov	sl, r0
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d143      	bne.n	800bbcc <_dtoa_r+0x2fc>
 800bb44:	4602      	mov	r2, r0
 800bb46:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb4a:	4b1f      	ldr	r3, [pc, #124]	@ (800bbc8 <_dtoa_r+0x2f8>)
 800bb4c:	e6d4      	b.n	800b8f8 <_dtoa_r+0x28>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	e7e3      	b.n	800bb1a <_dtoa_r+0x24a>
 800bb52:	2300      	movs	r3, #0
 800bb54:	e7d5      	b.n	800bb02 <_dtoa_r+0x232>
 800bb56:	2401      	movs	r4, #1
 800bb58:	2300      	movs	r3, #0
 800bb5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb5c:	9320      	str	r3, [sp, #128]	@ 0x80
 800bb5e:	f04f 3bff 	mov.w	fp, #4294967295
 800bb62:	2200      	movs	r2, #0
 800bb64:	2312      	movs	r3, #18
 800bb66:	f8cd b020 	str.w	fp, [sp, #32]
 800bb6a:	9221      	str	r2, [sp, #132]	@ 0x84
 800bb6c:	e7db      	b.n	800bb26 <_dtoa_r+0x256>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb72:	e7f4      	b.n	800bb5e <_dtoa_r+0x28e>
 800bb74:	f04f 0b01 	mov.w	fp, #1
 800bb78:	465b      	mov	r3, fp
 800bb7a:	f8cd b020 	str.w	fp, [sp, #32]
 800bb7e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800bb82:	e7d0      	b.n	800bb26 <_dtoa_r+0x256>
 800bb84:	3101      	adds	r1, #1
 800bb86:	0052      	lsls	r2, r2, #1
 800bb88:	e7d1      	b.n	800bb2e <_dtoa_r+0x25e>
 800bb8a:	bf00      	nop
 800bb8c:	f3af 8000 	nop.w
 800bb90:	636f4361 	.word	0x636f4361
 800bb94:	3fd287a7 	.word	0x3fd287a7
 800bb98:	8b60c8b3 	.word	0x8b60c8b3
 800bb9c:	3fc68a28 	.word	0x3fc68a28
 800bba0:	509f79fb 	.word	0x509f79fb
 800bba4:	3fd34413 	.word	0x3fd34413
 800bba8:	0800e244 	.word	0x0800e244
 800bbac:	0800e306 	.word	0x0800e306
 800bbb0:	7ff00000 	.word	0x7ff00000
 800bbb4:	0800e302 	.word	0x0800e302
 800bbb8:	0800e221 	.word	0x0800e221
 800bbbc:	0800e220 	.word	0x0800e220
 800bbc0:	3ff80000 	.word	0x3ff80000
 800bbc4:	0800e4c8 	.word	0x0800e4c8
 800bbc8:	0800e35e 	.word	0x0800e35e
 800bbcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bbd0:	6018      	str	r0, [r3, #0]
 800bbd2:	9b08      	ldr	r3, [sp, #32]
 800bbd4:	2b0e      	cmp	r3, #14
 800bbd6:	f200 80a1 	bhi.w	800bd1c <_dtoa_r+0x44c>
 800bbda:	2c00      	cmp	r4, #0
 800bbdc:	f000 809e 	beq.w	800bd1c <_dtoa_r+0x44c>
 800bbe0:	2f00      	cmp	r7, #0
 800bbe2:	dd33      	ble.n	800bc4c <_dtoa_r+0x37c>
 800bbe4:	4b9c      	ldr	r3, [pc, #624]	@ (800be58 <_dtoa_r+0x588>)
 800bbe6:	f007 020f 	and.w	r2, r7, #15
 800bbea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbee:	05f8      	lsls	r0, r7, #23
 800bbf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bbf4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800bbf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bbfc:	d516      	bpl.n	800bc2c <_dtoa_r+0x35c>
 800bbfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc02:	4b96      	ldr	r3, [pc, #600]	@ (800be5c <_dtoa_r+0x58c>)
 800bc04:	2603      	movs	r6, #3
 800bc06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc0a:	f7f4 fd8f 	bl	800072c <__aeabi_ddiv>
 800bc0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc12:	f004 040f 	and.w	r4, r4, #15
 800bc16:	4d91      	ldr	r5, [pc, #580]	@ (800be5c <_dtoa_r+0x58c>)
 800bc18:	b954      	cbnz	r4, 800bc30 <_dtoa_r+0x360>
 800bc1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc22:	f7f4 fd83 	bl	800072c <__aeabi_ddiv>
 800bc26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc2a:	e028      	b.n	800bc7e <_dtoa_r+0x3ae>
 800bc2c:	2602      	movs	r6, #2
 800bc2e:	e7f2      	b.n	800bc16 <_dtoa_r+0x346>
 800bc30:	07e1      	lsls	r1, r4, #31
 800bc32:	d508      	bpl.n	800bc46 <_dtoa_r+0x376>
 800bc34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc3c:	f7f4 fc4c 	bl	80004d8 <__aeabi_dmul>
 800bc40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc44:	3601      	adds	r6, #1
 800bc46:	1064      	asrs	r4, r4, #1
 800bc48:	3508      	adds	r5, #8
 800bc4a:	e7e5      	b.n	800bc18 <_dtoa_r+0x348>
 800bc4c:	f000 80af 	beq.w	800bdae <_dtoa_r+0x4de>
 800bc50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc54:	427c      	negs	r4, r7
 800bc56:	4b80      	ldr	r3, [pc, #512]	@ (800be58 <_dtoa_r+0x588>)
 800bc58:	f004 020f 	and.w	r2, r4, #15
 800bc5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc64:	f7f4 fc38 	bl	80004d8 <__aeabi_dmul>
 800bc68:	2602      	movs	r6, #2
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc70:	4d7a      	ldr	r5, [pc, #488]	@ (800be5c <_dtoa_r+0x58c>)
 800bc72:	1124      	asrs	r4, r4, #4
 800bc74:	2c00      	cmp	r4, #0
 800bc76:	f040 808f 	bne.w	800bd98 <_dtoa_r+0x4c8>
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d1d3      	bne.n	800bc26 <_dtoa_r+0x356>
 800bc7e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800bc82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f000 8094 	beq.w	800bdb2 <_dtoa_r+0x4e2>
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	4629      	mov	r1, r5
 800bc90:	4b73      	ldr	r3, [pc, #460]	@ (800be60 <_dtoa_r+0x590>)
 800bc92:	f7f4 fe93 	bl	80009bc <__aeabi_dcmplt>
 800bc96:	2800      	cmp	r0, #0
 800bc98:	f000 808b 	beq.w	800bdb2 <_dtoa_r+0x4e2>
 800bc9c:	9b08      	ldr	r3, [sp, #32]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f000 8087 	beq.w	800bdb2 <_dtoa_r+0x4e2>
 800bca4:	f1bb 0f00 	cmp.w	fp, #0
 800bca8:	dd34      	ble.n	800bd14 <_dtoa_r+0x444>
 800bcaa:	4620      	mov	r0, r4
 800bcac:	2200      	movs	r2, #0
 800bcae:	4629      	mov	r1, r5
 800bcb0:	4b6c      	ldr	r3, [pc, #432]	@ (800be64 <_dtoa_r+0x594>)
 800bcb2:	f7f4 fc11 	bl	80004d8 <__aeabi_dmul>
 800bcb6:	465c      	mov	r4, fp
 800bcb8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcbc:	f107 38ff 	add.w	r8, r7, #4294967295
 800bcc0:	3601      	adds	r6, #1
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7f4 fb9e 	bl	8000404 <__aeabi_i2d>
 800bcc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bccc:	f7f4 fc04 	bl	80004d8 <__aeabi_dmul>
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4b65      	ldr	r3, [pc, #404]	@ (800be68 <_dtoa_r+0x598>)
 800bcd4:	f7f4 fa4a 	bl	800016c <__adddf3>
 800bcd8:	4605      	mov	r5, r0
 800bcda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bcde:	2c00      	cmp	r4, #0
 800bce0:	d16a      	bne.n	800bdb8 <_dtoa_r+0x4e8>
 800bce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bce6:	2200      	movs	r2, #0
 800bce8:	4b60      	ldr	r3, [pc, #384]	@ (800be6c <_dtoa_r+0x59c>)
 800bcea:	f7f4 fa3d 	bl	8000168 <__aeabi_dsub>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcf6:	462a      	mov	r2, r5
 800bcf8:	4633      	mov	r3, r6
 800bcfa:	f7f4 fe7d 	bl	80009f8 <__aeabi_dcmpgt>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	f040 8298 	bne.w	800c234 <_dtoa_r+0x964>
 800bd04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd08:	462a      	mov	r2, r5
 800bd0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd0e:	f7f4 fe55 	bl	80009bc <__aeabi_dcmplt>
 800bd12:	bb38      	cbnz	r0, 800bd64 <_dtoa_r+0x494>
 800bd14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bd18:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bd1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f2c0 8157 	blt.w	800bfd2 <_dtoa_r+0x702>
 800bd24:	2f0e      	cmp	r7, #14
 800bd26:	f300 8154 	bgt.w	800bfd2 <_dtoa_r+0x702>
 800bd2a:	4b4b      	ldr	r3, [pc, #300]	@ (800be58 <_dtoa_r+0x588>)
 800bd2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd30:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bd38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f280 80e5 	bge.w	800bf0a <_dtoa_r+0x63a>
 800bd40:	9b08      	ldr	r3, [sp, #32]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f300 80e1 	bgt.w	800bf0a <_dtoa_r+0x63a>
 800bd48:	d10c      	bne.n	800bd64 <_dtoa_r+0x494>
 800bd4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	4b46      	ldr	r3, [pc, #280]	@ (800be6c <_dtoa_r+0x59c>)
 800bd52:	f7f4 fbc1 	bl	80004d8 <__aeabi_dmul>
 800bd56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd5a:	f7f4 fe43 	bl	80009e4 <__aeabi_dcmpge>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	f000 8266 	beq.w	800c230 <_dtoa_r+0x960>
 800bd64:	2400      	movs	r4, #0
 800bd66:	4625      	mov	r5, r4
 800bd68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd6a:	4656      	mov	r6, sl
 800bd6c:	ea6f 0803 	mvn.w	r8, r3
 800bd70:	2700      	movs	r7, #0
 800bd72:	4621      	mov	r1, r4
 800bd74:	4648      	mov	r0, r9
 800bd76:	f001 f809 	bl	800cd8c <_Bfree>
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	f000 80bd 	beq.w	800befa <_dtoa_r+0x62a>
 800bd80:	b12f      	cbz	r7, 800bd8e <_dtoa_r+0x4be>
 800bd82:	42af      	cmp	r7, r5
 800bd84:	d003      	beq.n	800bd8e <_dtoa_r+0x4be>
 800bd86:	4639      	mov	r1, r7
 800bd88:	4648      	mov	r0, r9
 800bd8a:	f000 ffff 	bl	800cd8c <_Bfree>
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4648      	mov	r0, r9
 800bd92:	f000 fffb 	bl	800cd8c <_Bfree>
 800bd96:	e0b0      	b.n	800befa <_dtoa_r+0x62a>
 800bd98:	07e2      	lsls	r2, r4, #31
 800bd9a:	d505      	bpl.n	800bda8 <_dtoa_r+0x4d8>
 800bd9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bda0:	f7f4 fb9a 	bl	80004d8 <__aeabi_dmul>
 800bda4:	2301      	movs	r3, #1
 800bda6:	3601      	adds	r6, #1
 800bda8:	1064      	asrs	r4, r4, #1
 800bdaa:	3508      	adds	r5, #8
 800bdac:	e762      	b.n	800bc74 <_dtoa_r+0x3a4>
 800bdae:	2602      	movs	r6, #2
 800bdb0:	e765      	b.n	800bc7e <_dtoa_r+0x3ae>
 800bdb2:	46b8      	mov	r8, r7
 800bdb4:	9c08      	ldr	r4, [sp, #32]
 800bdb6:	e784      	b.n	800bcc2 <_dtoa_r+0x3f2>
 800bdb8:	4b27      	ldr	r3, [pc, #156]	@ (800be58 <_dtoa_r+0x588>)
 800bdba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdc4:	4454      	add	r4, sl
 800bdc6:	2900      	cmp	r1, #0
 800bdc8:	d054      	beq.n	800be74 <_dtoa_r+0x5a4>
 800bdca:	2000      	movs	r0, #0
 800bdcc:	4928      	ldr	r1, [pc, #160]	@ (800be70 <_dtoa_r+0x5a0>)
 800bdce:	f7f4 fcad 	bl	800072c <__aeabi_ddiv>
 800bdd2:	4633      	mov	r3, r6
 800bdd4:	462a      	mov	r2, r5
 800bdd6:	f7f4 f9c7 	bl	8000168 <__aeabi_dsub>
 800bdda:	4656      	mov	r6, sl
 800bddc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bde0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bde4:	f7f4 fe28 	bl	8000a38 <__aeabi_d2iz>
 800bde8:	4605      	mov	r5, r0
 800bdea:	f7f4 fb0b 	bl	8000404 <__aeabi_i2d>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdf6:	f7f4 f9b7 	bl	8000168 <__aeabi_dsub>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	3530      	adds	r5, #48	@ 0x30
 800be00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be08:	f806 5b01 	strb.w	r5, [r6], #1
 800be0c:	f7f4 fdd6 	bl	80009bc <__aeabi_dcmplt>
 800be10:	2800      	cmp	r0, #0
 800be12:	d172      	bne.n	800befa <_dtoa_r+0x62a>
 800be14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be18:	2000      	movs	r0, #0
 800be1a:	4911      	ldr	r1, [pc, #68]	@ (800be60 <_dtoa_r+0x590>)
 800be1c:	f7f4 f9a4 	bl	8000168 <__aeabi_dsub>
 800be20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be24:	f7f4 fdca 	bl	80009bc <__aeabi_dcmplt>
 800be28:	2800      	cmp	r0, #0
 800be2a:	f040 80b4 	bne.w	800bf96 <_dtoa_r+0x6c6>
 800be2e:	42a6      	cmp	r6, r4
 800be30:	f43f af70 	beq.w	800bd14 <_dtoa_r+0x444>
 800be34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be38:	2200      	movs	r2, #0
 800be3a:	4b0a      	ldr	r3, [pc, #40]	@ (800be64 <_dtoa_r+0x594>)
 800be3c:	f7f4 fb4c 	bl	80004d8 <__aeabi_dmul>
 800be40:	2200      	movs	r2, #0
 800be42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be4a:	4b06      	ldr	r3, [pc, #24]	@ (800be64 <_dtoa_r+0x594>)
 800be4c:	f7f4 fb44 	bl	80004d8 <__aeabi_dmul>
 800be50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be54:	e7c4      	b.n	800bde0 <_dtoa_r+0x510>
 800be56:	bf00      	nop
 800be58:	0800e4c8 	.word	0x0800e4c8
 800be5c:	0800e4a0 	.word	0x0800e4a0
 800be60:	3ff00000 	.word	0x3ff00000
 800be64:	40240000 	.word	0x40240000
 800be68:	401c0000 	.word	0x401c0000
 800be6c:	40140000 	.word	0x40140000
 800be70:	3fe00000 	.word	0x3fe00000
 800be74:	4631      	mov	r1, r6
 800be76:	4628      	mov	r0, r5
 800be78:	f7f4 fb2e 	bl	80004d8 <__aeabi_dmul>
 800be7c:	4656      	mov	r6, sl
 800be7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be82:	9413      	str	r4, [sp, #76]	@ 0x4c
 800be84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be88:	f7f4 fdd6 	bl	8000a38 <__aeabi_d2iz>
 800be8c:	4605      	mov	r5, r0
 800be8e:	f7f4 fab9 	bl	8000404 <__aeabi_i2d>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be9a:	f7f4 f965 	bl	8000168 <__aeabi_dsub>
 800be9e:	4602      	mov	r2, r0
 800bea0:	460b      	mov	r3, r1
 800bea2:	3530      	adds	r5, #48	@ 0x30
 800bea4:	f806 5b01 	strb.w	r5, [r6], #1
 800bea8:	42a6      	cmp	r6, r4
 800beaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800beae:	f04f 0200 	mov.w	r2, #0
 800beb2:	d124      	bne.n	800befe <_dtoa_r+0x62e>
 800beb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800beb8:	4bae      	ldr	r3, [pc, #696]	@ (800c174 <_dtoa_r+0x8a4>)
 800beba:	f7f4 f957 	bl	800016c <__adddf3>
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bec6:	f7f4 fd97 	bl	80009f8 <__aeabi_dcmpgt>
 800beca:	2800      	cmp	r0, #0
 800becc:	d163      	bne.n	800bf96 <_dtoa_r+0x6c6>
 800bece:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bed2:	2000      	movs	r0, #0
 800bed4:	49a7      	ldr	r1, [pc, #668]	@ (800c174 <_dtoa_r+0x8a4>)
 800bed6:	f7f4 f947 	bl	8000168 <__aeabi_dsub>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bee2:	f7f4 fd6b 	bl	80009bc <__aeabi_dcmplt>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f43f af14 	beq.w	800bd14 <_dtoa_r+0x444>
 800beec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800beee:	1e73      	subs	r3, r6, #1
 800bef0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bef2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bef6:	2b30      	cmp	r3, #48	@ 0x30
 800bef8:	d0f8      	beq.n	800beec <_dtoa_r+0x61c>
 800befa:	4647      	mov	r7, r8
 800befc:	e03b      	b.n	800bf76 <_dtoa_r+0x6a6>
 800befe:	4b9e      	ldr	r3, [pc, #632]	@ (800c178 <_dtoa_r+0x8a8>)
 800bf00:	f7f4 faea 	bl	80004d8 <__aeabi_dmul>
 800bf04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf08:	e7bc      	b.n	800be84 <_dtoa_r+0x5b4>
 800bf0a:	4656      	mov	r6, sl
 800bf0c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800bf10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	f7f4 fc08 	bl	800072c <__aeabi_ddiv>
 800bf1c:	f7f4 fd8c 	bl	8000a38 <__aeabi_d2iz>
 800bf20:	4680      	mov	r8, r0
 800bf22:	f7f4 fa6f 	bl	8000404 <__aeabi_i2d>
 800bf26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf2a:	f7f4 fad5 	bl	80004d8 <__aeabi_dmul>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	460b      	mov	r3, r1
 800bf32:	4620      	mov	r0, r4
 800bf34:	4629      	mov	r1, r5
 800bf36:	f7f4 f917 	bl	8000168 <__aeabi_dsub>
 800bf3a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf3e:	9d08      	ldr	r5, [sp, #32]
 800bf40:	f806 4b01 	strb.w	r4, [r6], #1
 800bf44:	eba6 040a 	sub.w	r4, r6, sl
 800bf48:	42a5      	cmp	r5, r4
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	d133      	bne.n	800bfb8 <_dtoa_r+0x6e8>
 800bf50:	f7f4 f90c 	bl	800016c <__adddf3>
 800bf54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf58:	4604      	mov	r4, r0
 800bf5a:	460d      	mov	r5, r1
 800bf5c:	f7f4 fd4c 	bl	80009f8 <__aeabi_dcmpgt>
 800bf60:	b9c0      	cbnz	r0, 800bf94 <_dtoa_r+0x6c4>
 800bf62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf66:	4620      	mov	r0, r4
 800bf68:	4629      	mov	r1, r5
 800bf6a:	f7f4 fd1d 	bl	80009a8 <__aeabi_dcmpeq>
 800bf6e:	b110      	cbz	r0, 800bf76 <_dtoa_r+0x6a6>
 800bf70:	f018 0f01 	tst.w	r8, #1
 800bf74:	d10e      	bne.n	800bf94 <_dtoa_r+0x6c4>
 800bf76:	4648      	mov	r0, r9
 800bf78:	9903      	ldr	r1, [sp, #12]
 800bf7a:	f000 ff07 	bl	800cd8c <_Bfree>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	7033      	strb	r3, [r6, #0]
 800bf82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bf84:	3701      	adds	r7, #1
 800bf86:	601f      	str	r7, [r3, #0]
 800bf88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 824b 	beq.w	800c426 <_dtoa_r+0xb56>
 800bf90:	601e      	str	r6, [r3, #0]
 800bf92:	e248      	b.n	800c426 <_dtoa_r+0xb56>
 800bf94:	46b8      	mov	r8, r7
 800bf96:	4633      	mov	r3, r6
 800bf98:	461e      	mov	r6, r3
 800bf9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf9e:	2a39      	cmp	r2, #57	@ 0x39
 800bfa0:	d106      	bne.n	800bfb0 <_dtoa_r+0x6e0>
 800bfa2:	459a      	cmp	sl, r3
 800bfa4:	d1f8      	bne.n	800bf98 <_dtoa_r+0x6c8>
 800bfa6:	2230      	movs	r2, #48	@ 0x30
 800bfa8:	f108 0801 	add.w	r8, r8, #1
 800bfac:	f88a 2000 	strb.w	r2, [sl]
 800bfb0:	781a      	ldrb	r2, [r3, #0]
 800bfb2:	3201      	adds	r2, #1
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	e7a0      	b.n	800befa <_dtoa_r+0x62a>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	4b6f      	ldr	r3, [pc, #444]	@ (800c178 <_dtoa_r+0x8a8>)
 800bfbc:	f7f4 fa8c 	bl	80004d8 <__aeabi_dmul>
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	460d      	mov	r5, r1
 800bfc8:	f7f4 fcee 	bl	80009a8 <__aeabi_dcmpeq>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d09f      	beq.n	800bf10 <_dtoa_r+0x640>
 800bfd0:	e7d1      	b.n	800bf76 <_dtoa_r+0x6a6>
 800bfd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bfd4:	2a00      	cmp	r2, #0
 800bfd6:	f000 80ea 	beq.w	800c1ae <_dtoa_r+0x8de>
 800bfda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bfdc:	2a01      	cmp	r2, #1
 800bfde:	f300 80cd 	bgt.w	800c17c <_dtoa_r+0x8ac>
 800bfe2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bfe4:	2a00      	cmp	r2, #0
 800bfe6:	f000 80c1 	beq.w	800c16c <_dtoa_r+0x89c>
 800bfea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bfee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bff0:	9e04      	ldr	r6, [sp, #16]
 800bff2:	9a04      	ldr	r2, [sp, #16]
 800bff4:	2101      	movs	r1, #1
 800bff6:	441a      	add	r2, r3
 800bff8:	9204      	str	r2, [sp, #16]
 800bffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bffc:	4648      	mov	r0, r9
 800bffe:	441a      	add	r2, r3
 800c000:	9209      	str	r2, [sp, #36]	@ 0x24
 800c002:	f000 ffc1 	bl	800cf88 <__i2b>
 800c006:	4605      	mov	r5, r0
 800c008:	b166      	cbz	r6, 800c024 <_dtoa_r+0x754>
 800c00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	dd09      	ble.n	800c024 <_dtoa_r+0x754>
 800c010:	42b3      	cmp	r3, r6
 800c012:	bfa8      	it	ge
 800c014:	4633      	movge	r3, r6
 800c016:	9a04      	ldr	r2, [sp, #16]
 800c018:	1af6      	subs	r6, r6, r3
 800c01a:	1ad2      	subs	r2, r2, r3
 800c01c:	9204      	str	r2, [sp, #16]
 800c01e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	9309      	str	r3, [sp, #36]	@ 0x24
 800c024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c026:	b30b      	cbz	r3, 800c06c <_dtoa_r+0x79c>
 800c028:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f000 80c6 	beq.w	800c1bc <_dtoa_r+0x8ec>
 800c030:	2c00      	cmp	r4, #0
 800c032:	f000 80c0 	beq.w	800c1b6 <_dtoa_r+0x8e6>
 800c036:	4629      	mov	r1, r5
 800c038:	4622      	mov	r2, r4
 800c03a:	4648      	mov	r0, r9
 800c03c:	f001 f85c 	bl	800d0f8 <__pow5mult>
 800c040:	9a03      	ldr	r2, [sp, #12]
 800c042:	4601      	mov	r1, r0
 800c044:	4605      	mov	r5, r0
 800c046:	4648      	mov	r0, r9
 800c048:	f000 ffb4 	bl	800cfb4 <__multiply>
 800c04c:	9903      	ldr	r1, [sp, #12]
 800c04e:	4680      	mov	r8, r0
 800c050:	4648      	mov	r0, r9
 800c052:	f000 fe9b 	bl	800cd8c <_Bfree>
 800c056:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c058:	1b1b      	subs	r3, r3, r4
 800c05a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c05c:	f000 80b1 	beq.w	800c1c2 <_dtoa_r+0x8f2>
 800c060:	4641      	mov	r1, r8
 800c062:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c064:	4648      	mov	r0, r9
 800c066:	f001 f847 	bl	800d0f8 <__pow5mult>
 800c06a:	9003      	str	r0, [sp, #12]
 800c06c:	2101      	movs	r1, #1
 800c06e:	4648      	mov	r0, r9
 800c070:	f000 ff8a 	bl	800cf88 <__i2b>
 800c074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c076:	4604      	mov	r4, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 81d8 	beq.w	800c42e <_dtoa_r+0xb5e>
 800c07e:	461a      	mov	r2, r3
 800c080:	4601      	mov	r1, r0
 800c082:	4648      	mov	r0, r9
 800c084:	f001 f838 	bl	800d0f8 <__pow5mult>
 800c088:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c08a:	4604      	mov	r4, r0
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	f300 809f 	bgt.w	800c1d0 <_dtoa_r+0x900>
 800c092:	9b06      	ldr	r3, [sp, #24]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f040 8097 	bne.w	800c1c8 <_dtoa_r+0x8f8>
 800c09a:	9b07      	ldr	r3, [sp, #28]
 800c09c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f040 8093 	bne.w	800c1cc <_dtoa_r+0x8fc>
 800c0a6:	9b07      	ldr	r3, [sp, #28]
 800c0a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c0ac:	0d1b      	lsrs	r3, r3, #20
 800c0ae:	051b      	lsls	r3, r3, #20
 800c0b0:	b133      	cbz	r3, 800c0c0 <_dtoa_r+0x7f0>
 800c0b2:	9b04      	ldr	r3, [sp, #16]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	9304      	str	r3, [sp, #16]
 800c0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0be:	2301      	movs	r3, #1
 800c0c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 81b8 	beq.w	800c43a <_dtoa_r+0xb6a>
 800c0ca:	6923      	ldr	r3, [r4, #16]
 800c0cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0d0:	6918      	ldr	r0, [r3, #16]
 800c0d2:	f000 ff0d 	bl	800cef0 <__hi0bits>
 800c0d6:	f1c0 0020 	rsb	r0, r0, #32
 800c0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0dc:	4418      	add	r0, r3
 800c0de:	f010 001f 	ands.w	r0, r0, #31
 800c0e2:	f000 8082 	beq.w	800c1ea <_dtoa_r+0x91a>
 800c0e6:	f1c0 0320 	rsb	r3, r0, #32
 800c0ea:	2b04      	cmp	r3, #4
 800c0ec:	dd73      	ble.n	800c1d6 <_dtoa_r+0x906>
 800c0ee:	9b04      	ldr	r3, [sp, #16]
 800c0f0:	f1c0 001c 	rsb	r0, r0, #28
 800c0f4:	4403      	add	r3, r0
 800c0f6:	9304      	str	r3, [sp, #16]
 800c0f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0fa:	4406      	add	r6, r0
 800c0fc:	4403      	add	r3, r0
 800c0fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c100:	9b04      	ldr	r3, [sp, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	dd05      	ble.n	800c112 <_dtoa_r+0x842>
 800c106:	461a      	mov	r2, r3
 800c108:	4648      	mov	r0, r9
 800c10a:	9903      	ldr	r1, [sp, #12]
 800c10c:	f001 f84e 	bl	800d1ac <__lshift>
 800c110:	9003      	str	r0, [sp, #12]
 800c112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c114:	2b00      	cmp	r3, #0
 800c116:	dd05      	ble.n	800c124 <_dtoa_r+0x854>
 800c118:	4621      	mov	r1, r4
 800c11a:	461a      	mov	r2, r3
 800c11c:	4648      	mov	r0, r9
 800c11e:	f001 f845 	bl	800d1ac <__lshift>
 800c122:	4604      	mov	r4, r0
 800c124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c126:	2b00      	cmp	r3, #0
 800c128:	d061      	beq.n	800c1ee <_dtoa_r+0x91e>
 800c12a:	4621      	mov	r1, r4
 800c12c:	9803      	ldr	r0, [sp, #12]
 800c12e:	f001 f8a9 	bl	800d284 <__mcmp>
 800c132:	2800      	cmp	r0, #0
 800c134:	da5b      	bge.n	800c1ee <_dtoa_r+0x91e>
 800c136:	2300      	movs	r3, #0
 800c138:	220a      	movs	r2, #10
 800c13a:	4648      	mov	r0, r9
 800c13c:	9903      	ldr	r1, [sp, #12]
 800c13e:	f000 fe47 	bl	800cdd0 <__multadd>
 800c142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c144:	f107 38ff 	add.w	r8, r7, #4294967295
 800c148:	9003      	str	r0, [sp, #12]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 8177 	beq.w	800c43e <_dtoa_r+0xb6e>
 800c150:	4629      	mov	r1, r5
 800c152:	2300      	movs	r3, #0
 800c154:	220a      	movs	r2, #10
 800c156:	4648      	mov	r0, r9
 800c158:	f000 fe3a 	bl	800cdd0 <__multadd>
 800c15c:	f1bb 0f00 	cmp.w	fp, #0
 800c160:	4605      	mov	r5, r0
 800c162:	dc6f      	bgt.n	800c244 <_dtoa_r+0x974>
 800c164:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c166:	2b02      	cmp	r3, #2
 800c168:	dc49      	bgt.n	800c1fe <_dtoa_r+0x92e>
 800c16a:	e06b      	b.n	800c244 <_dtoa_r+0x974>
 800c16c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c16e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c172:	e73c      	b.n	800bfee <_dtoa_r+0x71e>
 800c174:	3fe00000 	.word	0x3fe00000
 800c178:	40240000 	.word	0x40240000
 800c17c:	9b08      	ldr	r3, [sp, #32]
 800c17e:	1e5c      	subs	r4, r3, #1
 800c180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c182:	42a3      	cmp	r3, r4
 800c184:	db09      	blt.n	800c19a <_dtoa_r+0x8ca>
 800c186:	1b1c      	subs	r4, r3, r4
 800c188:	9b08      	ldr	r3, [sp, #32]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f6bf af30 	bge.w	800bff0 <_dtoa_r+0x720>
 800c190:	9b04      	ldr	r3, [sp, #16]
 800c192:	9a08      	ldr	r2, [sp, #32]
 800c194:	1a9e      	subs	r6, r3, r2
 800c196:	2300      	movs	r3, #0
 800c198:	e72b      	b.n	800bff2 <_dtoa_r+0x722>
 800c19a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c19c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c19e:	1ae3      	subs	r3, r4, r3
 800c1a0:	441a      	add	r2, r3
 800c1a2:	940a      	str	r4, [sp, #40]	@ 0x28
 800c1a4:	9e04      	ldr	r6, [sp, #16]
 800c1a6:	2400      	movs	r4, #0
 800c1a8:	9b08      	ldr	r3, [sp, #32]
 800c1aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1ac:	e721      	b.n	800bff2 <_dtoa_r+0x722>
 800c1ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c1b0:	9e04      	ldr	r6, [sp, #16]
 800c1b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c1b4:	e728      	b.n	800c008 <_dtoa_r+0x738>
 800c1b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c1ba:	e751      	b.n	800c060 <_dtoa_r+0x790>
 800c1bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1be:	9903      	ldr	r1, [sp, #12]
 800c1c0:	e750      	b.n	800c064 <_dtoa_r+0x794>
 800c1c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1c6:	e751      	b.n	800c06c <_dtoa_r+0x79c>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	e779      	b.n	800c0c0 <_dtoa_r+0x7f0>
 800c1cc:	9b06      	ldr	r3, [sp, #24]
 800c1ce:	e777      	b.n	800c0c0 <_dtoa_r+0x7f0>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1d4:	e779      	b.n	800c0ca <_dtoa_r+0x7fa>
 800c1d6:	d093      	beq.n	800c100 <_dtoa_r+0x830>
 800c1d8:	9a04      	ldr	r2, [sp, #16]
 800c1da:	331c      	adds	r3, #28
 800c1dc:	441a      	add	r2, r3
 800c1de:	9204      	str	r2, [sp, #16]
 800c1e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1e2:	441e      	add	r6, r3
 800c1e4:	441a      	add	r2, r3
 800c1e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1e8:	e78a      	b.n	800c100 <_dtoa_r+0x830>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	e7f4      	b.n	800c1d8 <_dtoa_r+0x908>
 800c1ee:	9b08      	ldr	r3, [sp, #32]
 800c1f0:	46b8      	mov	r8, r7
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	dc20      	bgt.n	800c238 <_dtoa_r+0x968>
 800c1f6:	469b      	mov	fp, r3
 800c1f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	dd1e      	ble.n	800c23c <_dtoa_r+0x96c>
 800c1fe:	f1bb 0f00 	cmp.w	fp, #0
 800c202:	f47f adb1 	bne.w	800bd68 <_dtoa_r+0x498>
 800c206:	4621      	mov	r1, r4
 800c208:	465b      	mov	r3, fp
 800c20a:	2205      	movs	r2, #5
 800c20c:	4648      	mov	r0, r9
 800c20e:	f000 fddf 	bl	800cdd0 <__multadd>
 800c212:	4601      	mov	r1, r0
 800c214:	4604      	mov	r4, r0
 800c216:	9803      	ldr	r0, [sp, #12]
 800c218:	f001 f834 	bl	800d284 <__mcmp>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	f77f ada3 	ble.w	800bd68 <_dtoa_r+0x498>
 800c222:	4656      	mov	r6, sl
 800c224:	2331      	movs	r3, #49	@ 0x31
 800c226:	f108 0801 	add.w	r8, r8, #1
 800c22a:	f806 3b01 	strb.w	r3, [r6], #1
 800c22e:	e59f      	b.n	800bd70 <_dtoa_r+0x4a0>
 800c230:	46b8      	mov	r8, r7
 800c232:	9c08      	ldr	r4, [sp, #32]
 800c234:	4625      	mov	r5, r4
 800c236:	e7f4      	b.n	800c222 <_dtoa_r+0x952>
 800c238:	f8dd b020 	ldr.w	fp, [sp, #32]
 800c23c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 8101 	beq.w	800c446 <_dtoa_r+0xb76>
 800c244:	2e00      	cmp	r6, #0
 800c246:	dd05      	ble.n	800c254 <_dtoa_r+0x984>
 800c248:	4629      	mov	r1, r5
 800c24a:	4632      	mov	r2, r6
 800c24c:	4648      	mov	r0, r9
 800c24e:	f000 ffad 	bl	800d1ac <__lshift>
 800c252:	4605      	mov	r5, r0
 800c254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c256:	2b00      	cmp	r3, #0
 800c258:	d05c      	beq.n	800c314 <_dtoa_r+0xa44>
 800c25a:	4648      	mov	r0, r9
 800c25c:	6869      	ldr	r1, [r5, #4]
 800c25e:	f000 fd55 	bl	800cd0c <_Balloc>
 800c262:	4606      	mov	r6, r0
 800c264:	b928      	cbnz	r0, 800c272 <_dtoa_r+0x9a2>
 800c266:	4602      	mov	r2, r0
 800c268:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c26c:	4b80      	ldr	r3, [pc, #512]	@ (800c470 <_dtoa_r+0xba0>)
 800c26e:	f7ff bb43 	b.w	800b8f8 <_dtoa_r+0x28>
 800c272:	692a      	ldr	r2, [r5, #16]
 800c274:	f105 010c 	add.w	r1, r5, #12
 800c278:	3202      	adds	r2, #2
 800c27a:	0092      	lsls	r2, r2, #2
 800c27c:	300c      	adds	r0, #12
 800c27e:	f7ff fa68 	bl	800b752 <memcpy>
 800c282:	2201      	movs	r2, #1
 800c284:	4631      	mov	r1, r6
 800c286:	4648      	mov	r0, r9
 800c288:	f000 ff90 	bl	800d1ac <__lshift>
 800c28c:	462f      	mov	r7, r5
 800c28e:	4605      	mov	r5, r0
 800c290:	f10a 0301 	add.w	r3, sl, #1
 800c294:	9304      	str	r3, [sp, #16]
 800c296:	eb0a 030b 	add.w	r3, sl, fp
 800c29a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c29c:	9b06      	ldr	r3, [sp, #24]
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2a4:	9b04      	ldr	r3, [sp, #16]
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	9803      	ldr	r0, [sp, #12]
 800c2aa:	f103 3bff 	add.w	fp, r3, #4294967295
 800c2ae:	f7ff fa87 	bl	800b7c0 <quorem>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	3330      	adds	r3, #48	@ 0x30
 800c2b8:	9006      	str	r0, [sp, #24]
 800c2ba:	9803      	ldr	r0, [sp, #12]
 800c2bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2be:	f000 ffe1 	bl	800d284 <__mcmp>
 800c2c2:	462a      	mov	r2, r5
 800c2c4:	9008      	str	r0, [sp, #32]
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4648      	mov	r0, r9
 800c2ca:	f000 fff7 	bl	800d2bc <__mdiff>
 800c2ce:	68c2      	ldr	r2, [r0, #12]
 800c2d0:	4606      	mov	r6, r0
 800c2d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2d4:	bb02      	cbnz	r2, 800c318 <_dtoa_r+0xa48>
 800c2d6:	4601      	mov	r1, r0
 800c2d8:	9803      	ldr	r0, [sp, #12]
 800c2da:	f000 ffd3 	bl	800d284 <__mcmp>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	4648      	mov	r0, r9
 800c2e6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800c2ea:	f000 fd4f 	bl	800cd8c <_Bfree>
 800c2ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c2f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c2f2:	9e04      	ldr	r6, [sp, #16]
 800c2f4:	ea42 0103 	orr.w	r1, r2, r3
 800c2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2fa:	4319      	orrs	r1, r3
 800c2fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2fe:	d10d      	bne.n	800c31c <_dtoa_r+0xa4c>
 800c300:	2b39      	cmp	r3, #57	@ 0x39
 800c302:	d027      	beq.n	800c354 <_dtoa_r+0xa84>
 800c304:	9a08      	ldr	r2, [sp, #32]
 800c306:	2a00      	cmp	r2, #0
 800c308:	dd01      	ble.n	800c30e <_dtoa_r+0xa3e>
 800c30a:	9b06      	ldr	r3, [sp, #24]
 800c30c:	3331      	adds	r3, #49	@ 0x31
 800c30e:	f88b 3000 	strb.w	r3, [fp]
 800c312:	e52e      	b.n	800bd72 <_dtoa_r+0x4a2>
 800c314:	4628      	mov	r0, r5
 800c316:	e7b9      	b.n	800c28c <_dtoa_r+0x9bc>
 800c318:	2201      	movs	r2, #1
 800c31a:	e7e2      	b.n	800c2e2 <_dtoa_r+0xa12>
 800c31c:	9908      	ldr	r1, [sp, #32]
 800c31e:	2900      	cmp	r1, #0
 800c320:	db04      	blt.n	800c32c <_dtoa_r+0xa5c>
 800c322:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c324:	4301      	orrs	r1, r0
 800c326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c328:	4301      	orrs	r1, r0
 800c32a:	d120      	bne.n	800c36e <_dtoa_r+0xa9e>
 800c32c:	2a00      	cmp	r2, #0
 800c32e:	ddee      	ble.n	800c30e <_dtoa_r+0xa3e>
 800c330:	2201      	movs	r2, #1
 800c332:	9903      	ldr	r1, [sp, #12]
 800c334:	4648      	mov	r0, r9
 800c336:	9304      	str	r3, [sp, #16]
 800c338:	f000 ff38 	bl	800d1ac <__lshift>
 800c33c:	4621      	mov	r1, r4
 800c33e:	9003      	str	r0, [sp, #12]
 800c340:	f000 ffa0 	bl	800d284 <__mcmp>
 800c344:	2800      	cmp	r0, #0
 800c346:	9b04      	ldr	r3, [sp, #16]
 800c348:	dc02      	bgt.n	800c350 <_dtoa_r+0xa80>
 800c34a:	d1e0      	bne.n	800c30e <_dtoa_r+0xa3e>
 800c34c:	07da      	lsls	r2, r3, #31
 800c34e:	d5de      	bpl.n	800c30e <_dtoa_r+0xa3e>
 800c350:	2b39      	cmp	r3, #57	@ 0x39
 800c352:	d1da      	bne.n	800c30a <_dtoa_r+0xa3a>
 800c354:	2339      	movs	r3, #57	@ 0x39
 800c356:	f88b 3000 	strb.w	r3, [fp]
 800c35a:	4633      	mov	r3, r6
 800c35c:	461e      	mov	r6, r3
 800c35e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c362:	3b01      	subs	r3, #1
 800c364:	2a39      	cmp	r2, #57	@ 0x39
 800c366:	d04e      	beq.n	800c406 <_dtoa_r+0xb36>
 800c368:	3201      	adds	r2, #1
 800c36a:	701a      	strb	r2, [r3, #0]
 800c36c:	e501      	b.n	800bd72 <_dtoa_r+0x4a2>
 800c36e:	2a00      	cmp	r2, #0
 800c370:	dd03      	ble.n	800c37a <_dtoa_r+0xaaa>
 800c372:	2b39      	cmp	r3, #57	@ 0x39
 800c374:	d0ee      	beq.n	800c354 <_dtoa_r+0xa84>
 800c376:	3301      	adds	r3, #1
 800c378:	e7c9      	b.n	800c30e <_dtoa_r+0xa3e>
 800c37a:	9a04      	ldr	r2, [sp, #16]
 800c37c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c37e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c382:	428a      	cmp	r2, r1
 800c384:	d028      	beq.n	800c3d8 <_dtoa_r+0xb08>
 800c386:	2300      	movs	r3, #0
 800c388:	220a      	movs	r2, #10
 800c38a:	9903      	ldr	r1, [sp, #12]
 800c38c:	4648      	mov	r0, r9
 800c38e:	f000 fd1f 	bl	800cdd0 <__multadd>
 800c392:	42af      	cmp	r7, r5
 800c394:	9003      	str	r0, [sp, #12]
 800c396:	f04f 0300 	mov.w	r3, #0
 800c39a:	f04f 020a 	mov.w	r2, #10
 800c39e:	4639      	mov	r1, r7
 800c3a0:	4648      	mov	r0, r9
 800c3a2:	d107      	bne.n	800c3b4 <_dtoa_r+0xae4>
 800c3a4:	f000 fd14 	bl	800cdd0 <__multadd>
 800c3a8:	4607      	mov	r7, r0
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	9b04      	ldr	r3, [sp, #16]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	e777      	b.n	800c2a4 <_dtoa_r+0x9d4>
 800c3b4:	f000 fd0c 	bl	800cdd0 <__multadd>
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	4607      	mov	r7, r0
 800c3bc:	2300      	movs	r3, #0
 800c3be:	220a      	movs	r2, #10
 800c3c0:	4648      	mov	r0, r9
 800c3c2:	f000 fd05 	bl	800cdd0 <__multadd>
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	e7f0      	b.n	800c3ac <_dtoa_r+0xadc>
 800c3ca:	f1bb 0f00 	cmp.w	fp, #0
 800c3ce:	bfcc      	ite	gt
 800c3d0:	465e      	movgt	r6, fp
 800c3d2:	2601      	movle	r6, #1
 800c3d4:	2700      	movs	r7, #0
 800c3d6:	4456      	add	r6, sl
 800c3d8:	2201      	movs	r2, #1
 800c3da:	9903      	ldr	r1, [sp, #12]
 800c3dc:	4648      	mov	r0, r9
 800c3de:	9304      	str	r3, [sp, #16]
 800c3e0:	f000 fee4 	bl	800d1ac <__lshift>
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	9003      	str	r0, [sp, #12]
 800c3e8:	f000 ff4c 	bl	800d284 <__mcmp>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	dcb4      	bgt.n	800c35a <_dtoa_r+0xa8a>
 800c3f0:	d102      	bne.n	800c3f8 <_dtoa_r+0xb28>
 800c3f2:	9b04      	ldr	r3, [sp, #16]
 800c3f4:	07db      	lsls	r3, r3, #31
 800c3f6:	d4b0      	bmi.n	800c35a <_dtoa_r+0xa8a>
 800c3f8:	4633      	mov	r3, r6
 800c3fa:	461e      	mov	r6, r3
 800c3fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c400:	2a30      	cmp	r2, #48	@ 0x30
 800c402:	d0fa      	beq.n	800c3fa <_dtoa_r+0xb2a>
 800c404:	e4b5      	b.n	800bd72 <_dtoa_r+0x4a2>
 800c406:	459a      	cmp	sl, r3
 800c408:	d1a8      	bne.n	800c35c <_dtoa_r+0xa8c>
 800c40a:	2331      	movs	r3, #49	@ 0x31
 800c40c:	f108 0801 	add.w	r8, r8, #1
 800c410:	f88a 3000 	strb.w	r3, [sl]
 800c414:	e4ad      	b.n	800bd72 <_dtoa_r+0x4a2>
 800c416:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c418:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c474 <_dtoa_r+0xba4>
 800c41c:	b11b      	cbz	r3, 800c426 <_dtoa_r+0xb56>
 800c41e:	f10a 0308 	add.w	r3, sl, #8
 800c422:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c424:	6013      	str	r3, [r2, #0]
 800c426:	4650      	mov	r0, sl
 800c428:	b017      	add	sp, #92	@ 0x5c
 800c42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c430:	2b01      	cmp	r3, #1
 800c432:	f77f ae2e 	ble.w	800c092 <_dtoa_r+0x7c2>
 800c436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c438:	930a      	str	r3, [sp, #40]	@ 0x28
 800c43a:	2001      	movs	r0, #1
 800c43c:	e64d      	b.n	800c0da <_dtoa_r+0x80a>
 800c43e:	f1bb 0f00 	cmp.w	fp, #0
 800c442:	f77f aed9 	ble.w	800c1f8 <_dtoa_r+0x928>
 800c446:	4656      	mov	r6, sl
 800c448:	4621      	mov	r1, r4
 800c44a:	9803      	ldr	r0, [sp, #12]
 800c44c:	f7ff f9b8 	bl	800b7c0 <quorem>
 800c450:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c454:	f806 3b01 	strb.w	r3, [r6], #1
 800c458:	eba6 020a 	sub.w	r2, r6, sl
 800c45c:	4593      	cmp	fp, r2
 800c45e:	ddb4      	ble.n	800c3ca <_dtoa_r+0xafa>
 800c460:	2300      	movs	r3, #0
 800c462:	220a      	movs	r2, #10
 800c464:	4648      	mov	r0, r9
 800c466:	9903      	ldr	r1, [sp, #12]
 800c468:	f000 fcb2 	bl	800cdd0 <__multadd>
 800c46c:	9003      	str	r0, [sp, #12]
 800c46e:	e7eb      	b.n	800c448 <_dtoa_r+0xb78>
 800c470:	0800e35e 	.word	0x0800e35e
 800c474:	0800e2f9 	.word	0x0800e2f9

0800c478 <_free_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4605      	mov	r5, r0
 800c47c:	2900      	cmp	r1, #0
 800c47e:	d040      	beq.n	800c502 <_free_r+0x8a>
 800c480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c484:	1f0c      	subs	r4, r1, #4
 800c486:	2b00      	cmp	r3, #0
 800c488:	bfb8      	it	lt
 800c48a:	18e4      	addlt	r4, r4, r3
 800c48c:	f000 fc32 	bl	800ccf4 <__malloc_lock>
 800c490:	4a1c      	ldr	r2, [pc, #112]	@ (800c504 <_free_r+0x8c>)
 800c492:	6813      	ldr	r3, [r2, #0]
 800c494:	b933      	cbnz	r3, 800c4a4 <_free_r+0x2c>
 800c496:	6063      	str	r3, [r4, #4]
 800c498:	6014      	str	r4, [r2, #0]
 800c49a:	4628      	mov	r0, r5
 800c49c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4a0:	f000 bc2e 	b.w	800cd00 <__malloc_unlock>
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	d908      	bls.n	800c4ba <_free_r+0x42>
 800c4a8:	6820      	ldr	r0, [r4, #0]
 800c4aa:	1821      	adds	r1, r4, r0
 800c4ac:	428b      	cmp	r3, r1
 800c4ae:	bf01      	itttt	eq
 800c4b0:	6819      	ldreq	r1, [r3, #0]
 800c4b2:	685b      	ldreq	r3, [r3, #4]
 800c4b4:	1809      	addeq	r1, r1, r0
 800c4b6:	6021      	streq	r1, [r4, #0]
 800c4b8:	e7ed      	b.n	800c496 <_free_r+0x1e>
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	b10b      	cbz	r3, 800c4c4 <_free_r+0x4c>
 800c4c0:	42a3      	cmp	r3, r4
 800c4c2:	d9fa      	bls.n	800c4ba <_free_r+0x42>
 800c4c4:	6811      	ldr	r1, [r2, #0]
 800c4c6:	1850      	adds	r0, r2, r1
 800c4c8:	42a0      	cmp	r0, r4
 800c4ca:	d10b      	bne.n	800c4e4 <_free_r+0x6c>
 800c4cc:	6820      	ldr	r0, [r4, #0]
 800c4ce:	4401      	add	r1, r0
 800c4d0:	1850      	adds	r0, r2, r1
 800c4d2:	4283      	cmp	r3, r0
 800c4d4:	6011      	str	r1, [r2, #0]
 800c4d6:	d1e0      	bne.n	800c49a <_free_r+0x22>
 800c4d8:	6818      	ldr	r0, [r3, #0]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	4408      	add	r0, r1
 800c4de:	6010      	str	r0, [r2, #0]
 800c4e0:	6053      	str	r3, [r2, #4]
 800c4e2:	e7da      	b.n	800c49a <_free_r+0x22>
 800c4e4:	d902      	bls.n	800c4ec <_free_r+0x74>
 800c4e6:	230c      	movs	r3, #12
 800c4e8:	602b      	str	r3, [r5, #0]
 800c4ea:	e7d6      	b.n	800c49a <_free_r+0x22>
 800c4ec:	6820      	ldr	r0, [r4, #0]
 800c4ee:	1821      	adds	r1, r4, r0
 800c4f0:	428b      	cmp	r3, r1
 800c4f2:	bf01      	itttt	eq
 800c4f4:	6819      	ldreq	r1, [r3, #0]
 800c4f6:	685b      	ldreq	r3, [r3, #4]
 800c4f8:	1809      	addeq	r1, r1, r0
 800c4fa:	6021      	streq	r1, [r4, #0]
 800c4fc:	6063      	str	r3, [r4, #4]
 800c4fe:	6054      	str	r4, [r2, #4]
 800c500:	e7cb      	b.n	800c49a <_free_r+0x22>
 800c502:	bd38      	pop	{r3, r4, r5, pc}
 800c504:	200018a0 	.word	0x200018a0

0800c508 <rshift>:
 800c508:	6903      	ldr	r3, [r0, #16]
 800c50a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c50e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c512:	f100 0414 	add.w	r4, r0, #20
 800c516:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c51a:	dd46      	ble.n	800c5aa <rshift+0xa2>
 800c51c:	f011 011f 	ands.w	r1, r1, #31
 800c520:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c524:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c528:	d10c      	bne.n	800c544 <rshift+0x3c>
 800c52a:	4629      	mov	r1, r5
 800c52c:	f100 0710 	add.w	r7, r0, #16
 800c530:	42b1      	cmp	r1, r6
 800c532:	d335      	bcc.n	800c5a0 <rshift+0x98>
 800c534:	1a9b      	subs	r3, r3, r2
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	1eea      	subs	r2, r5, #3
 800c53a:	4296      	cmp	r6, r2
 800c53c:	bf38      	it	cc
 800c53e:	2300      	movcc	r3, #0
 800c540:	4423      	add	r3, r4
 800c542:	e015      	b.n	800c570 <rshift+0x68>
 800c544:	46a1      	mov	r9, r4
 800c546:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c54a:	f1c1 0820 	rsb	r8, r1, #32
 800c54e:	40cf      	lsrs	r7, r1
 800c550:	f105 0e04 	add.w	lr, r5, #4
 800c554:	4576      	cmp	r6, lr
 800c556:	46f4      	mov	ip, lr
 800c558:	d816      	bhi.n	800c588 <rshift+0x80>
 800c55a:	1a9a      	subs	r2, r3, r2
 800c55c:	0092      	lsls	r2, r2, #2
 800c55e:	3a04      	subs	r2, #4
 800c560:	3501      	adds	r5, #1
 800c562:	42ae      	cmp	r6, r5
 800c564:	bf38      	it	cc
 800c566:	2200      	movcc	r2, #0
 800c568:	18a3      	adds	r3, r4, r2
 800c56a:	50a7      	str	r7, [r4, r2]
 800c56c:	b107      	cbz	r7, 800c570 <rshift+0x68>
 800c56e:	3304      	adds	r3, #4
 800c570:	42a3      	cmp	r3, r4
 800c572:	eba3 0204 	sub.w	r2, r3, r4
 800c576:	bf08      	it	eq
 800c578:	2300      	moveq	r3, #0
 800c57a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c57e:	6102      	str	r2, [r0, #16]
 800c580:	bf08      	it	eq
 800c582:	6143      	streq	r3, [r0, #20]
 800c584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c588:	f8dc c000 	ldr.w	ip, [ip]
 800c58c:	fa0c fc08 	lsl.w	ip, ip, r8
 800c590:	ea4c 0707 	orr.w	r7, ip, r7
 800c594:	f849 7b04 	str.w	r7, [r9], #4
 800c598:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c59c:	40cf      	lsrs	r7, r1
 800c59e:	e7d9      	b.n	800c554 <rshift+0x4c>
 800c5a0:	f851 cb04 	ldr.w	ip, [r1], #4
 800c5a4:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5a8:	e7c2      	b.n	800c530 <rshift+0x28>
 800c5aa:	4623      	mov	r3, r4
 800c5ac:	e7e0      	b.n	800c570 <rshift+0x68>

0800c5ae <__hexdig_fun>:
 800c5ae:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c5b2:	2b09      	cmp	r3, #9
 800c5b4:	d802      	bhi.n	800c5bc <__hexdig_fun+0xe>
 800c5b6:	3820      	subs	r0, #32
 800c5b8:	b2c0      	uxtb	r0, r0
 800c5ba:	4770      	bx	lr
 800c5bc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c5c0:	2b05      	cmp	r3, #5
 800c5c2:	d801      	bhi.n	800c5c8 <__hexdig_fun+0x1a>
 800c5c4:	3847      	subs	r0, #71	@ 0x47
 800c5c6:	e7f7      	b.n	800c5b8 <__hexdig_fun+0xa>
 800c5c8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c5cc:	2b05      	cmp	r3, #5
 800c5ce:	d801      	bhi.n	800c5d4 <__hexdig_fun+0x26>
 800c5d0:	3827      	subs	r0, #39	@ 0x27
 800c5d2:	e7f1      	b.n	800c5b8 <__hexdig_fun+0xa>
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	4770      	bx	lr

0800c5d8 <__gethex>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	468a      	mov	sl, r1
 800c5de:	4690      	mov	r8, r2
 800c5e0:	b085      	sub	sp, #20
 800c5e2:	9302      	str	r3, [sp, #8]
 800c5e4:	680b      	ldr	r3, [r1, #0]
 800c5e6:	9001      	str	r0, [sp, #4]
 800c5e8:	1c9c      	adds	r4, r3, #2
 800c5ea:	46a1      	mov	r9, r4
 800c5ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c5f0:	2830      	cmp	r0, #48	@ 0x30
 800c5f2:	d0fa      	beq.n	800c5ea <__gethex+0x12>
 800c5f4:	eba9 0303 	sub.w	r3, r9, r3
 800c5f8:	f1a3 0b02 	sub.w	fp, r3, #2
 800c5fc:	f7ff ffd7 	bl	800c5ae <__hexdig_fun>
 800c600:	4605      	mov	r5, r0
 800c602:	2800      	cmp	r0, #0
 800c604:	d168      	bne.n	800c6d8 <__gethex+0x100>
 800c606:	2201      	movs	r2, #1
 800c608:	4648      	mov	r0, r9
 800c60a:	499f      	ldr	r1, [pc, #636]	@ (800c888 <__gethex+0x2b0>)
 800c60c:	f7fe ffad 	bl	800b56a <strncmp>
 800c610:	4607      	mov	r7, r0
 800c612:	2800      	cmp	r0, #0
 800c614:	d167      	bne.n	800c6e6 <__gethex+0x10e>
 800c616:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c61a:	4626      	mov	r6, r4
 800c61c:	f7ff ffc7 	bl	800c5ae <__hexdig_fun>
 800c620:	2800      	cmp	r0, #0
 800c622:	d062      	beq.n	800c6ea <__gethex+0x112>
 800c624:	4623      	mov	r3, r4
 800c626:	7818      	ldrb	r0, [r3, #0]
 800c628:	4699      	mov	r9, r3
 800c62a:	2830      	cmp	r0, #48	@ 0x30
 800c62c:	f103 0301 	add.w	r3, r3, #1
 800c630:	d0f9      	beq.n	800c626 <__gethex+0x4e>
 800c632:	f7ff ffbc 	bl	800c5ae <__hexdig_fun>
 800c636:	fab0 f580 	clz	r5, r0
 800c63a:	f04f 0b01 	mov.w	fp, #1
 800c63e:	096d      	lsrs	r5, r5, #5
 800c640:	464a      	mov	r2, r9
 800c642:	4616      	mov	r6, r2
 800c644:	7830      	ldrb	r0, [r6, #0]
 800c646:	3201      	adds	r2, #1
 800c648:	f7ff ffb1 	bl	800c5ae <__hexdig_fun>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d1f8      	bne.n	800c642 <__gethex+0x6a>
 800c650:	2201      	movs	r2, #1
 800c652:	4630      	mov	r0, r6
 800c654:	498c      	ldr	r1, [pc, #560]	@ (800c888 <__gethex+0x2b0>)
 800c656:	f7fe ff88 	bl	800b56a <strncmp>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d13f      	bne.n	800c6de <__gethex+0x106>
 800c65e:	b944      	cbnz	r4, 800c672 <__gethex+0x9a>
 800c660:	1c74      	adds	r4, r6, #1
 800c662:	4622      	mov	r2, r4
 800c664:	4616      	mov	r6, r2
 800c666:	7830      	ldrb	r0, [r6, #0]
 800c668:	3201      	adds	r2, #1
 800c66a:	f7ff ffa0 	bl	800c5ae <__hexdig_fun>
 800c66e:	2800      	cmp	r0, #0
 800c670:	d1f8      	bne.n	800c664 <__gethex+0x8c>
 800c672:	1ba4      	subs	r4, r4, r6
 800c674:	00a7      	lsls	r7, r4, #2
 800c676:	7833      	ldrb	r3, [r6, #0]
 800c678:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c67c:	2b50      	cmp	r3, #80	@ 0x50
 800c67e:	d13e      	bne.n	800c6fe <__gethex+0x126>
 800c680:	7873      	ldrb	r3, [r6, #1]
 800c682:	2b2b      	cmp	r3, #43	@ 0x2b
 800c684:	d033      	beq.n	800c6ee <__gethex+0x116>
 800c686:	2b2d      	cmp	r3, #45	@ 0x2d
 800c688:	d034      	beq.n	800c6f4 <__gethex+0x11c>
 800c68a:	2400      	movs	r4, #0
 800c68c:	1c71      	adds	r1, r6, #1
 800c68e:	7808      	ldrb	r0, [r1, #0]
 800c690:	f7ff ff8d 	bl	800c5ae <__hexdig_fun>
 800c694:	1e43      	subs	r3, r0, #1
 800c696:	b2db      	uxtb	r3, r3
 800c698:	2b18      	cmp	r3, #24
 800c69a:	d830      	bhi.n	800c6fe <__gethex+0x126>
 800c69c:	f1a0 0210 	sub.w	r2, r0, #16
 800c6a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6a4:	f7ff ff83 	bl	800c5ae <__hexdig_fun>
 800c6a8:	f100 3cff 	add.w	ip, r0, #4294967295
 800c6ac:	fa5f fc8c 	uxtb.w	ip, ip
 800c6b0:	f1bc 0f18 	cmp.w	ip, #24
 800c6b4:	f04f 030a 	mov.w	r3, #10
 800c6b8:	d91e      	bls.n	800c6f8 <__gethex+0x120>
 800c6ba:	b104      	cbz	r4, 800c6be <__gethex+0xe6>
 800c6bc:	4252      	negs	r2, r2
 800c6be:	4417      	add	r7, r2
 800c6c0:	f8ca 1000 	str.w	r1, [sl]
 800c6c4:	b1ed      	cbz	r5, 800c702 <__gethex+0x12a>
 800c6c6:	f1bb 0f00 	cmp.w	fp, #0
 800c6ca:	bf0c      	ite	eq
 800c6cc:	2506      	moveq	r5, #6
 800c6ce:	2500      	movne	r5, #0
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	b005      	add	sp, #20
 800c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d8:	2500      	movs	r5, #0
 800c6da:	462c      	mov	r4, r5
 800c6dc:	e7b0      	b.n	800c640 <__gethex+0x68>
 800c6de:	2c00      	cmp	r4, #0
 800c6e0:	d1c7      	bne.n	800c672 <__gethex+0x9a>
 800c6e2:	4627      	mov	r7, r4
 800c6e4:	e7c7      	b.n	800c676 <__gethex+0x9e>
 800c6e6:	464e      	mov	r6, r9
 800c6e8:	462f      	mov	r7, r5
 800c6ea:	2501      	movs	r5, #1
 800c6ec:	e7c3      	b.n	800c676 <__gethex+0x9e>
 800c6ee:	2400      	movs	r4, #0
 800c6f0:	1cb1      	adds	r1, r6, #2
 800c6f2:	e7cc      	b.n	800c68e <__gethex+0xb6>
 800c6f4:	2401      	movs	r4, #1
 800c6f6:	e7fb      	b.n	800c6f0 <__gethex+0x118>
 800c6f8:	fb03 0002 	mla	r0, r3, r2, r0
 800c6fc:	e7ce      	b.n	800c69c <__gethex+0xc4>
 800c6fe:	4631      	mov	r1, r6
 800c700:	e7de      	b.n	800c6c0 <__gethex+0xe8>
 800c702:	4629      	mov	r1, r5
 800c704:	eba6 0309 	sub.w	r3, r6, r9
 800c708:	3b01      	subs	r3, #1
 800c70a:	2b07      	cmp	r3, #7
 800c70c:	dc0a      	bgt.n	800c724 <__gethex+0x14c>
 800c70e:	9801      	ldr	r0, [sp, #4]
 800c710:	f000 fafc 	bl	800cd0c <_Balloc>
 800c714:	4604      	mov	r4, r0
 800c716:	b940      	cbnz	r0, 800c72a <__gethex+0x152>
 800c718:	4602      	mov	r2, r0
 800c71a:	21e4      	movs	r1, #228	@ 0xe4
 800c71c:	4b5b      	ldr	r3, [pc, #364]	@ (800c88c <__gethex+0x2b4>)
 800c71e:	485c      	ldr	r0, [pc, #368]	@ (800c890 <__gethex+0x2b8>)
 800c720:	f7ff f830 	bl	800b784 <__assert_func>
 800c724:	3101      	adds	r1, #1
 800c726:	105b      	asrs	r3, r3, #1
 800c728:	e7ef      	b.n	800c70a <__gethex+0x132>
 800c72a:	2300      	movs	r3, #0
 800c72c:	f100 0a14 	add.w	sl, r0, #20
 800c730:	4655      	mov	r5, sl
 800c732:	469b      	mov	fp, r3
 800c734:	45b1      	cmp	r9, r6
 800c736:	d337      	bcc.n	800c7a8 <__gethex+0x1d0>
 800c738:	f845 bb04 	str.w	fp, [r5], #4
 800c73c:	eba5 050a 	sub.w	r5, r5, sl
 800c740:	10ad      	asrs	r5, r5, #2
 800c742:	6125      	str	r5, [r4, #16]
 800c744:	4658      	mov	r0, fp
 800c746:	f000 fbd3 	bl	800cef0 <__hi0bits>
 800c74a:	016d      	lsls	r5, r5, #5
 800c74c:	f8d8 6000 	ldr.w	r6, [r8]
 800c750:	1a2d      	subs	r5, r5, r0
 800c752:	42b5      	cmp	r5, r6
 800c754:	dd54      	ble.n	800c800 <__gethex+0x228>
 800c756:	1bad      	subs	r5, r5, r6
 800c758:	4629      	mov	r1, r5
 800c75a:	4620      	mov	r0, r4
 800c75c:	f000 ff55 	bl	800d60a <__any_on>
 800c760:	4681      	mov	r9, r0
 800c762:	b178      	cbz	r0, 800c784 <__gethex+0x1ac>
 800c764:	f04f 0901 	mov.w	r9, #1
 800c768:	1e6b      	subs	r3, r5, #1
 800c76a:	1159      	asrs	r1, r3, #5
 800c76c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c770:	f003 021f 	and.w	r2, r3, #31
 800c774:	fa09 f202 	lsl.w	r2, r9, r2
 800c778:	420a      	tst	r2, r1
 800c77a:	d003      	beq.n	800c784 <__gethex+0x1ac>
 800c77c:	454b      	cmp	r3, r9
 800c77e:	dc36      	bgt.n	800c7ee <__gethex+0x216>
 800c780:	f04f 0902 	mov.w	r9, #2
 800c784:	4629      	mov	r1, r5
 800c786:	4620      	mov	r0, r4
 800c788:	f7ff febe 	bl	800c508 <rshift>
 800c78c:	442f      	add	r7, r5
 800c78e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c792:	42bb      	cmp	r3, r7
 800c794:	da42      	bge.n	800c81c <__gethex+0x244>
 800c796:	4621      	mov	r1, r4
 800c798:	9801      	ldr	r0, [sp, #4]
 800c79a:	f000 faf7 	bl	800cd8c <_Bfree>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7a2:	25a3      	movs	r5, #163	@ 0xa3
 800c7a4:	6013      	str	r3, [r2, #0]
 800c7a6:	e793      	b.n	800c6d0 <__gethex+0xf8>
 800c7a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c7ac:	2a2e      	cmp	r2, #46	@ 0x2e
 800c7ae:	d012      	beq.n	800c7d6 <__gethex+0x1fe>
 800c7b0:	2b20      	cmp	r3, #32
 800c7b2:	d104      	bne.n	800c7be <__gethex+0x1e6>
 800c7b4:	f845 bb04 	str.w	fp, [r5], #4
 800c7b8:	f04f 0b00 	mov.w	fp, #0
 800c7bc:	465b      	mov	r3, fp
 800c7be:	7830      	ldrb	r0, [r6, #0]
 800c7c0:	9303      	str	r3, [sp, #12]
 800c7c2:	f7ff fef4 	bl	800c5ae <__hexdig_fun>
 800c7c6:	9b03      	ldr	r3, [sp, #12]
 800c7c8:	f000 000f 	and.w	r0, r0, #15
 800c7cc:	4098      	lsls	r0, r3
 800c7ce:	ea4b 0b00 	orr.w	fp, fp, r0
 800c7d2:	3304      	adds	r3, #4
 800c7d4:	e7ae      	b.n	800c734 <__gethex+0x15c>
 800c7d6:	45b1      	cmp	r9, r6
 800c7d8:	d8ea      	bhi.n	800c7b0 <__gethex+0x1d8>
 800c7da:	2201      	movs	r2, #1
 800c7dc:	4630      	mov	r0, r6
 800c7de:	492a      	ldr	r1, [pc, #168]	@ (800c888 <__gethex+0x2b0>)
 800c7e0:	9303      	str	r3, [sp, #12]
 800c7e2:	f7fe fec2 	bl	800b56a <strncmp>
 800c7e6:	9b03      	ldr	r3, [sp, #12]
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d1e1      	bne.n	800c7b0 <__gethex+0x1d8>
 800c7ec:	e7a2      	b.n	800c734 <__gethex+0x15c>
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	1ea9      	subs	r1, r5, #2
 800c7f2:	f000 ff0a 	bl	800d60a <__any_on>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0c2      	beq.n	800c780 <__gethex+0x1a8>
 800c7fa:	f04f 0903 	mov.w	r9, #3
 800c7fe:	e7c1      	b.n	800c784 <__gethex+0x1ac>
 800c800:	da09      	bge.n	800c816 <__gethex+0x23e>
 800c802:	1b75      	subs	r5, r6, r5
 800c804:	4621      	mov	r1, r4
 800c806:	462a      	mov	r2, r5
 800c808:	9801      	ldr	r0, [sp, #4]
 800c80a:	f000 fccf 	bl	800d1ac <__lshift>
 800c80e:	4604      	mov	r4, r0
 800c810:	1b7f      	subs	r7, r7, r5
 800c812:	f100 0a14 	add.w	sl, r0, #20
 800c816:	f04f 0900 	mov.w	r9, #0
 800c81a:	e7b8      	b.n	800c78e <__gethex+0x1b6>
 800c81c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c820:	42bd      	cmp	r5, r7
 800c822:	dd6f      	ble.n	800c904 <__gethex+0x32c>
 800c824:	1bed      	subs	r5, r5, r7
 800c826:	42ae      	cmp	r6, r5
 800c828:	dc34      	bgt.n	800c894 <__gethex+0x2bc>
 800c82a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c82e:	2b02      	cmp	r3, #2
 800c830:	d022      	beq.n	800c878 <__gethex+0x2a0>
 800c832:	2b03      	cmp	r3, #3
 800c834:	d024      	beq.n	800c880 <__gethex+0x2a8>
 800c836:	2b01      	cmp	r3, #1
 800c838:	d115      	bne.n	800c866 <__gethex+0x28e>
 800c83a:	42ae      	cmp	r6, r5
 800c83c:	d113      	bne.n	800c866 <__gethex+0x28e>
 800c83e:	2e01      	cmp	r6, #1
 800c840:	d10b      	bne.n	800c85a <__gethex+0x282>
 800c842:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c846:	9a02      	ldr	r2, [sp, #8]
 800c848:	2562      	movs	r5, #98	@ 0x62
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	2301      	movs	r3, #1
 800c84e:	6123      	str	r3, [r4, #16]
 800c850:	f8ca 3000 	str.w	r3, [sl]
 800c854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c856:	601c      	str	r4, [r3, #0]
 800c858:	e73a      	b.n	800c6d0 <__gethex+0xf8>
 800c85a:	4620      	mov	r0, r4
 800c85c:	1e71      	subs	r1, r6, #1
 800c85e:	f000 fed4 	bl	800d60a <__any_on>
 800c862:	2800      	cmp	r0, #0
 800c864:	d1ed      	bne.n	800c842 <__gethex+0x26a>
 800c866:	4621      	mov	r1, r4
 800c868:	9801      	ldr	r0, [sp, #4]
 800c86a:	f000 fa8f 	bl	800cd8c <_Bfree>
 800c86e:	2300      	movs	r3, #0
 800c870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c872:	2550      	movs	r5, #80	@ 0x50
 800c874:	6013      	str	r3, [r2, #0]
 800c876:	e72b      	b.n	800c6d0 <__gethex+0xf8>
 800c878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1f3      	bne.n	800c866 <__gethex+0x28e>
 800c87e:	e7e0      	b.n	800c842 <__gethex+0x26a>
 800c880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1dd      	bne.n	800c842 <__gethex+0x26a>
 800c886:	e7ee      	b.n	800c866 <__gethex+0x28e>
 800c888:	0800e20e 	.word	0x0800e20e
 800c88c:	0800e35e 	.word	0x0800e35e
 800c890:	0800e36f 	.word	0x0800e36f
 800c894:	1e6f      	subs	r7, r5, #1
 800c896:	f1b9 0f00 	cmp.w	r9, #0
 800c89a:	d130      	bne.n	800c8fe <__gethex+0x326>
 800c89c:	b127      	cbz	r7, 800c8a8 <__gethex+0x2d0>
 800c89e:	4639      	mov	r1, r7
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f000 feb2 	bl	800d60a <__any_on>
 800c8a6:	4681      	mov	r9, r0
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	1b76      	subs	r6, r6, r5
 800c8ae:	2502      	movs	r5, #2
 800c8b0:	117a      	asrs	r2, r7, #5
 800c8b2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c8b6:	f007 071f 	and.w	r7, r7, #31
 800c8ba:	40bb      	lsls	r3, r7
 800c8bc:	4213      	tst	r3, r2
 800c8be:	4620      	mov	r0, r4
 800c8c0:	bf18      	it	ne
 800c8c2:	f049 0902 	orrne.w	r9, r9, #2
 800c8c6:	f7ff fe1f 	bl	800c508 <rshift>
 800c8ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c8ce:	f1b9 0f00 	cmp.w	r9, #0
 800c8d2:	d047      	beq.n	800c964 <__gethex+0x38c>
 800c8d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d015      	beq.n	800c908 <__gethex+0x330>
 800c8dc:	2b03      	cmp	r3, #3
 800c8de:	d017      	beq.n	800c910 <__gethex+0x338>
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d109      	bne.n	800c8f8 <__gethex+0x320>
 800c8e4:	f019 0f02 	tst.w	r9, #2
 800c8e8:	d006      	beq.n	800c8f8 <__gethex+0x320>
 800c8ea:	f8da 3000 	ldr.w	r3, [sl]
 800c8ee:	ea49 0903 	orr.w	r9, r9, r3
 800c8f2:	f019 0f01 	tst.w	r9, #1
 800c8f6:	d10e      	bne.n	800c916 <__gethex+0x33e>
 800c8f8:	f045 0510 	orr.w	r5, r5, #16
 800c8fc:	e032      	b.n	800c964 <__gethex+0x38c>
 800c8fe:	f04f 0901 	mov.w	r9, #1
 800c902:	e7d1      	b.n	800c8a8 <__gethex+0x2d0>
 800c904:	2501      	movs	r5, #1
 800c906:	e7e2      	b.n	800c8ce <__gethex+0x2f6>
 800c908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c90a:	f1c3 0301 	rsb	r3, r3, #1
 800c90e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c912:	2b00      	cmp	r3, #0
 800c914:	d0f0      	beq.n	800c8f8 <__gethex+0x320>
 800c916:	f04f 0c00 	mov.w	ip, #0
 800c91a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c91e:	f104 0314 	add.w	r3, r4, #20
 800c922:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c926:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c92a:	4618      	mov	r0, r3
 800c92c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c930:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c934:	d01b      	beq.n	800c96e <__gethex+0x396>
 800c936:	3201      	adds	r2, #1
 800c938:	6002      	str	r2, [r0, #0]
 800c93a:	2d02      	cmp	r5, #2
 800c93c:	f104 0314 	add.w	r3, r4, #20
 800c940:	d13c      	bne.n	800c9bc <__gethex+0x3e4>
 800c942:	f8d8 2000 	ldr.w	r2, [r8]
 800c946:	3a01      	subs	r2, #1
 800c948:	42b2      	cmp	r2, r6
 800c94a:	d109      	bne.n	800c960 <__gethex+0x388>
 800c94c:	2201      	movs	r2, #1
 800c94e:	1171      	asrs	r1, r6, #5
 800c950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c954:	f006 061f 	and.w	r6, r6, #31
 800c958:	fa02 f606 	lsl.w	r6, r2, r6
 800c95c:	421e      	tst	r6, r3
 800c95e:	d13a      	bne.n	800c9d6 <__gethex+0x3fe>
 800c960:	f045 0520 	orr.w	r5, r5, #32
 800c964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c966:	601c      	str	r4, [r3, #0]
 800c968:	9b02      	ldr	r3, [sp, #8]
 800c96a:	601f      	str	r7, [r3, #0]
 800c96c:	e6b0      	b.n	800c6d0 <__gethex+0xf8>
 800c96e:	4299      	cmp	r1, r3
 800c970:	f843 cc04 	str.w	ip, [r3, #-4]
 800c974:	d8d9      	bhi.n	800c92a <__gethex+0x352>
 800c976:	68a3      	ldr	r3, [r4, #8]
 800c978:	459b      	cmp	fp, r3
 800c97a:	db17      	blt.n	800c9ac <__gethex+0x3d4>
 800c97c:	6861      	ldr	r1, [r4, #4]
 800c97e:	9801      	ldr	r0, [sp, #4]
 800c980:	3101      	adds	r1, #1
 800c982:	f000 f9c3 	bl	800cd0c <_Balloc>
 800c986:	4681      	mov	r9, r0
 800c988:	b918      	cbnz	r0, 800c992 <__gethex+0x3ba>
 800c98a:	4602      	mov	r2, r0
 800c98c:	2184      	movs	r1, #132	@ 0x84
 800c98e:	4b19      	ldr	r3, [pc, #100]	@ (800c9f4 <__gethex+0x41c>)
 800c990:	e6c5      	b.n	800c71e <__gethex+0x146>
 800c992:	6922      	ldr	r2, [r4, #16]
 800c994:	f104 010c 	add.w	r1, r4, #12
 800c998:	3202      	adds	r2, #2
 800c99a:	0092      	lsls	r2, r2, #2
 800c99c:	300c      	adds	r0, #12
 800c99e:	f7fe fed8 	bl	800b752 <memcpy>
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	9801      	ldr	r0, [sp, #4]
 800c9a6:	f000 f9f1 	bl	800cd8c <_Bfree>
 800c9aa:	464c      	mov	r4, r9
 800c9ac:	6923      	ldr	r3, [r4, #16]
 800c9ae:	1c5a      	adds	r2, r3, #1
 800c9b0:	6122      	str	r2, [r4, #16]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9b8:	615a      	str	r2, [r3, #20]
 800c9ba:	e7be      	b.n	800c93a <__gethex+0x362>
 800c9bc:	6922      	ldr	r2, [r4, #16]
 800c9be:	455a      	cmp	r2, fp
 800c9c0:	dd0b      	ble.n	800c9da <__gethex+0x402>
 800c9c2:	2101      	movs	r1, #1
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f7ff fd9f 	bl	800c508 <rshift>
 800c9ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9ce:	3701      	adds	r7, #1
 800c9d0:	42bb      	cmp	r3, r7
 800c9d2:	f6ff aee0 	blt.w	800c796 <__gethex+0x1be>
 800c9d6:	2501      	movs	r5, #1
 800c9d8:	e7c2      	b.n	800c960 <__gethex+0x388>
 800c9da:	f016 061f 	ands.w	r6, r6, #31
 800c9de:	d0fa      	beq.n	800c9d6 <__gethex+0x3fe>
 800c9e0:	4453      	add	r3, sl
 800c9e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c9e6:	f000 fa83 	bl	800cef0 <__hi0bits>
 800c9ea:	f1c6 0620 	rsb	r6, r6, #32
 800c9ee:	42b0      	cmp	r0, r6
 800c9f0:	dbe7      	blt.n	800c9c2 <__gethex+0x3ea>
 800c9f2:	e7f0      	b.n	800c9d6 <__gethex+0x3fe>
 800c9f4:	0800e35e 	.word	0x0800e35e

0800c9f8 <L_shift>:
 800c9f8:	f1c2 0208 	rsb	r2, r2, #8
 800c9fc:	0092      	lsls	r2, r2, #2
 800c9fe:	b570      	push	{r4, r5, r6, lr}
 800ca00:	f1c2 0620 	rsb	r6, r2, #32
 800ca04:	6843      	ldr	r3, [r0, #4]
 800ca06:	6804      	ldr	r4, [r0, #0]
 800ca08:	fa03 f506 	lsl.w	r5, r3, r6
 800ca0c:	432c      	orrs	r4, r5
 800ca0e:	40d3      	lsrs	r3, r2
 800ca10:	6004      	str	r4, [r0, #0]
 800ca12:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca16:	4288      	cmp	r0, r1
 800ca18:	d3f4      	bcc.n	800ca04 <L_shift+0xc>
 800ca1a:	bd70      	pop	{r4, r5, r6, pc}

0800ca1c <__match>:
 800ca1c:	b530      	push	{r4, r5, lr}
 800ca1e:	6803      	ldr	r3, [r0, #0]
 800ca20:	3301      	adds	r3, #1
 800ca22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca26:	b914      	cbnz	r4, 800ca2e <__match+0x12>
 800ca28:	6003      	str	r3, [r0, #0]
 800ca2a:	2001      	movs	r0, #1
 800ca2c:	bd30      	pop	{r4, r5, pc}
 800ca2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca32:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ca36:	2d19      	cmp	r5, #25
 800ca38:	bf98      	it	ls
 800ca3a:	3220      	addls	r2, #32
 800ca3c:	42a2      	cmp	r2, r4
 800ca3e:	d0f0      	beq.n	800ca22 <__match+0x6>
 800ca40:	2000      	movs	r0, #0
 800ca42:	e7f3      	b.n	800ca2c <__match+0x10>

0800ca44 <__hexnan>:
 800ca44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca48:	2500      	movs	r5, #0
 800ca4a:	680b      	ldr	r3, [r1, #0]
 800ca4c:	4682      	mov	sl, r0
 800ca4e:	115e      	asrs	r6, r3, #5
 800ca50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca54:	f013 031f 	ands.w	r3, r3, #31
 800ca58:	bf18      	it	ne
 800ca5a:	3604      	addne	r6, #4
 800ca5c:	1f37      	subs	r7, r6, #4
 800ca5e:	4690      	mov	r8, r2
 800ca60:	46b9      	mov	r9, r7
 800ca62:	463c      	mov	r4, r7
 800ca64:	46ab      	mov	fp, r5
 800ca66:	b087      	sub	sp, #28
 800ca68:	6801      	ldr	r1, [r0, #0]
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca70:	9502      	str	r5, [sp, #8]
 800ca72:	784a      	ldrb	r2, [r1, #1]
 800ca74:	1c4b      	adds	r3, r1, #1
 800ca76:	9303      	str	r3, [sp, #12]
 800ca78:	b342      	cbz	r2, 800cacc <__hexnan+0x88>
 800ca7a:	4610      	mov	r0, r2
 800ca7c:	9105      	str	r1, [sp, #20]
 800ca7e:	9204      	str	r2, [sp, #16]
 800ca80:	f7ff fd95 	bl	800c5ae <__hexdig_fun>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d151      	bne.n	800cb2c <__hexnan+0xe8>
 800ca88:	9a04      	ldr	r2, [sp, #16]
 800ca8a:	9905      	ldr	r1, [sp, #20]
 800ca8c:	2a20      	cmp	r2, #32
 800ca8e:	d818      	bhi.n	800cac2 <__hexnan+0x7e>
 800ca90:	9b02      	ldr	r3, [sp, #8]
 800ca92:	459b      	cmp	fp, r3
 800ca94:	dd13      	ble.n	800cabe <__hexnan+0x7a>
 800ca96:	454c      	cmp	r4, r9
 800ca98:	d206      	bcs.n	800caa8 <__hexnan+0x64>
 800ca9a:	2d07      	cmp	r5, #7
 800ca9c:	dc04      	bgt.n	800caa8 <__hexnan+0x64>
 800ca9e:	462a      	mov	r2, r5
 800caa0:	4649      	mov	r1, r9
 800caa2:	4620      	mov	r0, r4
 800caa4:	f7ff ffa8 	bl	800c9f8 <L_shift>
 800caa8:	4544      	cmp	r4, r8
 800caaa:	d952      	bls.n	800cb52 <__hexnan+0x10e>
 800caac:	2300      	movs	r3, #0
 800caae:	f1a4 0904 	sub.w	r9, r4, #4
 800cab2:	f844 3c04 	str.w	r3, [r4, #-4]
 800cab6:	461d      	mov	r5, r3
 800cab8:	464c      	mov	r4, r9
 800caba:	f8cd b008 	str.w	fp, [sp, #8]
 800cabe:	9903      	ldr	r1, [sp, #12]
 800cac0:	e7d7      	b.n	800ca72 <__hexnan+0x2e>
 800cac2:	2a29      	cmp	r2, #41	@ 0x29
 800cac4:	d157      	bne.n	800cb76 <__hexnan+0x132>
 800cac6:	3102      	adds	r1, #2
 800cac8:	f8ca 1000 	str.w	r1, [sl]
 800cacc:	f1bb 0f00 	cmp.w	fp, #0
 800cad0:	d051      	beq.n	800cb76 <__hexnan+0x132>
 800cad2:	454c      	cmp	r4, r9
 800cad4:	d206      	bcs.n	800cae4 <__hexnan+0xa0>
 800cad6:	2d07      	cmp	r5, #7
 800cad8:	dc04      	bgt.n	800cae4 <__hexnan+0xa0>
 800cada:	462a      	mov	r2, r5
 800cadc:	4649      	mov	r1, r9
 800cade:	4620      	mov	r0, r4
 800cae0:	f7ff ff8a 	bl	800c9f8 <L_shift>
 800cae4:	4544      	cmp	r4, r8
 800cae6:	d936      	bls.n	800cb56 <__hexnan+0x112>
 800cae8:	4623      	mov	r3, r4
 800caea:	f1a8 0204 	sub.w	r2, r8, #4
 800caee:	f853 1b04 	ldr.w	r1, [r3], #4
 800caf2:	429f      	cmp	r7, r3
 800caf4:	f842 1f04 	str.w	r1, [r2, #4]!
 800caf8:	d2f9      	bcs.n	800caee <__hexnan+0xaa>
 800cafa:	1b3b      	subs	r3, r7, r4
 800cafc:	f023 0303 	bic.w	r3, r3, #3
 800cb00:	3304      	adds	r3, #4
 800cb02:	3401      	adds	r4, #1
 800cb04:	3e03      	subs	r6, #3
 800cb06:	42b4      	cmp	r4, r6
 800cb08:	bf88      	it	hi
 800cb0a:	2304      	movhi	r3, #4
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	4443      	add	r3, r8
 800cb10:	f843 2b04 	str.w	r2, [r3], #4
 800cb14:	429f      	cmp	r7, r3
 800cb16:	d2fb      	bcs.n	800cb10 <__hexnan+0xcc>
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	b91b      	cbnz	r3, 800cb24 <__hexnan+0xe0>
 800cb1c:	4547      	cmp	r7, r8
 800cb1e:	d128      	bne.n	800cb72 <__hexnan+0x12e>
 800cb20:	2301      	movs	r3, #1
 800cb22:	603b      	str	r3, [r7, #0]
 800cb24:	2005      	movs	r0, #5
 800cb26:	b007      	add	sp, #28
 800cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2c:	3501      	adds	r5, #1
 800cb2e:	2d08      	cmp	r5, #8
 800cb30:	f10b 0b01 	add.w	fp, fp, #1
 800cb34:	dd06      	ble.n	800cb44 <__hexnan+0x100>
 800cb36:	4544      	cmp	r4, r8
 800cb38:	d9c1      	bls.n	800cabe <__hexnan+0x7a>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	2501      	movs	r5, #1
 800cb3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb42:	3c04      	subs	r4, #4
 800cb44:	6822      	ldr	r2, [r4, #0]
 800cb46:	f000 000f 	and.w	r0, r0, #15
 800cb4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cb4e:	6020      	str	r0, [r4, #0]
 800cb50:	e7b5      	b.n	800cabe <__hexnan+0x7a>
 800cb52:	2508      	movs	r5, #8
 800cb54:	e7b3      	b.n	800cabe <__hexnan+0x7a>
 800cb56:	9b01      	ldr	r3, [sp, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d0dd      	beq.n	800cb18 <__hexnan+0xd4>
 800cb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb60:	f1c3 0320 	rsb	r3, r3, #32
 800cb64:	40da      	lsrs	r2, r3
 800cb66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb70:	e7d2      	b.n	800cb18 <__hexnan+0xd4>
 800cb72:	3f04      	subs	r7, #4
 800cb74:	e7d0      	b.n	800cb18 <__hexnan+0xd4>
 800cb76:	2004      	movs	r0, #4
 800cb78:	e7d5      	b.n	800cb26 <__hexnan+0xe2>
	...

0800cb7c <malloc>:
 800cb7c:	4b02      	ldr	r3, [pc, #8]	@ (800cb88 <malloc+0xc>)
 800cb7e:	4601      	mov	r1, r0
 800cb80:	6818      	ldr	r0, [r3, #0]
 800cb82:	f000 b825 	b.w	800cbd0 <_malloc_r>
 800cb86:	bf00      	nop
 800cb88:	20000310 	.word	0x20000310

0800cb8c <sbrk_aligned>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	4e0f      	ldr	r6, [pc, #60]	@ (800cbcc <sbrk_aligned+0x40>)
 800cb90:	460c      	mov	r4, r1
 800cb92:	6831      	ldr	r1, [r6, #0]
 800cb94:	4605      	mov	r5, r0
 800cb96:	b911      	cbnz	r1, 800cb9e <sbrk_aligned+0x12>
 800cb98:	f000 ff90 	bl	800dabc <_sbrk_r>
 800cb9c:	6030      	str	r0, [r6, #0]
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4628      	mov	r0, r5
 800cba2:	f000 ff8b 	bl	800dabc <_sbrk_r>
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	d103      	bne.n	800cbb2 <sbrk_aligned+0x26>
 800cbaa:	f04f 34ff 	mov.w	r4, #4294967295
 800cbae:	4620      	mov	r0, r4
 800cbb0:	bd70      	pop	{r4, r5, r6, pc}
 800cbb2:	1cc4      	adds	r4, r0, #3
 800cbb4:	f024 0403 	bic.w	r4, r4, #3
 800cbb8:	42a0      	cmp	r0, r4
 800cbba:	d0f8      	beq.n	800cbae <sbrk_aligned+0x22>
 800cbbc:	1a21      	subs	r1, r4, r0
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	f000 ff7c 	bl	800dabc <_sbrk_r>
 800cbc4:	3001      	adds	r0, #1
 800cbc6:	d1f2      	bne.n	800cbae <sbrk_aligned+0x22>
 800cbc8:	e7ef      	b.n	800cbaa <sbrk_aligned+0x1e>
 800cbca:	bf00      	nop
 800cbcc:	2000189c 	.word	0x2000189c

0800cbd0 <_malloc_r>:
 800cbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbd4:	1ccd      	adds	r5, r1, #3
 800cbd6:	f025 0503 	bic.w	r5, r5, #3
 800cbda:	3508      	adds	r5, #8
 800cbdc:	2d0c      	cmp	r5, #12
 800cbde:	bf38      	it	cc
 800cbe0:	250c      	movcc	r5, #12
 800cbe2:	2d00      	cmp	r5, #0
 800cbe4:	4606      	mov	r6, r0
 800cbe6:	db01      	blt.n	800cbec <_malloc_r+0x1c>
 800cbe8:	42a9      	cmp	r1, r5
 800cbea:	d904      	bls.n	800cbf6 <_malloc_r+0x26>
 800cbec:	230c      	movs	r3, #12
 800cbee:	6033      	str	r3, [r6, #0]
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cccc <_malloc_r+0xfc>
 800cbfa:	f000 f87b 	bl	800ccf4 <__malloc_lock>
 800cbfe:	f8d8 3000 	ldr.w	r3, [r8]
 800cc02:	461c      	mov	r4, r3
 800cc04:	bb44      	cbnz	r4, 800cc58 <_malloc_r+0x88>
 800cc06:	4629      	mov	r1, r5
 800cc08:	4630      	mov	r0, r6
 800cc0a:	f7ff ffbf 	bl	800cb8c <sbrk_aligned>
 800cc0e:	1c43      	adds	r3, r0, #1
 800cc10:	4604      	mov	r4, r0
 800cc12:	d158      	bne.n	800ccc6 <_malloc_r+0xf6>
 800cc14:	f8d8 4000 	ldr.w	r4, [r8]
 800cc18:	4627      	mov	r7, r4
 800cc1a:	2f00      	cmp	r7, #0
 800cc1c:	d143      	bne.n	800cca6 <_malloc_r+0xd6>
 800cc1e:	2c00      	cmp	r4, #0
 800cc20:	d04b      	beq.n	800ccba <_malloc_r+0xea>
 800cc22:	6823      	ldr	r3, [r4, #0]
 800cc24:	4639      	mov	r1, r7
 800cc26:	4630      	mov	r0, r6
 800cc28:	eb04 0903 	add.w	r9, r4, r3
 800cc2c:	f000 ff46 	bl	800dabc <_sbrk_r>
 800cc30:	4581      	cmp	r9, r0
 800cc32:	d142      	bne.n	800ccba <_malloc_r+0xea>
 800cc34:	6821      	ldr	r1, [r4, #0]
 800cc36:	4630      	mov	r0, r6
 800cc38:	1a6d      	subs	r5, r5, r1
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	f7ff ffa6 	bl	800cb8c <sbrk_aligned>
 800cc40:	3001      	adds	r0, #1
 800cc42:	d03a      	beq.n	800ccba <_malloc_r+0xea>
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	442b      	add	r3, r5
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	bb62      	cbnz	r2, 800ccac <_malloc_r+0xdc>
 800cc52:	f8c8 7000 	str.w	r7, [r8]
 800cc56:	e00f      	b.n	800cc78 <_malloc_r+0xa8>
 800cc58:	6822      	ldr	r2, [r4, #0]
 800cc5a:	1b52      	subs	r2, r2, r5
 800cc5c:	d420      	bmi.n	800cca0 <_malloc_r+0xd0>
 800cc5e:	2a0b      	cmp	r2, #11
 800cc60:	d917      	bls.n	800cc92 <_malloc_r+0xc2>
 800cc62:	1961      	adds	r1, r4, r5
 800cc64:	42a3      	cmp	r3, r4
 800cc66:	6025      	str	r5, [r4, #0]
 800cc68:	bf18      	it	ne
 800cc6a:	6059      	strne	r1, [r3, #4]
 800cc6c:	6863      	ldr	r3, [r4, #4]
 800cc6e:	bf08      	it	eq
 800cc70:	f8c8 1000 	streq.w	r1, [r8]
 800cc74:	5162      	str	r2, [r4, r5]
 800cc76:	604b      	str	r3, [r1, #4]
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f000 f841 	bl	800cd00 <__malloc_unlock>
 800cc7e:	f104 000b 	add.w	r0, r4, #11
 800cc82:	1d23      	adds	r3, r4, #4
 800cc84:	f020 0007 	bic.w	r0, r0, #7
 800cc88:	1ac2      	subs	r2, r0, r3
 800cc8a:	bf1c      	itt	ne
 800cc8c:	1a1b      	subne	r3, r3, r0
 800cc8e:	50a3      	strne	r3, [r4, r2]
 800cc90:	e7af      	b.n	800cbf2 <_malloc_r+0x22>
 800cc92:	6862      	ldr	r2, [r4, #4]
 800cc94:	42a3      	cmp	r3, r4
 800cc96:	bf0c      	ite	eq
 800cc98:	f8c8 2000 	streq.w	r2, [r8]
 800cc9c:	605a      	strne	r2, [r3, #4]
 800cc9e:	e7eb      	b.n	800cc78 <_malloc_r+0xa8>
 800cca0:	4623      	mov	r3, r4
 800cca2:	6864      	ldr	r4, [r4, #4]
 800cca4:	e7ae      	b.n	800cc04 <_malloc_r+0x34>
 800cca6:	463c      	mov	r4, r7
 800cca8:	687f      	ldr	r7, [r7, #4]
 800ccaa:	e7b6      	b.n	800cc1a <_malloc_r+0x4a>
 800ccac:	461a      	mov	r2, r3
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	42a3      	cmp	r3, r4
 800ccb2:	d1fb      	bne.n	800ccac <_malloc_r+0xdc>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	6053      	str	r3, [r2, #4]
 800ccb8:	e7de      	b.n	800cc78 <_malloc_r+0xa8>
 800ccba:	230c      	movs	r3, #12
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	6033      	str	r3, [r6, #0]
 800ccc0:	f000 f81e 	bl	800cd00 <__malloc_unlock>
 800ccc4:	e794      	b.n	800cbf0 <_malloc_r+0x20>
 800ccc6:	6005      	str	r5, [r0, #0]
 800ccc8:	e7d6      	b.n	800cc78 <_malloc_r+0xa8>
 800ccca:	bf00      	nop
 800cccc:	200018a0 	.word	0x200018a0

0800ccd0 <__ascii_mbtowc>:
 800ccd0:	b082      	sub	sp, #8
 800ccd2:	b901      	cbnz	r1, 800ccd6 <__ascii_mbtowc+0x6>
 800ccd4:	a901      	add	r1, sp, #4
 800ccd6:	b142      	cbz	r2, 800ccea <__ascii_mbtowc+0x1a>
 800ccd8:	b14b      	cbz	r3, 800ccee <__ascii_mbtowc+0x1e>
 800ccda:	7813      	ldrb	r3, [r2, #0]
 800ccdc:	600b      	str	r3, [r1, #0]
 800ccde:	7812      	ldrb	r2, [r2, #0]
 800cce0:	1e10      	subs	r0, r2, #0
 800cce2:	bf18      	it	ne
 800cce4:	2001      	movne	r0, #1
 800cce6:	b002      	add	sp, #8
 800cce8:	4770      	bx	lr
 800ccea:	4610      	mov	r0, r2
 800ccec:	e7fb      	b.n	800cce6 <__ascii_mbtowc+0x16>
 800ccee:	f06f 0001 	mvn.w	r0, #1
 800ccf2:	e7f8      	b.n	800cce6 <__ascii_mbtowc+0x16>

0800ccf4 <__malloc_lock>:
 800ccf4:	4801      	ldr	r0, [pc, #4]	@ (800ccfc <__malloc_lock+0x8>)
 800ccf6:	f7fe bd1c 	b.w	800b732 <__retarget_lock_acquire_recursive>
 800ccfa:	bf00      	nop
 800ccfc:	20001898 	.word	0x20001898

0800cd00 <__malloc_unlock>:
 800cd00:	4801      	ldr	r0, [pc, #4]	@ (800cd08 <__malloc_unlock+0x8>)
 800cd02:	f7fe bd17 	b.w	800b734 <__retarget_lock_release_recursive>
 800cd06:	bf00      	nop
 800cd08:	20001898 	.word	0x20001898

0800cd0c <_Balloc>:
 800cd0c:	b570      	push	{r4, r5, r6, lr}
 800cd0e:	69c6      	ldr	r6, [r0, #28]
 800cd10:	4604      	mov	r4, r0
 800cd12:	460d      	mov	r5, r1
 800cd14:	b976      	cbnz	r6, 800cd34 <_Balloc+0x28>
 800cd16:	2010      	movs	r0, #16
 800cd18:	f7ff ff30 	bl	800cb7c <malloc>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	61e0      	str	r0, [r4, #28]
 800cd20:	b920      	cbnz	r0, 800cd2c <_Balloc+0x20>
 800cd22:	216b      	movs	r1, #107	@ 0x6b
 800cd24:	4b17      	ldr	r3, [pc, #92]	@ (800cd84 <_Balloc+0x78>)
 800cd26:	4818      	ldr	r0, [pc, #96]	@ (800cd88 <_Balloc+0x7c>)
 800cd28:	f7fe fd2c 	bl	800b784 <__assert_func>
 800cd2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd30:	6006      	str	r6, [r0, #0]
 800cd32:	60c6      	str	r6, [r0, #12]
 800cd34:	69e6      	ldr	r6, [r4, #28]
 800cd36:	68f3      	ldr	r3, [r6, #12]
 800cd38:	b183      	cbz	r3, 800cd5c <_Balloc+0x50>
 800cd3a:	69e3      	ldr	r3, [r4, #28]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd42:	b9b8      	cbnz	r0, 800cd74 <_Balloc+0x68>
 800cd44:	2101      	movs	r1, #1
 800cd46:	fa01 f605 	lsl.w	r6, r1, r5
 800cd4a:	1d72      	adds	r2, r6, #5
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	0092      	lsls	r2, r2, #2
 800cd50:	f000 fecb 	bl	800daea <_calloc_r>
 800cd54:	b160      	cbz	r0, 800cd70 <_Balloc+0x64>
 800cd56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd5a:	e00e      	b.n	800cd7a <_Balloc+0x6e>
 800cd5c:	2221      	movs	r2, #33	@ 0x21
 800cd5e:	2104      	movs	r1, #4
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 fec2 	bl	800daea <_calloc_r>
 800cd66:	69e3      	ldr	r3, [r4, #28]
 800cd68:	60f0      	str	r0, [r6, #12]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1e4      	bne.n	800cd3a <_Balloc+0x2e>
 800cd70:	2000      	movs	r0, #0
 800cd72:	bd70      	pop	{r4, r5, r6, pc}
 800cd74:	6802      	ldr	r2, [r0, #0]
 800cd76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd80:	e7f7      	b.n	800cd72 <_Balloc+0x66>
 800cd82:	bf00      	nop
 800cd84:	0800e244 	.word	0x0800e244
 800cd88:	0800e3cf 	.word	0x0800e3cf

0800cd8c <_Bfree>:
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	69c6      	ldr	r6, [r0, #28]
 800cd90:	4605      	mov	r5, r0
 800cd92:	460c      	mov	r4, r1
 800cd94:	b976      	cbnz	r6, 800cdb4 <_Bfree+0x28>
 800cd96:	2010      	movs	r0, #16
 800cd98:	f7ff fef0 	bl	800cb7c <malloc>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	61e8      	str	r0, [r5, #28]
 800cda0:	b920      	cbnz	r0, 800cdac <_Bfree+0x20>
 800cda2:	218f      	movs	r1, #143	@ 0x8f
 800cda4:	4b08      	ldr	r3, [pc, #32]	@ (800cdc8 <_Bfree+0x3c>)
 800cda6:	4809      	ldr	r0, [pc, #36]	@ (800cdcc <_Bfree+0x40>)
 800cda8:	f7fe fcec 	bl	800b784 <__assert_func>
 800cdac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdb0:	6006      	str	r6, [r0, #0]
 800cdb2:	60c6      	str	r6, [r0, #12]
 800cdb4:	b13c      	cbz	r4, 800cdc6 <_Bfree+0x3a>
 800cdb6:	69eb      	ldr	r3, [r5, #28]
 800cdb8:	6862      	ldr	r2, [r4, #4]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdc0:	6021      	str	r1, [r4, #0]
 800cdc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}
 800cdc8:	0800e244 	.word	0x0800e244
 800cdcc:	0800e3cf 	.word	0x0800e3cf

0800cdd0 <__multadd>:
 800cdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd4:	4607      	mov	r7, r0
 800cdd6:	460c      	mov	r4, r1
 800cdd8:	461e      	mov	r6, r3
 800cdda:	2000      	movs	r0, #0
 800cddc:	690d      	ldr	r5, [r1, #16]
 800cdde:	f101 0c14 	add.w	ip, r1, #20
 800cde2:	f8dc 3000 	ldr.w	r3, [ip]
 800cde6:	3001      	adds	r0, #1
 800cde8:	b299      	uxth	r1, r3
 800cdea:	fb02 6101 	mla	r1, r2, r1, r6
 800cdee:	0c1e      	lsrs	r6, r3, #16
 800cdf0:	0c0b      	lsrs	r3, r1, #16
 800cdf2:	fb02 3306 	mla	r3, r2, r6, r3
 800cdf6:	b289      	uxth	r1, r1
 800cdf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cdfc:	4285      	cmp	r5, r0
 800cdfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce02:	f84c 1b04 	str.w	r1, [ip], #4
 800ce06:	dcec      	bgt.n	800cde2 <__multadd+0x12>
 800ce08:	b30e      	cbz	r6, 800ce4e <__multadd+0x7e>
 800ce0a:	68a3      	ldr	r3, [r4, #8]
 800ce0c:	42ab      	cmp	r3, r5
 800ce0e:	dc19      	bgt.n	800ce44 <__multadd+0x74>
 800ce10:	6861      	ldr	r1, [r4, #4]
 800ce12:	4638      	mov	r0, r7
 800ce14:	3101      	adds	r1, #1
 800ce16:	f7ff ff79 	bl	800cd0c <_Balloc>
 800ce1a:	4680      	mov	r8, r0
 800ce1c:	b928      	cbnz	r0, 800ce2a <__multadd+0x5a>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	21ba      	movs	r1, #186	@ 0xba
 800ce22:	4b0c      	ldr	r3, [pc, #48]	@ (800ce54 <__multadd+0x84>)
 800ce24:	480c      	ldr	r0, [pc, #48]	@ (800ce58 <__multadd+0x88>)
 800ce26:	f7fe fcad 	bl	800b784 <__assert_func>
 800ce2a:	6922      	ldr	r2, [r4, #16]
 800ce2c:	f104 010c 	add.w	r1, r4, #12
 800ce30:	3202      	adds	r2, #2
 800ce32:	0092      	lsls	r2, r2, #2
 800ce34:	300c      	adds	r0, #12
 800ce36:	f7fe fc8c 	bl	800b752 <memcpy>
 800ce3a:	4621      	mov	r1, r4
 800ce3c:	4638      	mov	r0, r7
 800ce3e:	f7ff ffa5 	bl	800cd8c <_Bfree>
 800ce42:	4644      	mov	r4, r8
 800ce44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce48:	3501      	adds	r5, #1
 800ce4a:	615e      	str	r6, [r3, #20]
 800ce4c:	6125      	str	r5, [r4, #16]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce54:	0800e35e 	.word	0x0800e35e
 800ce58:	0800e3cf 	.word	0x0800e3cf

0800ce5c <__s2b>:
 800ce5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce60:	4615      	mov	r5, r2
 800ce62:	2209      	movs	r2, #9
 800ce64:	461f      	mov	r7, r3
 800ce66:	3308      	adds	r3, #8
 800ce68:	460c      	mov	r4, r1
 800ce6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce6e:	4606      	mov	r6, r0
 800ce70:	2201      	movs	r2, #1
 800ce72:	2100      	movs	r1, #0
 800ce74:	429a      	cmp	r2, r3
 800ce76:	db09      	blt.n	800ce8c <__s2b+0x30>
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f7ff ff47 	bl	800cd0c <_Balloc>
 800ce7e:	b940      	cbnz	r0, 800ce92 <__s2b+0x36>
 800ce80:	4602      	mov	r2, r0
 800ce82:	21d3      	movs	r1, #211	@ 0xd3
 800ce84:	4b18      	ldr	r3, [pc, #96]	@ (800cee8 <__s2b+0x8c>)
 800ce86:	4819      	ldr	r0, [pc, #100]	@ (800ceec <__s2b+0x90>)
 800ce88:	f7fe fc7c 	bl	800b784 <__assert_func>
 800ce8c:	0052      	lsls	r2, r2, #1
 800ce8e:	3101      	adds	r1, #1
 800ce90:	e7f0      	b.n	800ce74 <__s2b+0x18>
 800ce92:	9b08      	ldr	r3, [sp, #32]
 800ce94:	2d09      	cmp	r5, #9
 800ce96:	6143      	str	r3, [r0, #20]
 800ce98:	f04f 0301 	mov.w	r3, #1
 800ce9c:	6103      	str	r3, [r0, #16]
 800ce9e:	dd16      	ble.n	800cece <__s2b+0x72>
 800cea0:	f104 0909 	add.w	r9, r4, #9
 800cea4:	46c8      	mov	r8, r9
 800cea6:	442c      	add	r4, r5
 800cea8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ceac:	4601      	mov	r1, r0
 800ceae:	220a      	movs	r2, #10
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	3b30      	subs	r3, #48	@ 0x30
 800ceb4:	f7ff ff8c 	bl	800cdd0 <__multadd>
 800ceb8:	45a0      	cmp	r8, r4
 800ceba:	d1f5      	bne.n	800cea8 <__s2b+0x4c>
 800cebc:	f1a5 0408 	sub.w	r4, r5, #8
 800cec0:	444c      	add	r4, r9
 800cec2:	1b2d      	subs	r5, r5, r4
 800cec4:	1963      	adds	r3, r4, r5
 800cec6:	42bb      	cmp	r3, r7
 800cec8:	db04      	blt.n	800ced4 <__s2b+0x78>
 800ceca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cece:	2509      	movs	r5, #9
 800ced0:	340a      	adds	r4, #10
 800ced2:	e7f6      	b.n	800cec2 <__s2b+0x66>
 800ced4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ced8:	4601      	mov	r1, r0
 800ceda:	220a      	movs	r2, #10
 800cedc:	4630      	mov	r0, r6
 800cede:	3b30      	subs	r3, #48	@ 0x30
 800cee0:	f7ff ff76 	bl	800cdd0 <__multadd>
 800cee4:	e7ee      	b.n	800cec4 <__s2b+0x68>
 800cee6:	bf00      	nop
 800cee8:	0800e35e 	.word	0x0800e35e
 800ceec:	0800e3cf 	.word	0x0800e3cf

0800cef0 <__hi0bits>:
 800cef0:	4603      	mov	r3, r0
 800cef2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cef6:	bf3a      	itte	cc
 800cef8:	0403      	lslcc	r3, r0, #16
 800cefa:	2010      	movcc	r0, #16
 800cefc:	2000      	movcs	r0, #0
 800cefe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf02:	bf3c      	itt	cc
 800cf04:	021b      	lslcc	r3, r3, #8
 800cf06:	3008      	addcc	r0, #8
 800cf08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf0c:	bf3c      	itt	cc
 800cf0e:	011b      	lslcc	r3, r3, #4
 800cf10:	3004      	addcc	r0, #4
 800cf12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf16:	bf3c      	itt	cc
 800cf18:	009b      	lslcc	r3, r3, #2
 800cf1a:	3002      	addcc	r0, #2
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	db05      	blt.n	800cf2c <__hi0bits+0x3c>
 800cf20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf24:	f100 0001 	add.w	r0, r0, #1
 800cf28:	bf08      	it	eq
 800cf2a:	2020      	moveq	r0, #32
 800cf2c:	4770      	bx	lr

0800cf2e <__lo0bits>:
 800cf2e:	6803      	ldr	r3, [r0, #0]
 800cf30:	4602      	mov	r2, r0
 800cf32:	f013 0007 	ands.w	r0, r3, #7
 800cf36:	d00b      	beq.n	800cf50 <__lo0bits+0x22>
 800cf38:	07d9      	lsls	r1, r3, #31
 800cf3a:	d421      	bmi.n	800cf80 <__lo0bits+0x52>
 800cf3c:	0798      	lsls	r0, r3, #30
 800cf3e:	bf49      	itett	mi
 800cf40:	085b      	lsrmi	r3, r3, #1
 800cf42:	089b      	lsrpl	r3, r3, #2
 800cf44:	2001      	movmi	r0, #1
 800cf46:	6013      	strmi	r3, [r2, #0]
 800cf48:	bf5c      	itt	pl
 800cf4a:	2002      	movpl	r0, #2
 800cf4c:	6013      	strpl	r3, [r2, #0]
 800cf4e:	4770      	bx	lr
 800cf50:	b299      	uxth	r1, r3
 800cf52:	b909      	cbnz	r1, 800cf58 <__lo0bits+0x2a>
 800cf54:	2010      	movs	r0, #16
 800cf56:	0c1b      	lsrs	r3, r3, #16
 800cf58:	b2d9      	uxtb	r1, r3
 800cf5a:	b909      	cbnz	r1, 800cf60 <__lo0bits+0x32>
 800cf5c:	3008      	adds	r0, #8
 800cf5e:	0a1b      	lsrs	r3, r3, #8
 800cf60:	0719      	lsls	r1, r3, #28
 800cf62:	bf04      	itt	eq
 800cf64:	091b      	lsreq	r3, r3, #4
 800cf66:	3004      	addeq	r0, #4
 800cf68:	0799      	lsls	r1, r3, #30
 800cf6a:	bf04      	itt	eq
 800cf6c:	089b      	lsreq	r3, r3, #2
 800cf6e:	3002      	addeq	r0, #2
 800cf70:	07d9      	lsls	r1, r3, #31
 800cf72:	d403      	bmi.n	800cf7c <__lo0bits+0x4e>
 800cf74:	085b      	lsrs	r3, r3, #1
 800cf76:	f100 0001 	add.w	r0, r0, #1
 800cf7a:	d003      	beq.n	800cf84 <__lo0bits+0x56>
 800cf7c:	6013      	str	r3, [r2, #0]
 800cf7e:	4770      	bx	lr
 800cf80:	2000      	movs	r0, #0
 800cf82:	4770      	bx	lr
 800cf84:	2020      	movs	r0, #32
 800cf86:	4770      	bx	lr

0800cf88 <__i2b>:
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	2101      	movs	r1, #1
 800cf8e:	f7ff febd 	bl	800cd0c <_Balloc>
 800cf92:	4602      	mov	r2, r0
 800cf94:	b928      	cbnz	r0, 800cfa2 <__i2b+0x1a>
 800cf96:	f240 1145 	movw	r1, #325	@ 0x145
 800cf9a:	4b04      	ldr	r3, [pc, #16]	@ (800cfac <__i2b+0x24>)
 800cf9c:	4804      	ldr	r0, [pc, #16]	@ (800cfb0 <__i2b+0x28>)
 800cf9e:	f7fe fbf1 	bl	800b784 <__assert_func>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	6144      	str	r4, [r0, #20]
 800cfa6:	6103      	str	r3, [r0, #16]
 800cfa8:	bd10      	pop	{r4, pc}
 800cfaa:	bf00      	nop
 800cfac:	0800e35e 	.word	0x0800e35e
 800cfb0:	0800e3cf 	.word	0x0800e3cf

0800cfb4 <__multiply>:
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb8:	4617      	mov	r7, r2
 800cfba:	690a      	ldr	r2, [r1, #16]
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	4689      	mov	r9, r1
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	bfa2      	ittt	ge
 800cfc4:	463b      	movge	r3, r7
 800cfc6:	460f      	movge	r7, r1
 800cfc8:	4699      	movge	r9, r3
 800cfca:	693d      	ldr	r5, [r7, #16]
 800cfcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	eb05 060a 	add.w	r6, r5, sl
 800cfd8:	42b3      	cmp	r3, r6
 800cfda:	b085      	sub	sp, #20
 800cfdc:	bfb8      	it	lt
 800cfde:	3101      	addlt	r1, #1
 800cfe0:	f7ff fe94 	bl	800cd0c <_Balloc>
 800cfe4:	b930      	cbnz	r0, 800cff4 <__multiply+0x40>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cfec:	4b40      	ldr	r3, [pc, #256]	@ (800d0f0 <__multiply+0x13c>)
 800cfee:	4841      	ldr	r0, [pc, #260]	@ (800d0f4 <__multiply+0x140>)
 800cff0:	f7fe fbc8 	bl	800b784 <__assert_func>
 800cff4:	f100 0414 	add.w	r4, r0, #20
 800cff8:	4623      	mov	r3, r4
 800cffa:	2200      	movs	r2, #0
 800cffc:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d000:	4573      	cmp	r3, lr
 800d002:	d320      	bcc.n	800d046 <__multiply+0x92>
 800d004:	f107 0814 	add.w	r8, r7, #20
 800d008:	f109 0114 	add.w	r1, r9, #20
 800d00c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d010:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d014:	9302      	str	r3, [sp, #8]
 800d016:	1beb      	subs	r3, r5, r7
 800d018:	3b15      	subs	r3, #21
 800d01a:	f023 0303 	bic.w	r3, r3, #3
 800d01e:	3304      	adds	r3, #4
 800d020:	3715      	adds	r7, #21
 800d022:	42bd      	cmp	r5, r7
 800d024:	bf38      	it	cc
 800d026:	2304      	movcc	r3, #4
 800d028:	9301      	str	r3, [sp, #4]
 800d02a:	9b02      	ldr	r3, [sp, #8]
 800d02c:	9103      	str	r1, [sp, #12]
 800d02e:	428b      	cmp	r3, r1
 800d030:	d80c      	bhi.n	800d04c <__multiply+0x98>
 800d032:	2e00      	cmp	r6, #0
 800d034:	dd03      	ble.n	800d03e <__multiply+0x8a>
 800d036:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d055      	beq.n	800d0ea <__multiply+0x136>
 800d03e:	6106      	str	r6, [r0, #16]
 800d040:	b005      	add	sp, #20
 800d042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d046:	f843 2b04 	str.w	r2, [r3], #4
 800d04a:	e7d9      	b.n	800d000 <__multiply+0x4c>
 800d04c:	f8b1 a000 	ldrh.w	sl, [r1]
 800d050:	f1ba 0f00 	cmp.w	sl, #0
 800d054:	d01f      	beq.n	800d096 <__multiply+0xe2>
 800d056:	46c4      	mov	ip, r8
 800d058:	46a1      	mov	r9, r4
 800d05a:	2700      	movs	r7, #0
 800d05c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d060:	f8d9 3000 	ldr.w	r3, [r9]
 800d064:	fa1f fb82 	uxth.w	fp, r2
 800d068:	b29b      	uxth	r3, r3
 800d06a:	fb0a 330b 	mla	r3, sl, fp, r3
 800d06e:	443b      	add	r3, r7
 800d070:	f8d9 7000 	ldr.w	r7, [r9]
 800d074:	0c12      	lsrs	r2, r2, #16
 800d076:	0c3f      	lsrs	r7, r7, #16
 800d078:	fb0a 7202 	mla	r2, sl, r2, r7
 800d07c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d080:	b29b      	uxth	r3, r3
 800d082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d086:	4565      	cmp	r5, ip
 800d088:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d08c:	f849 3b04 	str.w	r3, [r9], #4
 800d090:	d8e4      	bhi.n	800d05c <__multiply+0xa8>
 800d092:	9b01      	ldr	r3, [sp, #4]
 800d094:	50e7      	str	r7, [r4, r3]
 800d096:	9b03      	ldr	r3, [sp, #12]
 800d098:	3104      	adds	r1, #4
 800d09a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d09e:	f1b9 0f00 	cmp.w	r9, #0
 800d0a2:	d020      	beq.n	800d0e6 <__multiply+0x132>
 800d0a4:	4647      	mov	r7, r8
 800d0a6:	46a4      	mov	ip, r4
 800d0a8:	f04f 0a00 	mov.w	sl, #0
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	f8b7 b000 	ldrh.w	fp, [r7]
 800d0b2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	fb09 220b 	mla	r2, r9, fp, r2
 800d0bc:	4452      	add	r2, sl
 800d0be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0c2:	f84c 3b04 	str.w	r3, [ip], #4
 800d0c6:	f857 3b04 	ldr.w	r3, [r7], #4
 800d0ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0ce:	f8bc 3000 	ldrh.w	r3, [ip]
 800d0d2:	42bd      	cmp	r5, r7
 800d0d4:	fb09 330a 	mla	r3, r9, sl, r3
 800d0d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d0dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0e0:	d8e5      	bhi.n	800d0ae <__multiply+0xfa>
 800d0e2:	9a01      	ldr	r2, [sp, #4]
 800d0e4:	50a3      	str	r3, [r4, r2]
 800d0e6:	3404      	adds	r4, #4
 800d0e8:	e79f      	b.n	800d02a <__multiply+0x76>
 800d0ea:	3e01      	subs	r6, #1
 800d0ec:	e7a1      	b.n	800d032 <__multiply+0x7e>
 800d0ee:	bf00      	nop
 800d0f0:	0800e35e 	.word	0x0800e35e
 800d0f4:	0800e3cf 	.word	0x0800e3cf

0800d0f8 <__pow5mult>:
 800d0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0fc:	4615      	mov	r5, r2
 800d0fe:	f012 0203 	ands.w	r2, r2, #3
 800d102:	4607      	mov	r7, r0
 800d104:	460e      	mov	r6, r1
 800d106:	d007      	beq.n	800d118 <__pow5mult+0x20>
 800d108:	4c25      	ldr	r4, [pc, #148]	@ (800d1a0 <__pow5mult+0xa8>)
 800d10a:	3a01      	subs	r2, #1
 800d10c:	2300      	movs	r3, #0
 800d10e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d112:	f7ff fe5d 	bl	800cdd0 <__multadd>
 800d116:	4606      	mov	r6, r0
 800d118:	10ad      	asrs	r5, r5, #2
 800d11a:	d03d      	beq.n	800d198 <__pow5mult+0xa0>
 800d11c:	69fc      	ldr	r4, [r7, #28]
 800d11e:	b97c      	cbnz	r4, 800d140 <__pow5mult+0x48>
 800d120:	2010      	movs	r0, #16
 800d122:	f7ff fd2b 	bl	800cb7c <malloc>
 800d126:	4602      	mov	r2, r0
 800d128:	61f8      	str	r0, [r7, #28]
 800d12a:	b928      	cbnz	r0, 800d138 <__pow5mult+0x40>
 800d12c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d130:	4b1c      	ldr	r3, [pc, #112]	@ (800d1a4 <__pow5mult+0xac>)
 800d132:	481d      	ldr	r0, [pc, #116]	@ (800d1a8 <__pow5mult+0xb0>)
 800d134:	f7fe fb26 	bl	800b784 <__assert_func>
 800d138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d13c:	6004      	str	r4, [r0, #0]
 800d13e:	60c4      	str	r4, [r0, #12]
 800d140:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d148:	b94c      	cbnz	r4, 800d15e <__pow5mult+0x66>
 800d14a:	f240 2171 	movw	r1, #625	@ 0x271
 800d14e:	4638      	mov	r0, r7
 800d150:	f7ff ff1a 	bl	800cf88 <__i2b>
 800d154:	2300      	movs	r3, #0
 800d156:	4604      	mov	r4, r0
 800d158:	f8c8 0008 	str.w	r0, [r8, #8]
 800d15c:	6003      	str	r3, [r0, #0]
 800d15e:	f04f 0900 	mov.w	r9, #0
 800d162:	07eb      	lsls	r3, r5, #31
 800d164:	d50a      	bpl.n	800d17c <__pow5mult+0x84>
 800d166:	4631      	mov	r1, r6
 800d168:	4622      	mov	r2, r4
 800d16a:	4638      	mov	r0, r7
 800d16c:	f7ff ff22 	bl	800cfb4 <__multiply>
 800d170:	4680      	mov	r8, r0
 800d172:	4631      	mov	r1, r6
 800d174:	4638      	mov	r0, r7
 800d176:	f7ff fe09 	bl	800cd8c <_Bfree>
 800d17a:	4646      	mov	r6, r8
 800d17c:	106d      	asrs	r5, r5, #1
 800d17e:	d00b      	beq.n	800d198 <__pow5mult+0xa0>
 800d180:	6820      	ldr	r0, [r4, #0]
 800d182:	b938      	cbnz	r0, 800d194 <__pow5mult+0x9c>
 800d184:	4622      	mov	r2, r4
 800d186:	4621      	mov	r1, r4
 800d188:	4638      	mov	r0, r7
 800d18a:	f7ff ff13 	bl	800cfb4 <__multiply>
 800d18e:	6020      	str	r0, [r4, #0]
 800d190:	f8c0 9000 	str.w	r9, [r0]
 800d194:	4604      	mov	r4, r0
 800d196:	e7e4      	b.n	800d162 <__pow5mult+0x6a>
 800d198:	4630      	mov	r0, r6
 800d19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d19e:	bf00      	nop
 800d1a0:	0800e490 	.word	0x0800e490
 800d1a4:	0800e244 	.word	0x0800e244
 800d1a8:	0800e3cf 	.word	0x0800e3cf

0800d1ac <__lshift>:
 800d1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	4607      	mov	r7, r0
 800d1b4:	4691      	mov	r9, r2
 800d1b6:	6923      	ldr	r3, [r4, #16]
 800d1b8:	6849      	ldr	r1, [r1, #4]
 800d1ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1be:	68a3      	ldr	r3, [r4, #8]
 800d1c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1c4:	f108 0601 	add.w	r6, r8, #1
 800d1c8:	42b3      	cmp	r3, r6
 800d1ca:	db0b      	blt.n	800d1e4 <__lshift+0x38>
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	f7ff fd9d 	bl	800cd0c <_Balloc>
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	b948      	cbnz	r0, 800d1ea <__lshift+0x3e>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d1dc:	4b27      	ldr	r3, [pc, #156]	@ (800d27c <__lshift+0xd0>)
 800d1de:	4828      	ldr	r0, [pc, #160]	@ (800d280 <__lshift+0xd4>)
 800d1e0:	f7fe fad0 	bl	800b784 <__assert_func>
 800d1e4:	3101      	adds	r1, #1
 800d1e6:	005b      	lsls	r3, r3, #1
 800d1e8:	e7ee      	b.n	800d1c8 <__lshift+0x1c>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f100 0114 	add.w	r1, r0, #20
 800d1f0:	f100 0210 	add.w	r2, r0, #16
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	4553      	cmp	r3, sl
 800d1f8:	db33      	blt.n	800d262 <__lshift+0xb6>
 800d1fa:	6920      	ldr	r0, [r4, #16]
 800d1fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d200:	f104 0314 	add.w	r3, r4, #20
 800d204:	f019 091f 	ands.w	r9, r9, #31
 800d208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d20c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d210:	d02b      	beq.n	800d26a <__lshift+0xbe>
 800d212:	468a      	mov	sl, r1
 800d214:	2200      	movs	r2, #0
 800d216:	f1c9 0e20 	rsb	lr, r9, #32
 800d21a:	6818      	ldr	r0, [r3, #0]
 800d21c:	fa00 f009 	lsl.w	r0, r0, r9
 800d220:	4310      	orrs	r0, r2
 800d222:	f84a 0b04 	str.w	r0, [sl], #4
 800d226:	f853 2b04 	ldr.w	r2, [r3], #4
 800d22a:	459c      	cmp	ip, r3
 800d22c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d230:	d8f3      	bhi.n	800d21a <__lshift+0x6e>
 800d232:	ebac 0304 	sub.w	r3, ip, r4
 800d236:	3b15      	subs	r3, #21
 800d238:	f023 0303 	bic.w	r3, r3, #3
 800d23c:	3304      	adds	r3, #4
 800d23e:	f104 0015 	add.w	r0, r4, #21
 800d242:	4560      	cmp	r0, ip
 800d244:	bf88      	it	hi
 800d246:	2304      	movhi	r3, #4
 800d248:	50ca      	str	r2, [r1, r3]
 800d24a:	b10a      	cbz	r2, 800d250 <__lshift+0xa4>
 800d24c:	f108 0602 	add.w	r6, r8, #2
 800d250:	3e01      	subs	r6, #1
 800d252:	4638      	mov	r0, r7
 800d254:	4621      	mov	r1, r4
 800d256:	612e      	str	r6, [r5, #16]
 800d258:	f7ff fd98 	bl	800cd8c <_Bfree>
 800d25c:	4628      	mov	r0, r5
 800d25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d262:	f842 0f04 	str.w	r0, [r2, #4]!
 800d266:	3301      	adds	r3, #1
 800d268:	e7c5      	b.n	800d1f6 <__lshift+0x4a>
 800d26a:	3904      	subs	r1, #4
 800d26c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d270:	459c      	cmp	ip, r3
 800d272:	f841 2f04 	str.w	r2, [r1, #4]!
 800d276:	d8f9      	bhi.n	800d26c <__lshift+0xc0>
 800d278:	e7ea      	b.n	800d250 <__lshift+0xa4>
 800d27a:	bf00      	nop
 800d27c:	0800e35e 	.word	0x0800e35e
 800d280:	0800e3cf 	.word	0x0800e3cf

0800d284 <__mcmp>:
 800d284:	4603      	mov	r3, r0
 800d286:	690a      	ldr	r2, [r1, #16]
 800d288:	6900      	ldr	r0, [r0, #16]
 800d28a:	b530      	push	{r4, r5, lr}
 800d28c:	1a80      	subs	r0, r0, r2
 800d28e:	d10e      	bne.n	800d2ae <__mcmp+0x2a>
 800d290:	3314      	adds	r3, #20
 800d292:	3114      	adds	r1, #20
 800d294:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d298:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d29c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2a4:	4295      	cmp	r5, r2
 800d2a6:	d003      	beq.n	800d2b0 <__mcmp+0x2c>
 800d2a8:	d205      	bcs.n	800d2b6 <__mcmp+0x32>
 800d2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ae:	bd30      	pop	{r4, r5, pc}
 800d2b0:	42a3      	cmp	r3, r4
 800d2b2:	d3f3      	bcc.n	800d29c <__mcmp+0x18>
 800d2b4:	e7fb      	b.n	800d2ae <__mcmp+0x2a>
 800d2b6:	2001      	movs	r0, #1
 800d2b8:	e7f9      	b.n	800d2ae <__mcmp+0x2a>
	...

0800d2bc <__mdiff>:
 800d2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c0:	4689      	mov	r9, r1
 800d2c2:	4606      	mov	r6, r0
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	4648      	mov	r0, r9
 800d2c8:	4614      	mov	r4, r2
 800d2ca:	f7ff ffdb 	bl	800d284 <__mcmp>
 800d2ce:	1e05      	subs	r5, r0, #0
 800d2d0:	d112      	bne.n	800d2f8 <__mdiff+0x3c>
 800d2d2:	4629      	mov	r1, r5
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	f7ff fd19 	bl	800cd0c <_Balloc>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	b928      	cbnz	r0, 800d2ea <__mdiff+0x2e>
 800d2de:	f240 2137 	movw	r1, #567	@ 0x237
 800d2e2:	4b3e      	ldr	r3, [pc, #248]	@ (800d3dc <__mdiff+0x120>)
 800d2e4:	483e      	ldr	r0, [pc, #248]	@ (800d3e0 <__mdiff+0x124>)
 800d2e6:	f7fe fa4d 	bl	800b784 <__assert_func>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	b003      	add	sp, #12
 800d2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f8:	bfbc      	itt	lt
 800d2fa:	464b      	movlt	r3, r9
 800d2fc:	46a1      	movlt	r9, r4
 800d2fe:	4630      	mov	r0, r6
 800d300:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d304:	bfba      	itte	lt
 800d306:	461c      	movlt	r4, r3
 800d308:	2501      	movlt	r5, #1
 800d30a:	2500      	movge	r5, #0
 800d30c:	f7ff fcfe 	bl	800cd0c <_Balloc>
 800d310:	4602      	mov	r2, r0
 800d312:	b918      	cbnz	r0, 800d31c <__mdiff+0x60>
 800d314:	f240 2145 	movw	r1, #581	@ 0x245
 800d318:	4b30      	ldr	r3, [pc, #192]	@ (800d3dc <__mdiff+0x120>)
 800d31a:	e7e3      	b.n	800d2e4 <__mdiff+0x28>
 800d31c:	f100 0b14 	add.w	fp, r0, #20
 800d320:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d324:	f109 0310 	add.w	r3, r9, #16
 800d328:	60c5      	str	r5, [r0, #12]
 800d32a:	f04f 0c00 	mov.w	ip, #0
 800d32e:	f109 0514 	add.w	r5, r9, #20
 800d332:	46d9      	mov	r9, fp
 800d334:	6926      	ldr	r6, [r4, #16]
 800d336:	f104 0e14 	add.w	lr, r4, #20
 800d33a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d33e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d342:	9301      	str	r3, [sp, #4]
 800d344:	9b01      	ldr	r3, [sp, #4]
 800d346:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d34a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d34e:	b281      	uxth	r1, r0
 800d350:	9301      	str	r3, [sp, #4]
 800d352:	fa1f f38a 	uxth.w	r3, sl
 800d356:	1a5b      	subs	r3, r3, r1
 800d358:	0c00      	lsrs	r0, r0, #16
 800d35a:	4463      	add	r3, ip
 800d35c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d360:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d364:	b29b      	uxth	r3, r3
 800d366:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d36a:	4576      	cmp	r6, lr
 800d36c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d370:	f849 3b04 	str.w	r3, [r9], #4
 800d374:	d8e6      	bhi.n	800d344 <__mdiff+0x88>
 800d376:	1b33      	subs	r3, r6, r4
 800d378:	3b15      	subs	r3, #21
 800d37a:	f023 0303 	bic.w	r3, r3, #3
 800d37e:	3415      	adds	r4, #21
 800d380:	3304      	adds	r3, #4
 800d382:	42a6      	cmp	r6, r4
 800d384:	bf38      	it	cc
 800d386:	2304      	movcc	r3, #4
 800d388:	441d      	add	r5, r3
 800d38a:	445b      	add	r3, fp
 800d38c:	461e      	mov	r6, r3
 800d38e:	462c      	mov	r4, r5
 800d390:	4544      	cmp	r4, r8
 800d392:	d30e      	bcc.n	800d3b2 <__mdiff+0xf6>
 800d394:	f108 0103 	add.w	r1, r8, #3
 800d398:	1b49      	subs	r1, r1, r5
 800d39a:	f021 0103 	bic.w	r1, r1, #3
 800d39e:	3d03      	subs	r5, #3
 800d3a0:	45a8      	cmp	r8, r5
 800d3a2:	bf38      	it	cc
 800d3a4:	2100      	movcc	r1, #0
 800d3a6:	440b      	add	r3, r1
 800d3a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3ac:	b199      	cbz	r1, 800d3d6 <__mdiff+0x11a>
 800d3ae:	6117      	str	r7, [r2, #16]
 800d3b0:	e79e      	b.n	800d2f0 <__mdiff+0x34>
 800d3b2:	46e6      	mov	lr, ip
 800d3b4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3b8:	fa1f fc81 	uxth.w	ip, r1
 800d3bc:	44f4      	add	ip, lr
 800d3be:	0c08      	lsrs	r0, r1, #16
 800d3c0:	4471      	add	r1, lr
 800d3c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d3c6:	b289      	uxth	r1, r1
 800d3c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d3cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3d0:	f846 1b04 	str.w	r1, [r6], #4
 800d3d4:	e7dc      	b.n	800d390 <__mdiff+0xd4>
 800d3d6:	3f01      	subs	r7, #1
 800d3d8:	e7e6      	b.n	800d3a8 <__mdiff+0xec>
 800d3da:	bf00      	nop
 800d3dc:	0800e35e 	.word	0x0800e35e
 800d3e0:	0800e3cf 	.word	0x0800e3cf

0800d3e4 <__ulp>:
 800d3e4:	4b0e      	ldr	r3, [pc, #56]	@ (800d420 <__ulp+0x3c>)
 800d3e6:	400b      	ands	r3, r1
 800d3e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	dc08      	bgt.n	800d402 <__ulp+0x1e>
 800d3f0:	425b      	negs	r3, r3
 800d3f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d3f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d3fa:	da04      	bge.n	800d406 <__ulp+0x22>
 800d3fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d400:	4113      	asrs	r3, r2
 800d402:	2200      	movs	r2, #0
 800d404:	e008      	b.n	800d418 <__ulp+0x34>
 800d406:	f1a2 0314 	sub.w	r3, r2, #20
 800d40a:	2b1e      	cmp	r3, #30
 800d40c:	bfd6      	itet	le
 800d40e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d412:	2201      	movgt	r2, #1
 800d414:	40da      	lsrle	r2, r3
 800d416:	2300      	movs	r3, #0
 800d418:	4619      	mov	r1, r3
 800d41a:	4610      	mov	r0, r2
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	7ff00000 	.word	0x7ff00000

0800d424 <__b2d>:
 800d424:	6902      	ldr	r2, [r0, #16]
 800d426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d428:	f100 0614 	add.w	r6, r0, #20
 800d42c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d430:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d434:	4f1e      	ldr	r7, [pc, #120]	@ (800d4b0 <__b2d+0x8c>)
 800d436:	4620      	mov	r0, r4
 800d438:	f7ff fd5a 	bl	800cef0 <__hi0bits>
 800d43c:	4603      	mov	r3, r0
 800d43e:	f1c0 0020 	rsb	r0, r0, #32
 800d442:	2b0a      	cmp	r3, #10
 800d444:	f1a2 0504 	sub.w	r5, r2, #4
 800d448:	6008      	str	r0, [r1, #0]
 800d44a:	dc12      	bgt.n	800d472 <__b2d+0x4e>
 800d44c:	42ae      	cmp	r6, r5
 800d44e:	bf2c      	ite	cs
 800d450:	2200      	movcs	r2, #0
 800d452:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d456:	f1c3 0c0b 	rsb	ip, r3, #11
 800d45a:	3315      	adds	r3, #21
 800d45c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d460:	fa04 f303 	lsl.w	r3, r4, r3
 800d464:	fa22 f20c 	lsr.w	r2, r2, ip
 800d468:	ea4e 0107 	orr.w	r1, lr, r7
 800d46c:	431a      	orrs	r2, r3
 800d46e:	4610      	mov	r0, r2
 800d470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d472:	42ae      	cmp	r6, r5
 800d474:	bf36      	itet	cc
 800d476:	f1a2 0508 	subcc.w	r5, r2, #8
 800d47a:	2200      	movcs	r2, #0
 800d47c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d480:	3b0b      	subs	r3, #11
 800d482:	d012      	beq.n	800d4aa <__b2d+0x86>
 800d484:	f1c3 0720 	rsb	r7, r3, #32
 800d488:	fa22 f107 	lsr.w	r1, r2, r7
 800d48c:	409c      	lsls	r4, r3
 800d48e:	430c      	orrs	r4, r1
 800d490:	42b5      	cmp	r5, r6
 800d492:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d496:	bf94      	ite	ls
 800d498:	2400      	movls	r4, #0
 800d49a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d49e:	409a      	lsls	r2, r3
 800d4a0:	40fc      	lsrs	r4, r7
 800d4a2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d4a6:	4322      	orrs	r2, r4
 800d4a8:	e7e1      	b.n	800d46e <__b2d+0x4a>
 800d4aa:	ea44 0107 	orr.w	r1, r4, r7
 800d4ae:	e7de      	b.n	800d46e <__b2d+0x4a>
 800d4b0:	3ff00000 	.word	0x3ff00000

0800d4b4 <__d2b>:
 800d4b4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d4b8:	2101      	movs	r1, #1
 800d4ba:	4690      	mov	r8, r2
 800d4bc:	4699      	mov	r9, r3
 800d4be:	9e08      	ldr	r6, [sp, #32]
 800d4c0:	f7ff fc24 	bl	800cd0c <_Balloc>
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	b930      	cbnz	r0, 800d4d6 <__d2b+0x22>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	f240 310f 	movw	r1, #783	@ 0x30f
 800d4ce:	4b23      	ldr	r3, [pc, #140]	@ (800d55c <__d2b+0xa8>)
 800d4d0:	4823      	ldr	r0, [pc, #140]	@ (800d560 <__d2b+0xac>)
 800d4d2:	f7fe f957 	bl	800b784 <__assert_func>
 800d4d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d4da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4de:	b10d      	cbz	r5, 800d4e4 <__d2b+0x30>
 800d4e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d4e4:	9301      	str	r3, [sp, #4]
 800d4e6:	f1b8 0300 	subs.w	r3, r8, #0
 800d4ea:	d024      	beq.n	800d536 <__d2b+0x82>
 800d4ec:	4668      	mov	r0, sp
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	f7ff fd1d 	bl	800cf2e <__lo0bits>
 800d4f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d4f8:	b1d8      	cbz	r0, 800d532 <__d2b+0x7e>
 800d4fa:	f1c0 0320 	rsb	r3, r0, #32
 800d4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d502:	430b      	orrs	r3, r1
 800d504:	40c2      	lsrs	r2, r0
 800d506:	6163      	str	r3, [r4, #20]
 800d508:	9201      	str	r2, [sp, #4]
 800d50a:	9b01      	ldr	r3, [sp, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bf0c      	ite	eq
 800d510:	2201      	moveq	r2, #1
 800d512:	2202      	movne	r2, #2
 800d514:	61a3      	str	r3, [r4, #24]
 800d516:	6122      	str	r2, [r4, #16]
 800d518:	b1ad      	cbz	r5, 800d546 <__d2b+0x92>
 800d51a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d51e:	4405      	add	r5, r0
 800d520:	6035      	str	r5, [r6, #0]
 800d522:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d528:	6018      	str	r0, [r3, #0]
 800d52a:	4620      	mov	r0, r4
 800d52c:	b002      	add	sp, #8
 800d52e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d532:	6161      	str	r1, [r4, #20]
 800d534:	e7e9      	b.n	800d50a <__d2b+0x56>
 800d536:	a801      	add	r0, sp, #4
 800d538:	f7ff fcf9 	bl	800cf2e <__lo0bits>
 800d53c:	9b01      	ldr	r3, [sp, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	6163      	str	r3, [r4, #20]
 800d542:	3020      	adds	r0, #32
 800d544:	e7e7      	b.n	800d516 <__d2b+0x62>
 800d546:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d54a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d54e:	6030      	str	r0, [r6, #0]
 800d550:	6918      	ldr	r0, [r3, #16]
 800d552:	f7ff fccd 	bl	800cef0 <__hi0bits>
 800d556:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d55a:	e7e4      	b.n	800d526 <__d2b+0x72>
 800d55c:	0800e35e 	.word	0x0800e35e
 800d560:	0800e3cf 	.word	0x0800e3cf

0800d564 <__ratio>:
 800d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	b085      	sub	sp, #20
 800d56a:	e9cd 1000 	strd	r1, r0, [sp]
 800d56e:	a902      	add	r1, sp, #8
 800d570:	f7ff ff58 	bl	800d424 <__b2d>
 800d574:	468b      	mov	fp, r1
 800d576:	4606      	mov	r6, r0
 800d578:	460f      	mov	r7, r1
 800d57a:	9800      	ldr	r0, [sp, #0]
 800d57c:	a903      	add	r1, sp, #12
 800d57e:	f7ff ff51 	bl	800d424 <__b2d>
 800d582:	460d      	mov	r5, r1
 800d584:	9b01      	ldr	r3, [sp, #4]
 800d586:	4689      	mov	r9, r1
 800d588:	6919      	ldr	r1, [r3, #16]
 800d58a:	9b00      	ldr	r3, [sp, #0]
 800d58c:	4604      	mov	r4, r0
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	4630      	mov	r0, r6
 800d592:	1ac9      	subs	r1, r1, r3
 800d594:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d598:	1a9b      	subs	r3, r3, r2
 800d59a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	bfcd      	iteet	gt
 800d5a2:	463a      	movgt	r2, r7
 800d5a4:	462a      	movle	r2, r5
 800d5a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d5aa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d5ae:	bfd8      	it	le
 800d5b0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d5b4:	464b      	mov	r3, r9
 800d5b6:	4622      	mov	r2, r4
 800d5b8:	4659      	mov	r1, fp
 800d5ba:	f7f3 f8b7 	bl	800072c <__aeabi_ddiv>
 800d5be:	b005      	add	sp, #20
 800d5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5c4 <__copybits>:
 800d5c4:	3901      	subs	r1, #1
 800d5c6:	b570      	push	{r4, r5, r6, lr}
 800d5c8:	1149      	asrs	r1, r1, #5
 800d5ca:	6914      	ldr	r4, [r2, #16]
 800d5cc:	3101      	adds	r1, #1
 800d5ce:	f102 0314 	add.w	r3, r2, #20
 800d5d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d5d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d5da:	1f05      	subs	r5, r0, #4
 800d5dc:	42a3      	cmp	r3, r4
 800d5de:	d30c      	bcc.n	800d5fa <__copybits+0x36>
 800d5e0:	1aa3      	subs	r3, r4, r2
 800d5e2:	3b11      	subs	r3, #17
 800d5e4:	f023 0303 	bic.w	r3, r3, #3
 800d5e8:	3211      	adds	r2, #17
 800d5ea:	42a2      	cmp	r2, r4
 800d5ec:	bf88      	it	hi
 800d5ee:	2300      	movhi	r3, #0
 800d5f0:	4418      	add	r0, r3
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	4288      	cmp	r0, r1
 800d5f6:	d305      	bcc.n	800d604 <__copybits+0x40>
 800d5f8:	bd70      	pop	{r4, r5, r6, pc}
 800d5fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800d602:	e7eb      	b.n	800d5dc <__copybits+0x18>
 800d604:	f840 3b04 	str.w	r3, [r0], #4
 800d608:	e7f4      	b.n	800d5f4 <__copybits+0x30>

0800d60a <__any_on>:
 800d60a:	f100 0214 	add.w	r2, r0, #20
 800d60e:	6900      	ldr	r0, [r0, #16]
 800d610:	114b      	asrs	r3, r1, #5
 800d612:	4298      	cmp	r0, r3
 800d614:	b510      	push	{r4, lr}
 800d616:	db11      	blt.n	800d63c <__any_on+0x32>
 800d618:	dd0a      	ble.n	800d630 <__any_on+0x26>
 800d61a:	f011 011f 	ands.w	r1, r1, #31
 800d61e:	d007      	beq.n	800d630 <__any_on+0x26>
 800d620:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d624:	fa24 f001 	lsr.w	r0, r4, r1
 800d628:	fa00 f101 	lsl.w	r1, r0, r1
 800d62c:	428c      	cmp	r4, r1
 800d62e:	d10b      	bne.n	800d648 <__any_on+0x3e>
 800d630:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d634:	4293      	cmp	r3, r2
 800d636:	d803      	bhi.n	800d640 <__any_on+0x36>
 800d638:	2000      	movs	r0, #0
 800d63a:	bd10      	pop	{r4, pc}
 800d63c:	4603      	mov	r3, r0
 800d63e:	e7f7      	b.n	800d630 <__any_on+0x26>
 800d640:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d644:	2900      	cmp	r1, #0
 800d646:	d0f5      	beq.n	800d634 <__any_on+0x2a>
 800d648:	2001      	movs	r0, #1
 800d64a:	e7f6      	b.n	800d63a <__any_on+0x30>

0800d64c <__ascii_wctomb>:
 800d64c:	4603      	mov	r3, r0
 800d64e:	4608      	mov	r0, r1
 800d650:	b141      	cbz	r1, 800d664 <__ascii_wctomb+0x18>
 800d652:	2aff      	cmp	r2, #255	@ 0xff
 800d654:	d904      	bls.n	800d660 <__ascii_wctomb+0x14>
 800d656:	228a      	movs	r2, #138	@ 0x8a
 800d658:	f04f 30ff 	mov.w	r0, #4294967295
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	4770      	bx	lr
 800d660:	2001      	movs	r0, #1
 800d662:	700a      	strb	r2, [r1, #0]
 800d664:	4770      	bx	lr

0800d666 <__ssputs_r>:
 800d666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d66a:	461f      	mov	r7, r3
 800d66c:	688e      	ldr	r6, [r1, #8]
 800d66e:	4682      	mov	sl, r0
 800d670:	42be      	cmp	r6, r7
 800d672:	460c      	mov	r4, r1
 800d674:	4690      	mov	r8, r2
 800d676:	680b      	ldr	r3, [r1, #0]
 800d678:	d82d      	bhi.n	800d6d6 <__ssputs_r+0x70>
 800d67a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d67e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d682:	d026      	beq.n	800d6d2 <__ssputs_r+0x6c>
 800d684:	6965      	ldr	r5, [r4, #20]
 800d686:	6909      	ldr	r1, [r1, #16]
 800d688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d68c:	eba3 0901 	sub.w	r9, r3, r1
 800d690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d694:	1c7b      	adds	r3, r7, #1
 800d696:	444b      	add	r3, r9
 800d698:	106d      	asrs	r5, r5, #1
 800d69a:	429d      	cmp	r5, r3
 800d69c:	bf38      	it	cc
 800d69e:	461d      	movcc	r5, r3
 800d6a0:	0553      	lsls	r3, r2, #21
 800d6a2:	d527      	bpl.n	800d6f4 <__ssputs_r+0x8e>
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	f7ff fa93 	bl	800cbd0 <_malloc_r>
 800d6aa:	4606      	mov	r6, r0
 800d6ac:	b360      	cbz	r0, 800d708 <__ssputs_r+0xa2>
 800d6ae:	464a      	mov	r2, r9
 800d6b0:	6921      	ldr	r1, [r4, #16]
 800d6b2:	f7fe f84e 	bl	800b752 <memcpy>
 800d6b6:	89a3      	ldrh	r3, [r4, #12]
 800d6b8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d6bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6c0:	81a3      	strh	r3, [r4, #12]
 800d6c2:	6126      	str	r6, [r4, #16]
 800d6c4:	444e      	add	r6, r9
 800d6c6:	6026      	str	r6, [r4, #0]
 800d6c8:	463e      	mov	r6, r7
 800d6ca:	6165      	str	r5, [r4, #20]
 800d6cc:	eba5 0509 	sub.w	r5, r5, r9
 800d6d0:	60a5      	str	r5, [r4, #8]
 800d6d2:	42be      	cmp	r6, r7
 800d6d4:	d900      	bls.n	800d6d8 <__ssputs_r+0x72>
 800d6d6:	463e      	mov	r6, r7
 800d6d8:	4632      	mov	r2, r6
 800d6da:	4641      	mov	r1, r8
 800d6dc:	6820      	ldr	r0, [r4, #0]
 800d6de:	f000 f9d3 	bl	800da88 <memmove>
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	68a3      	ldr	r3, [r4, #8]
 800d6e6:	1b9b      	subs	r3, r3, r6
 800d6e8:	60a3      	str	r3, [r4, #8]
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	4433      	add	r3, r6
 800d6ee:	6023      	str	r3, [r4, #0]
 800d6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f4:	462a      	mov	r2, r5
 800d6f6:	f000 fa0c 	bl	800db12 <_realloc_r>
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d1e0      	bne.n	800d6c2 <__ssputs_r+0x5c>
 800d700:	4650      	mov	r0, sl
 800d702:	6921      	ldr	r1, [r4, #16]
 800d704:	f7fe feb8 	bl	800c478 <_free_r>
 800d708:	230c      	movs	r3, #12
 800d70a:	f8ca 3000 	str.w	r3, [sl]
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	e7e9      	b.n	800d6f0 <__ssputs_r+0x8a>

0800d71c <_svfiprintf_r>:
 800d71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d720:	4698      	mov	r8, r3
 800d722:	898b      	ldrh	r3, [r1, #12]
 800d724:	4607      	mov	r7, r0
 800d726:	061b      	lsls	r3, r3, #24
 800d728:	460d      	mov	r5, r1
 800d72a:	4614      	mov	r4, r2
 800d72c:	b09d      	sub	sp, #116	@ 0x74
 800d72e:	d510      	bpl.n	800d752 <_svfiprintf_r+0x36>
 800d730:	690b      	ldr	r3, [r1, #16]
 800d732:	b973      	cbnz	r3, 800d752 <_svfiprintf_r+0x36>
 800d734:	2140      	movs	r1, #64	@ 0x40
 800d736:	f7ff fa4b 	bl	800cbd0 <_malloc_r>
 800d73a:	6028      	str	r0, [r5, #0]
 800d73c:	6128      	str	r0, [r5, #16]
 800d73e:	b930      	cbnz	r0, 800d74e <_svfiprintf_r+0x32>
 800d740:	230c      	movs	r3, #12
 800d742:	603b      	str	r3, [r7, #0]
 800d744:	f04f 30ff 	mov.w	r0, #4294967295
 800d748:	b01d      	add	sp, #116	@ 0x74
 800d74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74e:	2340      	movs	r3, #64	@ 0x40
 800d750:	616b      	str	r3, [r5, #20]
 800d752:	2300      	movs	r3, #0
 800d754:	9309      	str	r3, [sp, #36]	@ 0x24
 800d756:	2320      	movs	r3, #32
 800d758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d75c:	2330      	movs	r3, #48	@ 0x30
 800d75e:	f04f 0901 	mov.w	r9, #1
 800d762:	f8cd 800c 	str.w	r8, [sp, #12]
 800d766:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d900 <_svfiprintf_r+0x1e4>
 800d76a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d76e:	4623      	mov	r3, r4
 800d770:	469a      	mov	sl, r3
 800d772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d776:	b10a      	cbz	r2, 800d77c <_svfiprintf_r+0x60>
 800d778:	2a25      	cmp	r2, #37	@ 0x25
 800d77a:	d1f9      	bne.n	800d770 <_svfiprintf_r+0x54>
 800d77c:	ebba 0b04 	subs.w	fp, sl, r4
 800d780:	d00b      	beq.n	800d79a <_svfiprintf_r+0x7e>
 800d782:	465b      	mov	r3, fp
 800d784:	4622      	mov	r2, r4
 800d786:	4629      	mov	r1, r5
 800d788:	4638      	mov	r0, r7
 800d78a:	f7ff ff6c 	bl	800d666 <__ssputs_r>
 800d78e:	3001      	adds	r0, #1
 800d790:	f000 80a7 	beq.w	800d8e2 <_svfiprintf_r+0x1c6>
 800d794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d796:	445a      	add	r2, fp
 800d798:	9209      	str	r2, [sp, #36]	@ 0x24
 800d79a:	f89a 3000 	ldrb.w	r3, [sl]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 809f 	beq.w	800d8e2 <_svfiprintf_r+0x1c6>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7ae:	f10a 0a01 	add.w	sl, sl, #1
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	9307      	str	r3, [sp, #28]
 800d7b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7bc:	4654      	mov	r4, sl
 800d7be:	2205      	movs	r2, #5
 800d7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c4:	484e      	ldr	r0, [pc, #312]	@ (800d900 <_svfiprintf_r+0x1e4>)
 800d7c6:	f7fd ffb6 	bl	800b736 <memchr>
 800d7ca:	9a04      	ldr	r2, [sp, #16]
 800d7cc:	b9d8      	cbnz	r0, 800d806 <_svfiprintf_r+0xea>
 800d7ce:	06d0      	lsls	r0, r2, #27
 800d7d0:	bf44      	itt	mi
 800d7d2:	2320      	movmi	r3, #32
 800d7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7d8:	0711      	lsls	r1, r2, #28
 800d7da:	bf44      	itt	mi
 800d7dc:	232b      	movmi	r3, #43	@ 0x2b
 800d7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7e8:	d015      	beq.n	800d816 <_svfiprintf_r+0xfa>
 800d7ea:	4654      	mov	r4, sl
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	f04f 0c0a 	mov.w	ip, #10
 800d7f2:	9a07      	ldr	r2, [sp, #28]
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7fa:	3b30      	subs	r3, #48	@ 0x30
 800d7fc:	2b09      	cmp	r3, #9
 800d7fe:	d94b      	bls.n	800d898 <_svfiprintf_r+0x17c>
 800d800:	b1b0      	cbz	r0, 800d830 <_svfiprintf_r+0x114>
 800d802:	9207      	str	r2, [sp, #28]
 800d804:	e014      	b.n	800d830 <_svfiprintf_r+0x114>
 800d806:	eba0 0308 	sub.w	r3, r0, r8
 800d80a:	fa09 f303 	lsl.w	r3, r9, r3
 800d80e:	4313      	orrs	r3, r2
 800d810:	46a2      	mov	sl, r4
 800d812:	9304      	str	r3, [sp, #16]
 800d814:	e7d2      	b.n	800d7bc <_svfiprintf_r+0xa0>
 800d816:	9b03      	ldr	r3, [sp, #12]
 800d818:	1d19      	adds	r1, r3, #4
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	9103      	str	r1, [sp, #12]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bfbb      	ittet	lt
 800d822:	425b      	neglt	r3, r3
 800d824:	f042 0202 	orrlt.w	r2, r2, #2
 800d828:	9307      	strge	r3, [sp, #28]
 800d82a:	9307      	strlt	r3, [sp, #28]
 800d82c:	bfb8      	it	lt
 800d82e:	9204      	strlt	r2, [sp, #16]
 800d830:	7823      	ldrb	r3, [r4, #0]
 800d832:	2b2e      	cmp	r3, #46	@ 0x2e
 800d834:	d10a      	bne.n	800d84c <_svfiprintf_r+0x130>
 800d836:	7863      	ldrb	r3, [r4, #1]
 800d838:	2b2a      	cmp	r3, #42	@ 0x2a
 800d83a:	d132      	bne.n	800d8a2 <_svfiprintf_r+0x186>
 800d83c:	9b03      	ldr	r3, [sp, #12]
 800d83e:	3402      	adds	r4, #2
 800d840:	1d1a      	adds	r2, r3, #4
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	9203      	str	r2, [sp, #12]
 800d846:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d84a:	9305      	str	r3, [sp, #20]
 800d84c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d904 <_svfiprintf_r+0x1e8>
 800d850:	2203      	movs	r2, #3
 800d852:	4650      	mov	r0, sl
 800d854:	7821      	ldrb	r1, [r4, #0]
 800d856:	f7fd ff6e 	bl	800b736 <memchr>
 800d85a:	b138      	cbz	r0, 800d86c <_svfiprintf_r+0x150>
 800d85c:	2240      	movs	r2, #64	@ 0x40
 800d85e:	9b04      	ldr	r3, [sp, #16]
 800d860:	eba0 000a 	sub.w	r0, r0, sl
 800d864:	4082      	lsls	r2, r0
 800d866:	4313      	orrs	r3, r2
 800d868:	3401      	adds	r4, #1
 800d86a:	9304      	str	r3, [sp, #16]
 800d86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d870:	2206      	movs	r2, #6
 800d872:	4825      	ldr	r0, [pc, #148]	@ (800d908 <_svfiprintf_r+0x1ec>)
 800d874:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d878:	f7fd ff5d 	bl	800b736 <memchr>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d036      	beq.n	800d8ee <_svfiprintf_r+0x1d2>
 800d880:	4b22      	ldr	r3, [pc, #136]	@ (800d90c <_svfiprintf_r+0x1f0>)
 800d882:	bb1b      	cbnz	r3, 800d8cc <_svfiprintf_r+0x1b0>
 800d884:	9b03      	ldr	r3, [sp, #12]
 800d886:	3307      	adds	r3, #7
 800d888:	f023 0307 	bic.w	r3, r3, #7
 800d88c:	3308      	adds	r3, #8
 800d88e:	9303      	str	r3, [sp, #12]
 800d890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d892:	4433      	add	r3, r6
 800d894:	9309      	str	r3, [sp, #36]	@ 0x24
 800d896:	e76a      	b.n	800d76e <_svfiprintf_r+0x52>
 800d898:	460c      	mov	r4, r1
 800d89a:	2001      	movs	r0, #1
 800d89c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8a0:	e7a8      	b.n	800d7f4 <_svfiprintf_r+0xd8>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f04f 0c0a 	mov.w	ip, #10
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	3401      	adds	r4, #1
 800d8ac:	9305      	str	r3, [sp, #20]
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8b4:	3a30      	subs	r2, #48	@ 0x30
 800d8b6:	2a09      	cmp	r2, #9
 800d8b8:	d903      	bls.n	800d8c2 <_svfiprintf_r+0x1a6>
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d0c6      	beq.n	800d84c <_svfiprintf_r+0x130>
 800d8be:	9105      	str	r1, [sp, #20]
 800d8c0:	e7c4      	b.n	800d84c <_svfiprintf_r+0x130>
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8ca:	e7f0      	b.n	800d8ae <_svfiprintf_r+0x192>
 800d8cc:	ab03      	add	r3, sp, #12
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	462a      	mov	r2, r5
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	4b0e      	ldr	r3, [pc, #56]	@ (800d910 <_svfiprintf_r+0x1f4>)
 800d8d6:	a904      	add	r1, sp, #16
 800d8d8:	f7fd f948 	bl	800ab6c <_printf_float>
 800d8dc:	1c42      	adds	r2, r0, #1
 800d8de:	4606      	mov	r6, r0
 800d8e0:	d1d6      	bne.n	800d890 <_svfiprintf_r+0x174>
 800d8e2:	89ab      	ldrh	r3, [r5, #12]
 800d8e4:	065b      	lsls	r3, r3, #25
 800d8e6:	f53f af2d 	bmi.w	800d744 <_svfiprintf_r+0x28>
 800d8ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8ec:	e72c      	b.n	800d748 <_svfiprintf_r+0x2c>
 800d8ee:	ab03      	add	r3, sp, #12
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	462a      	mov	r2, r5
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	4b06      	ldr	r3, [pc, #24]	@ (800d910 <_svfiprintf_r+0x1f4>)
 800d8f8:	a904      	add	r1, sp, #16
 800d8fa:	f7fd fbd5 	bl	800b0a8 <_printf_i>
 800d8fe:	e7ed      	b.n	800d8dc <_svfiprintf_r+0x1c0>
 800d900:	0800e428 	.word	0x0800e428
 800d904:	0800e42e 	.word	0x0800e42e
 800d908:	0800e432 	.word	0x0800e432
 800d90c:	0800ab6d 	.word	0x0800ab6d
 800d910:	0800d667 	.word	0x0800d667

0800d914 <__sflush_r>:
 800d914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d91a:	0716      	lsls	r6, r2, #28
 800d91c:	4605      	mov	r5, r0
 800d91e:	460c      	mov	r4, r1
 800d920:	d454      	bmi.n	800d9cc <__sflush_r+0xb8>
 800d922:	684b      	ldr	r3, [r1, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	dc02      	bgt.n	800d92e <__sflush_r+0x1a>
 800d928:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	dd48      	ble.n	800d9c0 <__sflush_r+0xac>
 800d92e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d930:	2e00      	cmp	r6, #0
 800d932:	d045      	beq.n	800d9c0 <__sflush_r+0xac>
 800d934:	2300      	movs	r3, #0
 800d936:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d93a:	682f      	ldr	r7, [r5, #0]
 800d93c:	6a21      	ldr	r1, [r4, #32]
 800d93e:	602b      	str	r3, [r5, #0]
 800d940:	d030      	beq.n	800d9a4 <__sflush_r+0x90>
 800d942:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d944:	89a3      	ldrh	r3, [r4, #12]
 800d946:	0759      	lsls	r1, r3, #29
 800d948:	d505      	bpl.n	800d956 <__sflush_r+0x42>
 800d94a:	6863      	ldr	r3, [r4, #4]
 800d94c:	1ad2      	subs	r2, r2, r3
 800d94e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d950:	b10b      	cbz	r3, 800d956 <__sflush_r+0x42>
 800d952:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d954:	1ad2      	subs	r2, r2, r3
 800d956:	2300      	movs	r3, #0
 800d958:	4628      	mov	r0, r5
 800d95a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d95c:	6a21      	ldr	r1, [r4, #32]
 800d95e:	47b0      	blx	r6
 800d960:	1c43      	adds	r3, r0, #1
 800d962:	89a3      	ldrh	r3, [r4, #12]
 800d964:	d106      	bne.n	800d974 <__sflush_r+0x60>
 800d966:	6829      	ldr	r1, [r5, #0]
 800d968:	291d      	cmp	r1, #29
 800d96a:	d82b      	bhi.n	800d9c4 <__sflush_r+0xb0>
 800d96c:	4a28      	ldr	r2, [pc, #160]	@ (800da10 <__sflush_r+0xfc>)
 800d96e:	40ca      	lsrs	r2, r1
 800d970:	07d6      	lsls	r6, r2, #31
 800d972:	d527      	bpl.n	800d9c4 <__sflush_r+0xb0>
 800d974:	2200      	movs	r2, #0
 800d976:	6062      	str	r2, [r4, #4]
 800d978:	6922      	ldr	r2, [r4, #16]
 800d97a:	04d9      	lsls	r1, r3, #19
 800d97c:	6022      	str	r2, [r4, #0]
 800d97e:	d504      	bpl.n	800d98a <__sflush_r+0x76>
 800d980:	1c42      	adds	r2, r0, #1
 800d982:	d101      	bne.n	800d988 <__sflush_r+0x74>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	b903      	cbnz	r3, 800d98a <__sflush_r+0x76>
 800d988:	6560      	str	r0, [r4, #84]	@ 0x54
 800d98a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d98c:	602f      	str	r7, [r5, #0]
 800d98e:	b1b9      	cbz	r1, 800d9c0 <__sflush_r+0xac>
 800d990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d994:	4299      	cmp	r1, r3
 800d996:	d002      	beq.n	800d99e <__sflush_r+0x8a>
 800d998:	4628      	mov	r0, r5
 800d99a:	f7fe fd6d 	bl	800c478 <_free_r>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9a2:	e00d      	b.n	800d9c0 <__sflush_r+0xac>
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	47b0      	blx	r6
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	1c50      	adds	r0, r2, #1
 800d9ae:	d1c9      	bne.n	800d944 <__sflush_r+0x30>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d0c6      	beq.n	800d944 <__sflush_r+0x30>
 800d9b6:	2b1d      	cmp	r3, #29
 800d9b8:	d001      	beq.n	800d9be <__sflush_r+0xaa>
 800d9ba:	2b16      	cmp	r3, #22
 800d9bc:	d11d      	bne.n	800d9fa <__sflush_r+0xe6>
 800d9be:	602f      	str	r7, [r5, #0]
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	e021      	b.n	800da08 <__sflush_r+0xf4>
 800d9c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9c8:	b21b      	sxth	r3, r3
 800d9ca:	e01a      	b.n	800da02 <__sflush_r+0xee>
 800d9cc:	690f      	ldr	r7, [r1, #16]
 800d9ce:	2f00      	cmp	r7, #0
 800d9d0:	d0f6      	beq.n	800d9c0 <__sflush_r+0xac>
 800d9d2:	0793      	lsls	r3, r2, #30
 800d9d4:	bf18      	it	ne
 800d9d6:	2300      	movne	r3, #0
 800d9d8:	680e      	ldr	r6, [r1, #0]
 800d9da:	bf08      	it	eq
 800d9dc:	694b      	ldreq	r3, [r1, #20]
 800d9de:	1bf6      	subs	r6, r6, r7
 800d9e0:	600f      	str	r7, [r1, #0]
 800d9e2:	608b      	str	r3, [r1, #8]
 800d9e4:	2e00      	cmp	r6, #0
 800d9e6:	ddeb      	ble.n	800d9c0 <__sflush_r+0xac>
 800d9e8:	4633      	mov	r3, r6
 800d9ea:	463a      	mov	r2, r7
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	6a21      	ldr	r1, [r4, #32]
 800d9f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d9f4:	47e0      	blx	ip
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	dc07      	bgt.n	800da0a <__sflush_r+0xf6>
 800d9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da02:	f04f 30ff 	mov.w	r0, #4294967295
 800da06:	81a3      	strh	r3, [r4, #12]
 800da08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da0a:	4407      	add	r7, r0
 800da0c:	1a36      	subs	r6, r6, r0
 800da0e:	e7e9      	b.n	800d9e4 <__sflush_r+0xd0>
 800da10:	20400001 	.word	0x20400001

0800da14 <_fflush_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	690b      	ldr	r3, [r1, #16]
 800da18:	4605      	mov	r5, r0
 800da1a:	460c      	mov	r4, r1
 800da1c:	b913      	cbnz	r3, 800da24 <_fflush_r+0x10>
 800da1e:	2500      	movs	r5, #0
 800da20:	4628      	mov	r0, r5
 800da22:	bd38      	pop	{r3, r4, r5, pc}
 800da24:	b118      	cbz	r0, 800da2e <_fflush_r+0x1a>
 800da26:	6a03      	ldr	r3, [r0, #32]
 800da28:	b90b      	cbnz	r3, 800da2e <_fflush_r+0x1a>
 800da2a:	f7fd fce7 	bl	800b3fc <__sinit>
 800da2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d0f3      	beq.n	800da1e <_fflush_r+0xa>
 800da36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800da38:	07d0      	lsls	r0, r2, #31
 800da3a:	d404      	bmi.n	800da46 <_fflush_r+0x32>
 800da3c:	0599      	lsls	r1, r3, #22
 800da3e:	d402      	bmi.n	800da46 <_fflush_r+0x32>
 800da40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da42:	f7fd fe76 	bl	800b732 <__retarget_lock_acquire_recursive>
 800da46:	4628      	mov	r0, r5
 800da48:	4621      	mov	r1, r4
 800da4a:	f7ff ff63 	bl	800d914 <__sflush_r>
 800da4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da50:	4605      	mov	r5, r0
 800da52:	07da      	lsls	r2, r3, #31
 800da54:	d4e4      	bmi.n	800da20 <_fflush_r+0xc>
 800da56:	89a3      	ldrh	r3, [r4, #12]
 800da58:	059b      	lsls	r3, r3, #22
 800da5a:	d4e1      	bmi.n	800da20 <_fflush_r+0xc>
 800da5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da5e:	f7fd fe69 	bl	800b734 <__retarget_lock_release_recursive>
 800da62:	e7dd      	b.n	800da20 <_fflush_r+0xc>

0800da64 <fiprintf>:
 800da64:	b40e      	push	{r1, r2, r3}
 800da66:	b503      	push	{r0, r1, lr}
 800da68:	4601      	mov	r1, r0
 800da6a:	ab03      	add	r3, sp, #12
 800da6c:	4805      	ldr	r0, [pc, #20]	@ (800da84 <fiprintf+0x20>)
 800da6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800da72:	6800      	ldr	r0, [r0, #0]
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	f000 f8a1 	bl	800dbbc <_vfiprintf_r>
 800da7a:	b002      	add	sp, #8
 800da7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da80:	b003      	add	sp, #12
 800da82:	4770      	bx	lr
 800da84:	20000310 	.word	0x20000310

0800da88 <memmove>:
 800da88:	4288      	cmp	r0, r1
 800da8a:	b510      	push	{r4, lr}
 800da8c:	eb01 0402 	add.w	r4, r1, r2
 800da90:	d902      	bls.n	800da98 <memmove+0x10>
 800da92:	4284      	cmp	r4, r0
 800da94:	4623      	mov	r3, r4
 800da96:	d807      	bhi.n	800daa8 <memmove+0x20>
 800da98:	1e43      	subs	r3, r0, #1
 800da9a:	42a1      	cmp	r1, r4
 800da9c:	d008      	beq.n	800dab0 <memmove+0x28>
 800da9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800daa6:	e7f8      	b.n	800da9a <memmove+0x12>
 800daa8:	4601      	mov	r1, r0
 800daaa:	4402      	add	r2, r0
 800daac:	428a      	cmp	r2, r1
 800daae:	d100      	bne.n	800dab2 <memmove+0x2a>
 800dab0:	bd10      	pop	{r4, pc}
 800dab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daba:	e7f7      	b.n	800daac <memmove+0x24>

0800dabc <_sbrk_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	2300      	movs	r3, #0
 800dac0:	4d05      	ldr	r5, [pc, #20]	@ (800dad8 <_sbrk_r+0x1c>)
 800dac2:	4604      	mov	r4, r0
 800dac4:	4608      	mov	r0, r1
 800dac6:	602b      	str	r3, [r5, #0]
 800dac8:	f7f4 fbcc 	bl	8002264 <_sbrk>
 800dacc:	1c43      	adds	r3, r0, #1
 800dace:	d102      	bne.n	800dad6 <_sbrk_r+0x1a>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	b103      	cbz	r3, 800dad6 <_sbrk_r+0x1a>
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	20001894 	.word	0x20001894

0800dadc <abort>:
 800dadc:	2006      	movs	r0, #6
 800dade:	b508      	push	{r3, lr}
 800dae0:	f000 fa40 	bl	800df64 <raise>
 800dae4:	2001      	movs	r0, #1
 800dae6:	f7f4 fb48 	bl	800217a <_exit>

0800daea <_calloc_r>:
 800daea:	b570      	push	{r4, r5, r6, lr}
 800daec:	fba1 5402 	umull	r5, r4, r1, r2
 800daf0:	b934      	cbnz	r4, 800db00 <_calloc_r+0x16>
 800daf2:	4629      	mov	r1, r5
 800daf4:	f7ff f86c 	bl	800cbd0 <_malloc_r>
 800daf8:	4606      	mov	r6, r0
 800dafa:	b928      	cbnz	r0, 800db08 <_calloc_r+0x1e>
 800dafc:	4630      	mov	r0, r6
 800dafe:	bd70      	pop	{r4, r5, r6, pc}
 800db00:	220c      	movs	r2, #12
 800db02:	2600      	movs	r6, #0
 800db04:	6002      	str	r2, [r0, #0]
 800db06:	e7f9      	b.n	800dafc <_calloc_r+0x12>
 800db08:	462a      	mov	r2, r5
 800db0a:	4621      	mov	r1, r4
 800db0c:	f7fd fd25 	bl	800b55a <memset>
 800db10:	e7f4      	b.n	800dafc <_calloc_r+0x12>

0800db12 <_realloc_r>:
 800db12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db16:	4607      	mov	r7, r0
 800db18:	4614      	mov	r4, r2
 800db1a:	460d      	mov	r5, r1
 800db1c:	b921      	cbnz	r1, 800db28 <_realloc_r+0x16>
 800db1e:	4611      	mov	r1, r2
 800db20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db24:	f7ff b854 	b.w	800cbd0 <_malloc_r>
 800db28:	b92a      	cbnz	r2, 800db36 <_realloc_r+0x24>
 800db2a:	f7fe fca5 	bl	800c478 <_free_r>
 800db2e:	4625      	mov	r5, r4
 800db30:	4628      	mov	r0, r5
 800db32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db36:	f000 fa31 	bl	800df9c <_malloc_usable_size_r>
 800db3a:	4284      	cmp	r4, r0
 800db3c:	4606      	mov	r6, r0
 800db3e:	d802      	bhi.n	800db46 <_realloc_r+0x34>
 800db40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db44:	d8f4      	bhi.n	800db30 <_realloc_r+0x1e>
 800db46:	4621      	mov	r1, r4
 800db48:	4638      	mov	r0, r7
 800db4a:	f7ff f841 	bl	800cbd0 <_malloc_r>
 800db4e:	4680      	mov	r8, r0
 800db50:	b908      	cbnz	r0, 800db56 <_realloc_r+0x44>
 800db52:	4645      	mov	r5, r8
 800db54:	e7ec      	b.n	800db30 <_realloc_r+0x1e>
 800db56:	42b4      	cmp	r4, r6
 800db58:	4622      	mov	r2, r4
 800db5a:	4629      	mov	r1, r5
 800db5c:	bf28      	it	cs
 800db5e:	4632      	movcs	r2, r6
 800db60:	f7fd fdf7 	bl	800b752 <memcpy>
 800db64:	4629      	mov	r1, r5
 800db66:	4638      	mov	r0, r7
 800db68:	f7fe fc86 	bl	800c478 <_free_r>
 800db6c:	e7f1      	b.n	800db52 <_realloc_r+0x40>

0800db6e <__sfputc_r>:
 800db6e:	6893      	ldr	r3, [r2, #8]
 800db70:	b410      	push	{r4}
 800db72:	3b01      	subs	r3, #1
 800db74:	2b00      	cmp	r3, #0
 800db76:	6093      	str	r3, [r2, #8]
 800db78:	da07      	bge.n	800db8a <__sfputc_r+0x1c>
 800db7a:	6994      	ldr	r4, [r2, #24]
 800db7c:	42a3      	cmp	r3, r4
 800db7e:	db01      	blt.n	800db84 <__sfputc_r+0x16>
 800db80:	290a      	cmp	r1, #10
 800db82:	d102      	bne.n	800db8a <__sfputc_r+0x1c>
 800db84:	bc10      	pop	{r4}
 800db86:	f000 b931 	b.w	800ddec <__swbuf_r>
 800db8a:	6813      	ldr	r3, [r2, #0]
 800db8c:	1c58      	adds	r0, r3, #1
 800db8e:	6010      	str	r0, [r2, #0]
 800db90:	7019      	strb	r1, [r3, #0]
 800db92:	4608      	mov	r0, r1
 800db94:	bc10      	pop	{r4}
 800db96:	4770      	bx	lr

0800db98 <__sfputs_r>:
 800db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9a:	4606      	mov	r6, r0
 800db9c:	460f      	mov	r7, r1
 800db9e:	4614      	mov	r4, r2
 800dba0:	18d5      	adds	r5, r2, r3
 800dba2:	42ac      	cmp	r4, r5
 800dba4:	d101      	bne.n	800dbaa <__sfputs_r+0x12>
 800dba6:	2000      	movs	r0, #0
 800dba8:	e007      	b.n	800dbba <__sfputs_r+0x22>
 800dbaa:	463a      	mov	r2, r7
 800dbac:	4630      	mov	r0, r6
 800dbae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb2:	f7ff ffdc 	bl	800db6e <__sfputc_r>
 800dbb6:	1c43      	adds	r3, r0, #1
 800dbb8:	d1f3      	bne.n	800dba2 <__sfputs_r+0xa>
 800dbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dbbc <_vfiprintf_r>:
 800dbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc0:	460d      	mov	r5, r1
 800dbc2:	4614      	mov	r4, r2
 800dbc4:	4698      	mov	r8, r3
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	b09d      	sub	sp, #116	@ 0x74
 800dbca:	b118      	cbz	r0, 800dbd4 <_vfiprintf_r+0x18>
 800dbcc:	6a03      	ldr	r3, [r0, #32]
 800dbce:	b90b      	cbnz	r3, 800dbd4 <_vfiprintf_r+0x18>
 800dbd0:	f7fd fc14 	bl	800b3fc <__sinit>
 800dbd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbd6:	07d9      	lsls	r1, r3, #31
 800dbd8:	d405      	bmi.n	800dbe6 <_vfiprintf_r+0x2a>
 800dbda:	89ab      	ldrh	r3, [r5, #12]
 800dbdc:	059a      	lsls	r2, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_vfiprintf_r+0x2a>
 800dbe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbe2:	f7fd fda6 	bl	800b732 <__retarget_lock_acquire_recursive>
 800dbe6:	89ab      	ldrh	r3, [r5, #12]
 800dbe8:	071b      	lsls	r3, r3, #28
 800dbea:	d501      	bpl.n	800dbf0 <_vfiprintf_r+0x34>
 800dbec:	692b      	ldr	r3, [r5, #16]
 800dbee:	b99b      	cbnz	r3, 800dc18 <_vfiprintf_r+0x5c>
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f000 f938 	bl	800de68 <__swsetup_r>
 800dbf8:	b170      	cbz	r0, 800dc18 <_vfiprintf_r+0x5c>
 800dbfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbfc:	07dc      	lsls	r4, r3, #31
 800dbfe:	d504      	bpl.n	800dc0a <_vfiprintf_r+0x4e>
 800dc00:	f04f 30ff 	mov.w	r0, #4294967295
 800dc04:	b01d      	add	sp, #116	@ 0x74
 800dc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0a:	89ab      	ldrh	r3, [r5, #12]
 800dc0c:	0598      	lsls	r0, r3, #22
 800dc0e:	d4f7      	bmi.n	800dc00 <_vfiprintf_r+0x44>
 800dc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc12:	f7fd fd8f 	bl	800b734 <__retarget_lock_release_recursive>
 800dc16:	e7f3      	b.n	800dc00 <_vfiprintf_r+0x44>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc1c:	2320      	movs	r3, #32
 800dc1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc22:	2330      	movs	r3, #48	@ 0x30
 800dc24:	f04f 0901 	mov.w	r9, #1
 800dc28:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ddd8 <_vfiprintf_r+0x21c>
 800dc30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc34:	4623      	mov	r3, r4
 800dc36:	469a      	mov	sl, r3
 800dc38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc3c:	b10a      	cbz	r2, 800dc42 <_vfiprintf_r+0x86>
 800dc3e:	2a25      	cmp	r2, #37	@ 0x25
 800dc40:	d1f9      	bne.n	800dc36 <_vfiprintf_r+0x7a>
 800dc42:	ebba 0b04 	subs.w	fp, sl, r4
 800dc46:	d00b      	beq.n	800dc60 <_vfiprintf_r+0xa4>
 800dc48:	465b      	mov	r3, fp
 800dc4a:	4622      	mov	r2, r4
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f7ff ffa2 	bl	800db98 <__sfputs_r>
 800dc54:	3001      	adds	r0, #1
 800dc56:	f000 80a7 	beq.w	800dda8 <_vfiprintf_r+0x1ec>
 800dc5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc5c:	445a      	add	r2, fp
 800dc5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc60:	f89a 3000 	ldrb.w	r3, [sl]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 809f 	beq.w	800dda8 <_vfiprintf_r+0x1ec>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc74:	f10a 0a01 	add.w	sl, sl, #1
 800dc78:	9304      	str	r3, [sp, #16]
 800dc7a:	9307      	str	r3, [sp, #28]
 800dc7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc80:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc82:	4654      	mov	r4, sl
 800dc84:	2205      	movs	r2, #5
 800dc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8a:	4853      	ldr	r0, [pc, #332]	@ (800ddd8 <_vfiprintf_r+0x21c>)
 800dc8c:	f7fd fd53 	bl	800b736 <memchr>
 800dc90:	9a04      	ldr	r2, [sp, #16]
 800dc92:	b9d8      	cbnz	r0, 800dccc <_vfiprintf_r+0x110>
 800dc94:	06d1      	lsls	r1, r2, #27
 800dc96:	bf44      	itt	mi
 800dc98:	2320      	movmi	r3, #32
 800dc9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc9e:	0713      	lsls	r3, r2, #28
 800dca0:	bf44      	itt	mi
 800dca2:	232b      	movmi	r3, #43	@ 0x2b
 800dca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dca8:	f89a 3000 	ldrb.w	r3, [sl]
 800dcac:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcae:	d015      	beq.n	800dcdc <_vfiprintf_r+0x120>
 800dcb0:	4654      	mov	r4, sl
 800dcb2:	2000      	movs	r0, #0
 800dcb4:	f04f 0c0a 	mov.w	ip, #10
 800dcb8:	9a07      	ldr	r2, [sp, #28]
 800dcba:	4621      	mov	r1, r4
 800dcbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcc0:	3b30      	subs	r3, #48	@ 0x30
 800dcc2:	2b09      	cmp	r3, #9
 800dcc4:	d94b      	bls.n	800dd5e <_vfiprintf_r+0x1a2>
 800dcc6:	b1b0      	cbz	r0, 800dcf6 <_vfiprintf_r+0x13a>
 800dcc8:	9207      	str	r2, [sp, #28]
 800dcca:	e014      	b.n	800dcf6 <_vfiprintf_r+0x13a>
 800dccc:	eba0 0308 	sub.w	r3, r0, r8
 800dcd0:	fa09 f303 	lsl.w	r3, r9, r3
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	46a2      	mov	sl, r4
 800dcd8:	9304      	str	r3, [sp, #16]
 800dcda:	e7d2      	b.n	800dc82 <_vfiprintf_r+0xc6>
 800dcdc:	9b03      	ldr	r3, [sp, #12]
 800dcde:	1d19      	adds	r1, r3, #4
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	9103      	str	r1, [sp, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	bfbb      	ittet	lt
 800dce8:	425b      	neglt	r3, r3
 800dcea:	f042 0202 	orrlt.w	r2, r2, #2
 800dcee:	9307      	strge	r3, [sp, #28]
 800dcf0:	9307      	strlt	r3, [sp, #28]
 800dcf2:	bfb8      	it	lt
 800dcf4:	9204      	strlt	r2, [sp, #16]
 800dcf6:	7823      	ldrb	r3, [r4, #0]
 800dcf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcfa:	d10a      	bne.n	800dd12 <_vfiprintf_r+0x156>
 800dcfc:	7863      	ldrb	r3, [r4, #1]
 800dcfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd00:	d132      	bne.n	800dd68 <_vfiprintf_r+0x1ac>
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	3402      	adds	r4, #2
 800dd06:	1d1a      	adds	r2, r3, #4
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	9203      	str	r2, [sp, #12]
 800dd0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd10:	9305      	str	r3, [sp, #20]
 800dd12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800dddc <_vfiprintf_r+0x220>
 800dd16:	2203      	movs	r2, #3
 800dd18:	4650      	mov	r0, sl
 800dd1a:	7821      	ldrb	r1, [r4, #0]
 800dd1c:	f7fd fd0b 	bl	800b736 <memchr>
 800dd20:	b138      	cbz	r0, 800dd32 <_vfiprintf_r+0x176>
 800dd22:	2240      	movs	r2, #64	@ 0x40
 800dd24:	9b04      	ldr	r3, [sp, #16]
 800dd26:	eba0 000a 	sub.w	r0, r0, sl
 800dd2a:	4082      	lsls	r2, r0
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	3401      	adds	r4, #1
 800dd30:	9304      	str	r3, [sp, #16]
 800dd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd36:	2206      	movs	r2, #6
 800dd38:	4829      	ldr	r0, [pc, #164]	@ (800dde0 <_vfiprintf_r+0x224>)
 800dd3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd3e:	f7fd fcfa 	bl	800b736 <memchr>
 800dd42:	2800      	cmp	r0, #0
 800dd44:	d03f      	beq.n	800ddc6 <_vfiprintf_r+0x20a>
 800dd46:	4b27      	ldr	r3, [pc, #156]	@ (800dde4 <_vfiprintf_r+0x228>)
 800dd48:	bb1b      	cbnz	r3, 800dd92 <_vfiprintf_r+0x1d6>
 800dd4a:	9b03      	ldr	r3, [sp, #12]
 800dd4c:	3307      	adds	r3, #7
 800dd4e:	f023 0307 	bic.w	r3, r3, #7
 800dd52:	3308      	adds	r3, #8
 800dd54:	9303      	str	r3, [sp, #12]
 800dd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd58:	443b      	add	r3, r7
 800dd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd5c:	e76a      	b.n	800dc34 <_vfiprintf_r+0x78>
 800dd5e:	460c      	mov	r4, r1
 800dd60:	2001      	movs	r0, #1
 800dd62:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd66:	e7a8      	b.n	800dcba <_vfiprintf_r+0xfe>
 800dd68:	2300      	movs	r3, #0
 800dd6a:	f04f 0c0a 	mov.w	ip, #10
 800dd6e:	4619      	mov	r1, r3
 800dd70:	3401      	adds	r4, #1
 800dd72:	9305      	str	r3, [sp, #20]
 800dd74:	4620      	mov	r0, r4
 800dd76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd7a:	3a30      	subs	r2, #48	@ 0x30
 800dd7c:	2a09      	cmp	r2, #9
 800dd7e:	d903      	bls.n	800dd88 <_vfiprintf_r+0x1cc>
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d0c6      	beq.n	800dd12 <_vfiprintf_r+0x156>
 800dd84:	9105      	str	r1, [sp, #20]
 800dd86:	e7c4      	b.n	800dd12 <_vfiprintf_r+0x156>
 800dd88:	4604      	mov	r4, r0
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd90:	e7f0      	b.n	800dd74 <_vfiprintf_r+0x1b8>
 800dd92:	ab03      	add	r3, sp, #12
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	462a      	mov	r2, r5
 800dd98:	4630      	mov	r0, r6
 800dd9a:	4b13      	ldr	r3, [pc, #76]	@ (800dde8 <_vfiprintf_r+0x22c>)
 800dd9c:	a904      	add	r1, sp, #16
 800dd9e:	f7fc fee5 	bl	800ab6c <_printf_float>
 800dda2:	4607      	mov	r7, r0
 800dda4:	1c78      	adds	r0, r7, #1
 800dda6:	d1d6      	bne.n	800dd56 <_vfiprintf_r+0x19a>
 800dda8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddaa:	07d9      	lsls	r1, r3, #31
 800ddac:	d405      	bmi.n	800ddba <_vfiprintf_r+0x1fe>
 800ddae:	89ab      	ldrh	r3, [r5, #12]
 800ddb0:	059a      	lsls	r2, r3, #22
 800ddb2:	d402      	bmi.n	800ddba <_vfiprintf_r+0x1fe>
 800ddb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ddb6:	f7fd fcbd 	bl	800b734 <__retarget_lock_release_recursive>
 800ddba:	89ab      	ldrh	r3, [r5, #12]
 800ddbc:	065b      	lsls	r3, r3, #25
 800ddbe:	f53f af1f 	bmi.w	800dc00 <_vfiprintf_r+0x44>
 800ddc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddc4:	e71e      	b.n	800dc04 <_vfiprintf_r+0x48>
 800ddc6:	ab03      	add	r3, sp, #12
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	462a      	mov	r2, r5
 800ddcc:	4630      	mov	r0, r6
 800ddce:	4b06      	ldr	r3, [pc, #24]	@ (800dde8 <_vfiprintf_r+0x22c>)
 800ddd0:	a904      	add	r1, sp, #16
 800ddd2:	f7fd f969 	bl	800b0a8 <_printf_i>
 800ddd6:	e7e4      	b.n	800dda2 <_vfiprintf_r+0x1e6>
 800ddd8:	0800e428 	.word	0x0800e428
 800dddc:	0800e42e 	.word	0x0800e42e
 800dde0:	0800e432 	.word	0x0800e432
 800dde4:	0800ab6d 	.word	0x0800ab6d
 800dde8:	0800db99 	.word	0x0800db99

0800ddec <__swbuf_r>:
 800ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddee:	460e      	mov	r6, r1
 800ddf0:	4614      	mov	r4, r2
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	b118      	cbz	r0, 800ddfe <__swbuf_r+0x12>
 800ddf6:	6a03      	ldr	r3, [r0, #32]
 800ddf8:	b90b      	cbnz	r3, 800ddfe <__swbuf_r+0x12>
 800ddfa:	f7fd faff 	bl	800b3fc <__sinit>
 800ddfe:	69a3      	ldr	r3, [r4, #24]
 800de00:	60a3      	str	r3, [r4, #8]
 800de02:	89a3      	ldrh	r3, [r4, #12]
 800de04:	071a      	lsls	r2, r3, #28
 800de06:	d501      	bpl.n	800de0c <__swbuf_r+0x20>
 800de08:	6923      	ldr	r3, [r4, #16]
 800de0a:	b943      	cbnz	r3, 800de1e <__swbuf_r+0x32>
 800de0c:	4621      	mov	r1, r4
 800de0e:	4628      	mov	r0, r5
 800de10:	f000 f82a 	bl	800de68 <__swsetup_r>
 800de14:	b118      	cbz	r0, 800de1e <__swbuf_r+0x32>
 800de16:	f04f 37ff 	mov.w	r7, #4294967295
 800de1a:	4638      	mov	r0, r7
 800de1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	6922      	ldr	r2, [r4, #16]
 800de22:	b2f6      	uxtb	r6, r6
 800de24:	1a98      	subs	r0, r3, r2
 800de26:	6963      	ldr	r3, [r4, #20]
 800de28:	4637      	mov	r7, r6
 800de2a:	4283      	cmp	r3, r0
 800de2c:	dc05      	bgt.n	800de3a <__swbuf_r+0x4e>
 800de2e:	4621      	mov	r1, r4
 800de30:	4628      	mov	r0, r5
 800de32:	f7ff fdef 	bl	800da14 <_fflush_r>
 800de36:	2800      	cmp	r0, #0
 800de38:	d1ed      	bne.n	800de16 <__swbuf_r+0x2a>
 800de3a:	68a3      	ldr	r3, [r4, #8]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	60a3      	str	r3, [r4, #8]
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	1c5a      	adds	r2, r3, #1
 800de44:	6022      	str	r2, [r4, #0]
 800de46:	701e      	strb	r6, [r3, #0]
 800de48:	6962      	ldr	r2, [r4, #20]
 800de4a:	1c43      	adds	r3, r0, #1
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d004      	beq.n	800de5a <__swbuf_r+0x6e>
 800de50:	89a3      	ldrh	r3, [r4, #12]
 800de52:	07db      	lsls	r3, r3, #31
 800de54:	d5e1      	bpl.n	800de1a <__swbuf_r+0x2e>
 800de56:	2e0a      	cmp	r6, #10
 800de58:	d1df      	bne.n	800de1a <__swbuf_r+0x2e>
 800de5a:	4621      	mov	r1, r4
 800de5c:	4628      	mov	r0, r5
 800de5e:	f7ff fdd9 	bl	800da14 <_fflush_r>
 800de62:	2800      	cmp	r0, #0
 800de64:	d0d9      	beq.n	800de1a <__swbuf_r+0x2e>
 800de66:	e7d6      	b.n	800de16 <__swbuf_r+0x2a>

0800de68 <__swsetup_r>:
 800de68:	b538      	push	{r3, r4, r5, lr}
 800de6a:	4b29      	ldr	r3, [pc, #164]	@ (800df10 <__swsetup_r+0xa8>)
 800de6c:	4605      	mov	r5, r0
 800de6e:	6818      	ldr	r0, [r3, #0]
 800de70:	460c      	mov	r4, r1
 800de72:	b118      	cbz	r0, 800de7c <__swsetup_r+0x14>
 800de74:	6a03      	ldr	r3, [r0, #32]
 800de76:	b90b      	cbnz	r3, 800de7c <__swsetup_r+0x14>
 800de78:	f7fd fac0 	bl	800b3fc <__sinit>
 800de7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de80:	0719      	lsls	r1, r3, #28
 800de82:	d422      	bmi.n	800deca <__swsetup_r+0x62>
 800de84:	06da      	lsls	r2, r3, #27
 800de86:	d407      	bmi.n	800de98 <__swsetup_r+0x30>
 800de88:	2209      	movs	r2, #9
 800de8a:	602a      	str	r2, [r5, #0]
 800de8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de90:	f04f 30ff 	mov.w	r0, #4294967295
 800de94:	81a3      	strh	r3, [r4, #12]
 800de96:	e033      	b.n	800df00 <__swsetup_r+0x98>
 800de98:	0758      	lsls	r0, r3, #29
 800de9a:	d512      	bpl.n	800dec2 <__swsetup_r+0x5a>
 800de9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de9e:	b141      	cbz	r1, 800deb2 <__swsetup_r+0x4a>
 800dea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dea4:	4299      	cmp	r1, r3
 800dea6:	d002      	beq.n	800deae <__swsetup_r+0x46>
 800dea8:	4628      	mov	r0, r5
 800deaa:	f7fe fae5 	bl	800c478 <_free_r>
 800deae:	2300      	movs	r3, #0
 800deb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800deb2:	89a3      	ldrh	r3, [r4, #12]
 800deb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800deb8:	81a3      	strh	r3, [r4, #12]
 800deba:	2300      	movs	r3, #0
 800debc:	6063      	str	r3, [r4, #4]
 800debe:	6923      	ldr	r3, [r4, #16]
 800dec0:	6023      	str	r3, [r4, #0]
 800dec2:	89a3      	ldrh	r3, [r4, #12]
 800dec4:	f043 0308 	orr.w	r3, r3, #8
 800dec8:	81a3      	strh	r3, [r4, #12]
 800deca:	6923      	ldr	r3, [r4, #16]
 800decc:	b94b      	cbnz	r3, 800dee2 <__swsetup_r+0x7a>
 800dece:	89a3      	ldrh	r3, [r4, #12]
 800ded0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ded4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ded8:	d003      	beq.n	800dee2 <__swsetup_r+0x7a>
 800deda:	4621      	mov	r1, r4
 800dedc:	4628      	mov	r0, r5
 800dede:	f000 f88a 	bl	800dff6 <__smakebuf_r>
 800dee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dee6:	f013 0201 	ands.w	r2, r3, #1
 800deea:	d00a      	beq.n	800df02 <__swsetup_r+0x9a>
 800deec:	2200      	movs	r2, #0
 800deee:	60a2      	str	r2, [r4, #8]
 800def0:	6962      	ldr	r2, [r4, #20]
 800def2:	4252      	negs	r2, r2
 800def4:	61a2      	str	r2, [r4, #24]
 800def6:	6922      	ldr	r2, [r4, #16]
 800def8:	b942      	cbnz	r2, 800df0c <__swsetup_r+0xa4>
 800defa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800defe:	d1c5      	bne.n	800de8c <__swsetup_r+0x24>
 800df00:	bd38      	pop	{r3, r4, r5, pc}
 800df02:	0799      	lsls	r1, r3, #30
 800df04:	bf58      	it	pl
 800df06:	6962      	ldrpl	r2, [r4, #20]
 800df08:	60a2      	str	r2, [r4, #8]
 800df0a:	e7f4      	b.n	800def6 <__swsetup_r+0x8e>
 800df0c:	2000      	movs	r0, #0
 800df0e:	e7f7      	b.n	800df00 <__swsetup_r+0x98>
 800df10:	20000310 	.word	0x20000310

0800df14 <_raise_r>:
 800df14:	291f      	cmp	r1, #31
 800df16:	b538      	push	{r3, r4, r5, lr}
 800df18:	4605      	mov	r5, r0
 800df1a:	460c      	mov	r4, r1
 800df1c:	d904      	bls.n	800df28 <_raise_r+0x14>
 800df1e:	2316      	movs	r3, #22
 800df20:	6003      	str	r3, [r0, #0]
 800df22:	f04f 30ff 	mov.w	r0, #4294967295
 800df26:	bd38      	pop	{r3, r4, r5, pc}
 800df28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df2a:	b112      	cbz	r2, 800df32 <_raise_r+0x1e>
 800df2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df30:	b94b      	cbnz	r3, 800df46 <_raise_r+0x32>
 800df32:	4628      	mov	r0, r5
 800df34:	f000 f830 	bl	800df98 <_getpid_r>
 800df38:	4622      	mov	r2, r4
 800df3a:	4601      	mov	r1, r0
 800df3c:	4628      	mov	r0, r5
 800df3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df42:	f000 b817 	b.w	800df74 <_kill_r>
 800df46:	2b01      	cmp	r3, #1
 800df48:	d00a      	beq.n	800df60 <_raise_r+0x4c>
 800df4a:	1c59      	adds	r1, r3, #1
 800df4c:	d103      	bne.n	800df56 <_raise_r+0x42>
 800df4e:	2316      	movs	r3, #22
 800df50:	6003      	str	r3, [r0, #0]
 800df52:	2001      	movs	r0, #1
 800df54:	e7e7      	b.n	800df26 <_raise_r+0x12>
 800df56:	2100      	movs	r1, #0
 800df58:	4620      	mov	r0, r4
 800df5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df5e:	4798      	blx	r3
 800df60:	2000      	movs	r0, #0
 800df62:	e7e0      	b.n	800df26 <_raise_r+0x12>

0800df64 <raise>:
 800df64:	4b02      	ldr	r3, [pc, #8]	@ (800df70 <raise+0xc>)
 800df66:	4601      	mov	r1, r0
 800df68:	6818      	ldr	r0, [r3, #0]
 800df6a:	f7ff bfd3 	b.w	800df14 <_raise_r>
 800df6e:	bf00      	nop
 800df70:	20000310 	.word	0x20000310

0800df74 <_kill_r>:
 800df74:	b538      	push	{r3, r4, r5, lr}
 800df76:	2300      	movs	r3, #0
 800df78:	4d06      	ldr	r5, [pc, #24]	@ (800df94 <_kill_r+0x20>)
 800df7a:	4604      	mov	r4, r0
 800df7c:	4608      	mov	r0, r1
 800df7e:	4611      	mov	r1, r2
 800df80:	602b      	str	r3, [r5, #0]
 800df82:	f7f4 f8ea 	bl	800215a <_kill>
 800df86:	1c43      	adds	r3, r0, #1
 800df88:	d102      	bne.n	800df90 <_kill_r+0x1c>
 800df8a:	682b      	ldr	r3, [r5, #0]
 800df8c:	b103      	cbz	r3, 800df90 <_kill_r+0x1c>
 800df8e:	6023      	str	r3, [r4, #0]
 800df90:	bd38      	pop	{r3, r4, r5, pc}
 800df92:	bf00      	nop
 800df94:	20001894 	.word	0x20001894

0800df98 <_getpid_r>:
 800df98:	f7f4 b8d8 	b.w	800214c <_getpid>

0800df9c <_malloc_usable_size_r>:
 800df9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfa0:	1f18      	subs	r0, r3, #4
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	bfbc      	itt	lt
 800dfa6:	580b      	ldrlt	r3, [r1, r0]
 800dfa8:	18c0      	addlt	r0, r0, r3
 800dfaa:	4770      	bx	lr

0800dfac <__swhatbuf_r>:
 800dfac:	b570      	push	{r4, r5, r6, lr}
 800dfae:	460c      	mov	r4, r1
 800dfb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfb4:	4615      	mov	r5, r2
 800dfb6:	2900      	cmp	r1, #0
 800dfb8:	461e      	mov	r6, r3
 800dfba:	b096      	sub	sp, #88	@ 0x58
 800dfbc:	da0c      	bge.n	800dfd8 <__swhatbuf_r+0x2c>
 800dfbe:	89a3      	ldrh	r3, [r4, #12]
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dfc6:	bf14      	ite	ne
 800dfc8:	2340      	movne	r3, #64	@ 0x40
 800dfca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dfce:	2000      	movs	r0, #0
 800dfd0:	6031      	str	r1, [r6, #0]
 800dfd2:	602b      	str	r3, [r5, #0]
 800dfd4:	b016      	add	sp, #88	@ 0x58
 800dfd6:	bd70      	pop	{r4, r5, r6, pc}
 800dfd8:	466a      	mov	r2, sp
 800dfda:	f000 f849 	bl	800e070 <_fstat_r>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	dbed      	blt.n	800dfbe <__swhatbuf_r+0x12>
 800dfe2:	9901      	ldr	r1, [sp, #4]
 800dfe4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dfe8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dfec:	4259      	negs	r1, r3
 800dfee:	4159      	adcs	r1, r3
 800dff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dff4:	e7eb      	b.n	800dfce <__swhatbuf_r+0x22>

0800dff6 <__smakebuf_r>:
 800dff6:	898b      	ldrh	r3, [r1, #12]
 800dff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dffa:	079d      	lsls	r5, r3, #30
 800dffc:	4606      	mov	r6, r0
 800dffe:	460c      	mov	r4, r1
 800e000:	d507      	bpl.n	800e012 <__smakebuf_r+0x1c>
 800e002:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e006:	6023      	str	r3, [r4, #0]
 800e008:	6123      	str	r3, [r4, #16]
 800e00a:	2301      	movs	r3, #1
 800e00c:	6163      	str	r3, [r4, #20]
 800e00e:	b003      	add	sp, #12
 800e010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e012:	466a      	mov	r2, sp
 800e014:	ab01      	add	r3, sp, #4
 800e016:	f7ff ffc9 	bl	800dfac <__swhatbuf_r>
 800e01a:	9f00      	ldr	r7, [sp, #0]
 800e01c:	4605      	mov	r5, r0
 800e01e:	4639      	mov	r1, r7
 800e020:	4630      	mov	r0, r6
 800e022:	f7fe fdd5 	bl	800cbd0 <_malloc_r>
 800e026:	b948      	cbnz	r0, 800e03c <__smakebuf_r+0x46>
 800e028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e02c:	059a      	lsls	r2, r3, #22
 800e02e:	d4ee      	bmi.n	800e00e <__smakebuf_r+0x18>
 800e030:	f023 0303 	bic.w	r3, r3, #3
 800e034:	f043 0302 	orr.w	r3, r3, #2
 800e038:	81a3      	strh	r3, [r4, #12]
 800e03a:	e7e2      	b.n	800e002 <__smakebuf_r+0xc>
 800e03c:	89a3      	ldrh	r3, [r4, #12]
 800e03e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e046:	81a3      	strh	r3, [r4, #12]
 800e048:	9b01      	ldr	r3, [sp, #4]
 800e04a:	6020      	str	r0, [r4, #0]
 800e04c:	b15b      	cbz	r3, 800e066 <__smakebuf_r+0x70>
 800e04e:	4630      	mov	r0, r6
 800e050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e054:	f000 f81e 	bl	800e094 <_isatty_r>
 800e058:	b128      	cbz	r0, 800e066 <__smakebuf_r+0x70>
 800e05a:	89a3      	ldrh	r3, [r4, #12]
 800e05c:	f023 0303 	bic.w	r3, r3, #3
 800e060:	f043 0301 	orr.w	r3, r3, #1
 800e064:	81a3      	strh	r3, [r4, #12]
 800e066:	89a3      	ldrh	r3, [r4, #12]
 800e068:	431d      	orrs	r5, r3
 800e06a:	81a5      	strh	r5, [r4, #12]
 800e06c:	e7cf      	b.n	800e00e <__smakebuf_r+0x18>
	...

0800e070 <_fstat_r>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	2300      	movs	r3, #0
 800e074:	4d06      	ldr	r5, [pc, #24]	@ (800e090 <_fstat_r+0x20>)
 800e076:	4604      	mov	r4, r0
 800e078:	4608      	mov	r0, r1
 800e07a:	4611      	mov	r1, r2
 800e07c:	602b      	str	r3, [r5, #0]
 800e07e:	f7f4 f8cb 	bl	8002218 <_fstat>
 800e082:	1c43      	adds	r3, r0, #1
 800e084:	d102      	bne.n	800e08c <_fstat_r+0x1c>
 800e086:	682b      	ldr	r3, [r5, #0]
 800e088:	b103      	cbz	r3, 800e08c <_fstat_r+0x1c>
 800e08a:	6023      	str	r3, [r4, #0]
 800e08c:	bd38      	pop	{r3, r4, r5, pc}
 800e08e:	bf00      	nop
 800e090:	20001894 	.word	0x20001894

0800e094 <_isatty_r>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	2300      	movs	r3, #0
 800e098:	4d05      	ldr	r5, [pc, #20]	@ (800e0b0 <_isatty_r+0x1c>)
 800e09a:	4604      	mov	r4, r0
 800e09c:	4608      	mov	r0, r1
 800e09e:	602b      	str	r3, [r5, #0]
 800e0a0:	f7f4 f8c9 	bl	8002236 <_isatty>
 800e0a4:	1c43      	adds	r3, r0, #1
 800e0a6:	d102      	bne.n	800e0ae <_isatty_r+0x1a>
 800e0a8:	682b      	ldr	r3, [r5, #0]
 800e0aa:	b103      	cbz	r3, 800e0ae <_isatty_r+0x1a>
 800e0ac:	6023      	str	r3, [r4, #0]
 800e0ae:	bd38      	pop	{r3, r4, r5, pc}
 800e0b0:	20001894 	.word	0x20001894

0800e0b4 <fmaxf>:
 800e0b4:	b538      	push	{r3, r4, r5, lr}
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	460d      	mov	r5, r1
 800e0ba:	f000 f825 	bl	800e108 <__fpclassifyf>
 800e0be:	b910      	cbnz	r0, 800e0c6 <fmaxf+0x12>
 800e0c0:	462c      	mov	r4, r5
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	bd38      	pop	{r3, r4, r5, pc}
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f000 f81e 	bl	800e108 <__fpclassifyf>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d0f8      	beq.n	800e0c2 <fmaxf+0xe>
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	f7f3 f812 	bl	80010fc <__aeabi_fcmpgt>
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d0f1      	beq.n	800e0c0 <fmaxf+0xc>
 800e0dc:	e7f1      	b.n	800e0c2 <fmaxf+0xe>

0800e0de <fminf>:
 800e0de:	b538      	push	{r3, r4, r5, lr}
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	460d      	mov	r5, r1
 800e0e4:	f000 f810 	bl	800e108 <__fpclassifyf>
 800e0e8:	b910      	cbnz	r0, 800e0f0 <fminf+0x12>
 800e0ea:	462c      	mov	r4, r5
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	bd38      	pop	{r3, r4, r5, pc}
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f000 f809 	bl	800e108 <__fpclassifyf>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d0f8      	beq.n	800e0ec <fminf+0xe>
 800e0fa:	4629      	mov	r1, r5
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f7f2 ffdf 	bl	80010c0 <__aeabi_fcmplt>
 800e102:	2800      	cmp	r0, #0
 800e104:	d0f1      	beq.n	800e0ea <fminf+0xc>
 800e106:	e7f1      	b.n	800e0ec <fminf+0xe>

0800e108 <__fpclassifyf>:
 800e108:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800e10c:	d00d      	beq.n	800e12a <__fpclassifyf+0x22>
 800e10e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800e112:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800e116:	d30a      	bcc.n	800e12e <__fpclassifyf+0x26>
 800e118:	4b07      	ldr	r3, [pc, #28]	@ (800e138 <__fpclassifyf+0x30>)
 800e11a:	1e42      	subs	r2, r0, #1
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d908      	bls.n	800e132 <__fpclassifyf+0x2a>
 800e120:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800e124:	4258      	negs	r0, r3
 800e126:	4158      	adcs	r0, r3
 800e128:	4770      	bx	lr
 800e12a:	2002      	movs	r0, #2
 800e12c:	4770      	bx	lr
 800e12e:	2004      	movs	r0, #4
 800e130:	4770      	bx	lr
 800e132:	2003      	movs	r0, #3
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	007ffffe 	.word	0x007ffffe

0800e13c <_init>:
 800e13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13e:	bf00      	nop
 800e140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e142:	bc08      	pop	{r3}
 800e144:	469e      	mov	lr, r3
 800e146:	4770      	bx	lr

0800e148 <_fini>:
 800e148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e14a:	bf00      	nop
 800e14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e14e:	bc08      	pop	{r3}
 800e150:	469e      	mov	lr, r3
 800e152:	4770      	bx	lr
